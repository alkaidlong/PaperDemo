// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RandomName.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RandomName.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* RandomNameConfigItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomNameConfigItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomNameConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomNameConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RandomName_2eproto() {
  protobuf_AddDesc_RandomName_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RandomName.proto");
  GOOGLE_CHECK(file != NULL);
  RandomNameConfigItem_descriptor_ = file->message_type(0);
  static const int RandomNameConfigItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfigItem, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfigItem, value_),
  };
  RandomNameConfigItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomNameConfigItem_descriptor_,
      RandomNameConfigItem::default_instance_,
      RandomNameConfigItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfigItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfigItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNameConfigItem));
  RandomNameConfig_descriptor_ = file->message_type(1);
  static const int RandomNameConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfig, items_),
  };
  RandomNameConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomNameConfig_descriptor_,
      RandomNameConfig::default_instance_,
      RandomNameConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNameConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RandomName_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNameConfigItem_descriptor_, &RandomNameConfigItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNameConfig_descriptor_, &RandomNameConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RandomName_2eproto() {
  delete RandomNameConfigItem::default_instance_;
  delete RandomNameConfigItem_reflection_;
  delete RandomNameConfig::default_instance_;
  delete RandomNameConfig_reflection_;
}

void protobuf_AddDesc_RandomName_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RandomName.proto\022\020Medusa.CoreProto\"7\n\024"
    "RandomNameConfigItem\022\020\n\010Position\030\001 \002(\r\022\r"
    "\n\005Value\030\002 \002(\t\"I\n\020RandomNameConfig\0225\n\005Ite"
    "ms\030\001 \003(\0132&.Medusa.CoreProto.RandomNameCo"
    "nfigItem", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RandomName.proto", &protobuf_RegisterTypes);
  RandomNameConfigItem::default_instance_ = new RandomNameConfigItem();
  RandomNameConfig::default_instance_ = new RandomNameConfig();
  RandomNameConfigItem::default_instance_->InitAsDefaultInstance();
  RandomNameConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RandomName_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RandomName_2eproto {
  StaticDescriptorInitializer_RandomName_2eproto() {
    protobuf_AddDesc_RandomName_2eproto();
  }
} static_descriptor_initializer_RandomName_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RandomNameConfigItem::kPositionFieldNumber;
const int RandomNameConfigItem::kValueFieldNumber;
#endif  // !_MSC_VER

RandomNameConfigItem::RandomNameConfigItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomNameConfigItem::InitAsDefaultInstance() {
}

RandomNameConfigItem::RandomNameConfigItem(const RandomNameConfigItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomNameConfigItem::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNameConfigItem::~RandomNameConfigItem() {
  SharedDtor();
}

void RandomNameConfigItem::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RandomNameConfigItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomNameConfigItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNameConfigItem_descriptor_;
}

const RandomNameConfigItem& RandomNameConfigItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RandomName_2eproto();
  return *default_instance_;
}

RandomNameConfigItem* RandomNameConfigItem::default_instance_ = NULL;

RandomNameConfigItem* RandomNameConfigItem::New() const {
  return new RandomNameConfigItem;
}

void RandomNameConfigItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNameConfigItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required string Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomNameConfigItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomNameConfigItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomNameConfigItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNameConfigItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNameConfigItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomNameConfigItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNameConfigItem::MergeFrom(const RandomNameConfigItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNameConfigItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNameConfigItem::CopyFrom(const RandomNameConfigItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNameConfigItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RandomNameConfigItem::Swap(RandomNameConfigItem* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomNameConfigItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomNameConfigItem_descriptor_;
  metadata.reflection = RandomNameConfigItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomNameConfig::kItemsFieldNumber;
#endif  // !_MSC_VER

RandomNameConfig::RandomNameConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomNameConfig::InitAsDefaultInstance() {
}

RandomNameConfig::RandomNameConfig(const RandomNameConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomNameConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNameConfig::~RandomNameConfig() {
  SharedDtor();
}

void RandomNameConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomNameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomNameConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNameConfig_descriptor_;
}

const RandomNameConfig& RandomNameConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RandomName_2eproto();
  return *default_instance_;
}

RandomNameConfig* RandomNameConfig::default_instance_ = NULL;

RandomNameConfig* RandomNameConfig::New() const {
  return new RandomNameConfig;
}

void RandomNameConfig::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Medusa.CoreProto.RandomNameConfigItem Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomNameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Medusa.CoreProto.RandomNameConfigItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomNameConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Medusa.CoreProto.RandomNameConfigItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomNameConfig::ByteSize() const {
  int total_size = 0;

  // repeated .Medusa.CoreProto.RandomNameConfigItem Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNameConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNameConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomNameConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNameConfig::MergeFrom(const RandomNameConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNameConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNameConfig::CopyFrom(const RandomNameConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNameConfig::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void RandomNameConfig::Swap(RandomNameConfig* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomNameConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomNameConfig_descriptor_;
  metadata.reflection = RandomNameConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FuckyString.proto

#ifndef PROTOBUF_FuckyString_2eproto__INCLUDED
#define PROTOBUF_FuckyString_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FuckyString_2eproto();
void protobuf_AssignDesc_FuckyString_2eproto();
void protobuf_ShutdownFile_FuckyString_2eproto();

class FuckyStringNode;
class FuckyString;

// ===================================================================

class FuckyStringNode : public ::google::protobuf::Message {
 public:
  FuckyStringNode();
  virtual ~FuckyStringNode();

  FuckyStringNode(const FuckyStringNode& from);

  inline FuckyStringNode& operator=(const FuckyStringNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FuckyStringNode& default_instance();

  void Swap(FuckyStringNode* other);

  // implements Message ----------------------------------------------

  FuckyStringNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FuckyStringNode& from);
  void MergeFrom(const FuckyStringNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 charVal = 1;
  inline bool has_charval() const;
  inline void clear_charval();
  static const int kCharValFieldNumber = 1;
  inline ::google::protobuf::int32 charval() const;
  inline void set_charval(::google::protobuf::int32 value);

  // required bool isFucky = 2;
  inline bool has_isfucky() const;
  inline void clear_isfucky();
  static const int kIsFuckyFieldNumber = 2;
  inline bool isfucky() const;
  inline void set_isfucky(bool value);

  // repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
  inline int childs_size() const;
  inline void clear_childs();
  static const int kChildsFieldNumber = 3;
  inline const ::Medusa::CoreProto::FuckyStringNode& childs(int index) const;
  inline ::Medusa::CoreProto::FuckyStringNode* mutable_childs(int index);
  inline ::Medusa::CoreProto::FuckyStringNode* add_childs();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >&
      childs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >*
      mutable_childs();

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FuckyStringNode)
 private:
  inline void set_has_charval();
  inline void clear_has_charval();
  inline void set_has_isfucky();
  inline void clear_has_isfucky();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 charval_;
  bool isfucky_;
  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode > childs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FuckyString_2eproto();
  friend void protobuf_AssignDesc_FuckyString_2eproto();
  friend void protobuf_ShutdownFile_FuckyString_2eproto();

  void InitAsDefaultInstance();
  static FuckyStringNode* default_instance_;
};
// -------------------------------------------------------------------

class FuckyString : public ::google::protobuf::Message {
 public:
  FuckyString();
  virtual ~FuckyString();

  FuckyString(const FuckyString& from);

  inline FuckyString& operator=(const FuckyString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FuckyString& default_instance();

  void Swap(FuckyString* other);

  // implements Message ----------------------------------------------

  FuckyString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FuckyString& from);
  void MergeFrom(const FuckyString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
  inline int rootnodes_size() const;
  inline void clear_rootnodes();
  static const int kRootNodesFieldNumber = 1;
  inline const ::Medusa::CoreProto::FuckyStringNode& rootnodes(int index) const;
  inline ::Medusa::CoreProto::FuckyStringNode* mutable_rootnodes(int index);
  inline ::Medusa::CoreProto::FuckyStringNode* add_rootnodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >&
      rootnodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >*
      mutable_rootnodes();

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FuckyString)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode > rootnodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FuckyString_2eproto();
  friend void protobuf_AssignDesc_FuckyString_2eproto();
  friend void protobuf_ShutdownFile_FuckyString_2eproto();

  void InitAsDefaultInstance();
  static FuckyString* default_instance_;
};
// ===================================================================


// ===================================================================

// FuckyStringNode

// required int32 charVal = 1;
inline bool FuckyStringNode::has_charval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FuckyStringNode::set_has_charval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FuckyStringNode::clear_has_charval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FuckyStringNode::clear_charval() {
  charval_ = 0;
  clear_has_charval();
}
inline ::google::protobuf::int32 FuckyStringNode::charval() const {
  return charval_;
}
inline void FuckyStringNode::set_charval(::google::protobuf::int32 value) {
  set_has_charval();
  charval_ = value;
}

// required bool isFucky = 2;
inline bool FuckyStringNode::has_isfucky() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FuckyStringNode::set_has_isfucky() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FuckyStringNode::clear_has_isfucky() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FuckyStringNode::clear_isfucky() {
  isfucky_ = false;
  clear_has_isfucky();
}
inline bool FuckyStringNode::isfucky() const {
  return isfucky_;
}
inline void FuckyStringNode::set_isfucky(bool value) {
  set_has_isfucky();
  isfucky_ = value;
}

// repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
inline int FuckyStringNode::childs_size() const {
  return childs_.size();
}
inline void FuckyStringNode::clear_childs() {
  childs_.Clear();
}
inline const ::Medusa::CoreProto::FuckyStringNode& FuckyStringNode::childs(int index) const {
  return childs_.Get(index);
}
inline ::Medusa::CoreProto::FuckyStringNode* FuckyStringNode::mutable_childs(int index) {
  return childs_.Mutable(index);
}
inline ::Medusa::CoreProto::FuckyStringNode* FuckyStringNode::add_childs() {
  return childs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >&
FuckyStringNode::childs() const {
  return childs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >*
FuckyStringNode::mutable_childs() {
  return &childs_;
}

// -------------------------------------------------------------------

// FuckyString

// repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
inline int FuckyString::rootnodes_size() const {
  return rootnodes_.size();
}
inline void FuckyString::clear_rootnodes() {
  rootnodes_.Clear();
}
inline const ::Medusa::CoreProto::FuckyStringNode& FuckyString::rootnodes(int index) const {
  return rootnodes_.Get(index);
}
inline ::Medusa::CoreProto::FuckyStringNode* FuckyString::mutable_rootnodes(int index) {
  return rootnodes_.Mutable(index);
}
inline ::Medusa::CoreProto::FuckyStringNode* FuckyString::add_rootnodes() {
  return rootnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >&
FuckyString::rootnodes() const {
  return rootnodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FuckyStringNode >*
FuckyString::mutable_rootnodes() {
  return &rootnodes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FuckyString_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileSystem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FileSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* FileId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileId_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemOrderItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemOrderItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemNameItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemNameItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemTagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemTagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FileSystem_2eproto() {
  protobuf_AddDesc_FileSystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FileSystem.proto");
  GOOGLE_CHECK(file != NULL);
  FileId_descriptor_ = file->message_type(0);
  static const int FileId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileId, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileId, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileId, tag_),
  };
  FileId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileId_descriptor_,
      FileId::default_instance_,
      FileId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileId));
  FileSystemOrderItem_descriptor_ = file->message_type(1);
  static const int FileSystemOrderItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, texturerect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, originalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, data_),
  };
  FileSystemOrderItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystemOrderItem_descriptor_,
      FileSystemOrderItem::default_instance_,
      FileSystemOrderItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemOrderItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystemOrderItem));
  FileSystemNameItem_descriptor_ = file->message_type(2);
  static const int FileSystemNameItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemNameItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemNameItem, orderitems_),
  };
  FileSystemNameItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystemNameItem_descriptor_,
      FileSystemNameItem::default_instance_,
      FileSystemNameItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemNameItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemNameItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystemNameItem));
  FileSystemTagItem_descriptor_ = file->message_type(3);
  static const int FileSystemTagItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemTagItem, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemTagItem, nameitems_),
  };
  FileSystemTagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystemTagItem_descriptor_,
      FileSystemTagItem::default_instance_,
      FileSystemTagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemTagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemTagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystemTagItem));
  FileSystem_descriptor_ = file->message_type(4);
  static const int FileSystem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem, tagitems_),
  };
  FileSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileSystem_descriptor_,
      FileSystem::default_instance_,
      FileSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileSystem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FileSystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileId_descriptor_, &FileId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystemOrderItem_descriptor_, &FileSystemOrderItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystemNameItem_descriptor_, &FileSystemNameItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystemTagItem_descriptor_, &FileSystemTagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileSystem_descriptor_, &FileSystem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FileSystem_2eproto() {
  delete FileId::default_instance_;
  delete FileId_reflection_;
  delete FileSystemOrderItem::default_instance_;
  delete FileSystemOrderItem_reflection_;
  delete FileSystemNameItem::default_instance_;
  delete FileSystemNameItem_reflection_;
  delete FileSystemTagItem::default_instance_;
  delete FileSystemTagItem_reflection_;
  delete FileSystem::default_instance_;
  delete FileSystem_reflection_;
}

void protobuf_AddDesc_FileSystem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_Geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FileSystem.proto\022\020Medusa.CoreProto\032\016Ge"
    "ometry.proto\"2\n\006FileId\022\014\n\004Name\030\001 \002(\t\022\r\n\005"
    "Order\030\002 \001(\r\022\013\n\003Tag\030\003 \001(\005\"\311\001\n\023FileSystemO"
    "rderItem\022\r\n\005Order\030\001 \002(\r\022\016\n\006FileId\030\002 \001(\r\022"
    ",\n\013TextureRect\030\003 \001(\0132\027.Medusa.CoreProto."
    "RectU\022(\n\006Offset\030\004 \001(\0132\030.Medusa.CoreProto"
    ".PointU\022-\n\014OriginalSize\030\005 \001(\0132\027.Medusa.C"
    "oreProto.SizeU\022\014\n\004Data\030\006 \001(\014\"]\n\022FileSyst"
    "emNameItem\022\014\n\004Name\030\001 \002(\t\0229\n\nOrderItems\030\002"
    " \003(\0132%.Medusa.CoreProto.FileSystemOrderI"
    "tem\"Y\n\021FileSystemTagItem\022\013\n\003Tag\030\001 \002(\005\0227\n"
    "\tNameItems\030\002 \003(\0132$.Medusa.CoreProto.File"
    "SystemNameItem\"C\n\nFileSystem\0225\n\010TagItems"
    "\030\001 \003(\0132#.Medusa.CoreProto.FileSystemTagI"
    "tem", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FileSystem.proto", &protobuf_RegisterTypes);
  FileId::default_instance_ = new FileId();
  FileSystemOrderItem::default_instance_ = new FileSystemOrderItem();
  FileSystemNameItem::default_instance_ = new FileSystemNameItem();
  FileSystemTagItem::default_instance_ = new FileSystemTagItem();
  FileSystem::default_instance_ = new FileSystem();
  FileId::default_instance_->InitAsDefaultInstance();
  FileSystemOrderItem::default_instance_->InitAsDefaultInstance();
  FileSystemNameItem::default_instance_->InitAsDefaultInstance();
  FileSystemTagItem::default_instance_->InitAsDefaultInstance();
  FileSystem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FileSystem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FileSystem_2eproto {
  StaticDescriptorInitializer_FileSystem_2eproto() {
    protobuf_AddDesc_FileSystem_2eproto();
  }
} static_descriptor_initializer_FileSystem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileId::kNameFieldNumber;
const int FileId::kOrderFieldNumber;
const int FileId::kTagFieldNumber;
#endif  // !_MSC_VER

FileId::FileId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileId::InitAsDefaultInstance() {
}

FileId::FileId(const FileId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileId::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ = 0u;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileId::~FileId() {
  SharedDtor();
}

void FileId::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileId_descriptor_;
}

const FileId& FileId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();
  return *default_instance_;
}

FileId* FileId::default_instance_ = NULL;

FileId* FileId::New() const {
  return new FileId;
}

void FileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    order_ = 0u;
    tag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Order;
        break;
      }

      // optional uint32 Order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 Order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }

  // optional int32 Tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 Order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }

  // optional int32 Tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 Order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional int32 Tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileId::MergeFrom(const FileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileId::CopyFrom(const FileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileId::Swap(FileId* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(order_, other->order_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileId_descriptor_;
  metadata.reflection = FileId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileSystemOrderItem::kOrderFieldNumber;
const int FileSystemOrderItem::kFileIdFieldNumber;
const int FileSystemOrderItem::kTextureRectFieldNumber;
const int FileSystemOrderItem::kOffsetFieldNumber;
const int FileSystemOrderItem::kOriginalSizeFieldNumber;
const int FileSystemOrderItem::kDataFieldNumber;
#endif  // !_MSC_VER

FileSystemOrderItem::FileSystemOrderItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystemOrderItem::InitAsDefaultInstance() {
  texturerect_ = const_cast< ::Medusa::CoreProto::RectU*>(&::Medusa::CoreProto::RectU::default_instance());
  offset_ = const_cast< ::Medusa::CoreProto::PointU*>(&::Medusa::CoreProto::PointU::default_instance());
  originalsize_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
}

FileSystemOrderItem::FileSystemOrderItem(const FileSystemOrderItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystemOrderItem::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  fileid_ = 0u;
  texturerect_ = NULL;
  offset_ = NULL;
  originalsize_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystemOrderItem::~FileSystemOrderItem() {
  SharedDtor();
}

void FileSystemOrderItem::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete texturerect_;
    delete offset_;
    delete originalsize_;
  }
}

void FileSystemOrderItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemOrderItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemOrderItem_descriptor_;
}

const FileSystemOrderItem& FileSystemOrderItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();
  return *default_instance_;
}

FileSystemOrderItem* FileSystemOrderItem::default_instance_ = NULL;

FileSystemOrderItem* FileSystemOrderItem::New() const {
  return new FileSystemOrderItem;
}

void FileSystemOrderItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    fileid_ = 0u;
    if (has_texturerect()) {
      if (texturerect_ != NULL) texturerect_->::Medusa::CoreProto::RectU::Clear();
    }
    if (has_offset()) {
      if (offset_ != NULL) offset_->::Medusa::CoreProto::PointU::Clear();
    }
    if (has_originalsize()) {
      if (originalsize_ != NULL) originalsize_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystemOrderItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FileId;
        break;
      }

      // optional uint32 FileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TextureRect;
        break;
      }

      // optional .Medusa.CoreProto.RectU TextureRect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TextureRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texturerect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Offset;
        break;
      }

      // optional .Medusa.CoreProto.PointU Offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OriginalSize;
        break;
      }

      // optional .Medusa.CoreProto.SizeU OriginalSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OriginalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Data;
        break;
      }

      // optional bytes Data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystemOrderItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }

  // optional uint32 FileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fileid(), output);
  }

  // optional .Medusa.CoreProto.RectU TextureRect = 3;
  if (has_texturerect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->texturerect(), output);
  }

  // optional .Medusa.CoreProto.PointU Offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->offset(), output);
  }

  // optional .Medusa.CoreProto.SizeU OriginalSize = 5;
  if (has_originalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->originalsize(), output);
  }

  // optional bytes Data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystemOrderItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }

  // optional uint32 FileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fileid(), target);
  }

  // optional .Medusa.CoreProto.RectU TextureRect = 3;
  if (has_texturerect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->texturerect(), target);
  }

  // optional .Medusa.CoreProto.PointU Offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->offset(), target);
  }

  // optional .Medusa.CoreProto.SizeU OriginalSize = 5;
  if (has_originalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->originalsize(), target);
  }

  // optional bytes Data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystemOrderItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional uint32 FileId = 2;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fileid());
    }

    // optional .Medusa.CoreProto.RectU TextureRect = 3;
    if (has_texturerect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texturerect());
    }

    // optional .Medusa.CoreProto.PointU Offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }

    // optional .Medusa.CoreProto.SizeU OriginalSize = 5;
    if (has_originalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalsize());
    }

    // optional bytes Data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemOrderItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystemOrderItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystemOrderItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystemOrderItem::MergeFrom(const FileSystemOrderItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_texturerect()) {
      mutable_texturerect()->::Medusa::CoreProto::RectU::MergeFrom(from.texturerect());
    }
    if (from.has_offset()) {
      mutable_offset()->::Medusa::CoreProto::PointU::MergeFrom(from.offset());
    }
    if (from.has_originalsize()) {
      mutable_originalsize()->::Medusa::CoreProto::SizeU::MergeFrom(from.originalsize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystemOrderItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemOrderItem::CopyFrom(const FileSystemOrderItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemOrderItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_texturerect()) {
    if (!this->texturerect().IsInitialized()) return false;
  }
  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  if (has_originalsize()) {
    if (!this->originalsize().IsInitialized()) return false;
  }
  return true;
}

void FileSystemOrderItem::Swap(FileSystemOrderItem* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(fileid_, other->fileid_);
    std::swap(texturerect_, other->texturerect_);
    std::swap(offset_, other->offset_);
    std::swap(originalsize_, other->originalsize_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystemOrderItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemOrderItem_descriptor_;
  metadata.reflection = FileSystemOrderItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileSystemNameItem::kNameFieldNumber;
const int FileSystemNameItem::kOrderItemsFieldNumber;
#endif  // !_MSC_VER

FileSystemNameItem::FileSystemNameItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystemNameItem::InitAsDefaultInstance() {
}

FileSystemNameItem::FileSystemNameItem(const FileSystemNameItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystemNameItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystemNameItem::~FileSystemNameItem() {
  SharedDtor();
}

void FileSystemNameItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FileSystemNameItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemNameItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemNameItem_descriptor_;
}

const FileSystemNameItem& FileSystemNameItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();
  return *default_instance_;
}

FileSystemNameItem* FileSystemNameItem::default_instance_ = NULL;

FileSystemNameItem* FileSystemNameItem::New() const {
  return new FileSystemNameItem;
}

void FileSystemNameItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  orderitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystemNameItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderItems;
        break;
      }

      // repeated .Medusa.CoreProto.FileSystemOrderItem OrderItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystemNameItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .Medusa.CoreProto.FileSystemOrderItem OrderItems = 2;
  for (int i = 0; i < this->orderitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orderitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystemNameItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Medusa.CoreProto.FileSystemOrderItem OrderItems = 2;
  for (int i = 0; i < this->orderitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orderitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystemNameItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Medusa.CoreProto.FileSystemOrderItem OrderItems = 2;
  total_size += 1 * this->orderitems_size();
  for (int i = 0; i < this->orderitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemNameItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystemNameItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystemNameItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystemNameItem::MergeFrom(const FileSystemNameItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderitems_.MergeFrom(from.orderitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystemNameItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemNameItem::CopyFrom(const FileSystemNameItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemNameItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orderitems_size(); i++) {
    if (!this->orderitems(i).IsInitialized()) return false;
  }
  return true;
}

void FileSystemNameItem::Swap(FileSystemNameItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    orderitems_.Swap(&other->orderitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystemNameItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemNameItem_descriptor_;
  metadata.reflection = FileSystemNameItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileSystemTagItem::kTagFieldNumber;
const int FileSystemTagItem::kNameItemsFieldNumber;
#endif  // !_MSC_VER

FileSystemTagItem::FileSystemTagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystemTagItem::InitAsDefaultInstance() {
}

FileSystemTagItem::FileSystemTagItem(const FileSystemTagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystemTagItem::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystemTagItem::~FileSystemTagItem() {
  SharedDtor();
}

void FileSystemTagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystemTagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemTagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemTagItem_descriptor_;
}

const FileSystemTagItem& FileSystemTagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();
  return *default_instance_;
}

FileSystemTagItem* FileSystemTagItem::default_instance_ = NULL;

FileSystemTagItem* FileSystemTagItem::New() const {
  return new FileSystemTagItem;
}

void FileSystemTagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0;
  }
  nameitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystemTagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NameItems;
        break;
      }

      // repeated .Medusa.CoreProto.FileSystemNameItem NameItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NameItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nameitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NameItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystemTagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // repeated .Medusa.CoreProto.FileSystemNameItem NameItems = 2;
  for (int i = 0; i < this->nameitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nameitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystemTagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag(), target);
  }

  // repeated .Medusa.CoreProto.FileSystemNameItem NameItems = 2;
  for (int i = 0; i < this->nameitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nameitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystemTagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  // repeated .Medusa.CoreProto.FileSystemNameItem NameItems = 2;
  total_size += 1 * this->nameitems_size();
  for (int i = 0; i < this->nameitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nameitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemTagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystemTagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystemTagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystemTagItem::MergeFrom(const FileSystemTagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  nameitems_.MergeFrom(from.nameitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystemTagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemTagItem::CopyFrom(const FileSystemTagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemTagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nameitems_size(); i++) {
    if (!this->nameitems(i).IsInitialized()) return false;
  }
  return true;
}

void FileSystemTagItem::Swap(FileSystemTagItem* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    nameitems_.Swap(&other->nameitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystemTagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemTagItem_descriptor_;
  metadata.reflection = FileSystemTagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileSystem::kTagItemsFieldNumber;
#endif  // !_MSC_VER

FileSystem::FileSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileSystem::InitAsDefaultInstance() {
}

FileSystem::FileSystem(const FileSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileSystem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileSystem::~FileSystem() {
  SharedDtor();
}

void FileSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystem_descriptor_;
}

const FileSystem& FileSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();
  return *default_instance_;
}

FileSystem* FileSystem::default_instance_ = NULL;

FileSystem* FileSystem::New() const {
  return new FileSystem;
}

void FileSystem::Clear() {
  tagitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Medusa.CoreProto.FileSystemTagItem TagItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TagItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tagitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TagItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Medusa.CoreProto.FileSystemTagItem TagItems = 1;
  for (int i = 0; i < this->tagitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tagitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Medusa.CoreProto.FileSystemTagItem TagItems = 1;
  for (int i = 0; i < this->tagitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tagitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileSystem::ByteSize() const {
  int total_size = 0;

  // repeated .Medusa.CoreProto.FileSystemTagItem TagItems = 1;
  total_size += 1 * this->tagitems_size();
  for (int i = 0; i < this->tagitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tagitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileSystem::MergeFrom(const FileSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagitems_.MergeFrom(from.tagitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystem::CopyFrom(const FileSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystem::IsInitialized() const {

  for (int i = 0; i < tagitems_size(); i++) {
    if (!this->tagitems(i).IsInitialized()) return false;
  }
  return true;
}

void FileSystem::Swap(FileSystem* other) {
  if (other != this) {
    tagitems_.Swap(&other->tagitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystem_descriptor_;
  metadata.reflection = FileSystem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

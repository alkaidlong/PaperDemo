// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnvironmentTag.proto

#ifndef PROTOBUF_EnvironmentTag_2eproto__INCLUDED
#define PROTOBUF_EnvironmentTag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EnvironmentTag_2eproto();
void protobuf_AssignDesc_EnvironmentTag_2eproto();
void protobuf_ShutdownFile_EnvironmentTag_2eproto();

class EnvironmentTag;

enum EnvironmentTag_Versions {
  EnvironmentTag_Versions_main = 1,
  EnvironmentTag_Versions_free = 2
};
bool EnvironmentTag_Versions_IsValid(int value);
const EnvironmentTag_Versions EnvironmentTag_Versions_Versions_MIN = EnvironmentTag_Versions_main;
const EnvironmentTag_Versions EnvironmentTag_Versions_Versions_MAX = EnvironmentTag_Versions_free;
const int EnvironmentTag_Versions_Versions_ARRAYSIZE = EnvironmentTag_Versions_Versions_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvironmentTag_Versions_descriptor();
inline const ::std::string& EnvironmentTag_Versions_Name(EnvironmentTag_Versions value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvironmentTag_Versions_descriptor(), value);
}
inline bool EnvironmentTag_Versions_Parse(
    const ::std::string& name, EnvironmentTag_Versions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvironmentTag_Versions>(
    EnvironmentTag_Versions_descriptor(), name, value);
}
enum EnvironmentTag_Devices {
  EnvironmentTag_Devices_sd = 1,
  EnvironmentTag_Devices_hd = 2,
  EnvironmentTag_Devices_hd5 = 4,
  EnvironmentTag_Devices_ipad = 8,
  EnvironmentTag_Devices_ipad3 = 16
};
bool EnvironmentTag_Devices_IsValid(int value);
const EnvironmentTag_Devices EnvironmentTag_Devices_Devices_MIN = EnvironmentTag_Devices_sd;
const EnvironmentTag_Devices EnvironmentTag_Devices_Devices_MAX = EnvironmentTag_Devices_ipad3;
const int EnvironmentTag_Devices_Devices_ARRAYSIZE = EnvironmentTag_Devices_Devices_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvironmentTag_Devices_descriptor();
inline const ::std::string& EnvironmentTag_Devices_Name(EnvironmentTag_Devices value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvironmentTag_Devices_descriptor(), value);
}
inline bool EnvironmentTag_Devices_Parse(
    const ::std::string& name, EnvironmentTag_Devices* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvironmentTag_Devices>(
    EnvironmentTag_Devices_descriptor(), name, value);
}
enum EnvironmentTag_Languages {
  EnvironmentTag_Languages_enus = 1,
  EnvironmentTag_Languages_zhcn = 2
};
bool EnvironmentTag_Languages_IsValid(int value);
const EnvironmentTag_Languages EnvironmentTag_Languages_Languages_MIN = EnvironmentTag_Languages_enus;
const EnvironmentTag_Languages EnvironmentTag_Languages_Languages_MAX = EnvironmentTag_Languages_zhcn;
const int EnvironmentTag_Languages_Languages_ARRAYSIZE = EnvironmentTag_Languages_Languages_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvironmentTag_Languages_descriptor();
inline const ::std::string& EnvironmentTag_Languages_Name(EnvironmentTag_Languages value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvironmentTag_Languages_descriptor(), value);
}
inline bool EnvironmentTag_Languages_Parse(
    const ::std::string& name, EnvironmentTag_Languages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvironmentTag_Languages>(
    EnvironmentTag_Languages_descriptor(), name, value);
}
// ===================================================================

class EnvironmentTag : public ::google::protobuf::Message {
 public:
  EnvironmentTag();
  virtual ~EnvironmentTag();

  EnvironmentTag(const EnvironmentTag& from);

  inline EnvironmentTag& operator=(const EnvironmentTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvironmentTag& default_instance();

  void Swap(EnvironmentTag* other);

  // implements Message ----------------------------------------------

  EnvironmentTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvironmentTag& from);
  void MergeFrom(const EnvironmentTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EnvironmentTag_Versions Versions;
  static const Versions main = EnvironmentTag_Versions_main;
  static const Versions free = EnvironmentTag_Versions_free;
  static inline bool Versions_IsValid(int value) {
    return EnvironmentTag_Versions_IsValid(value);
  }
  static const Versions Versions_MIN =
    EnvironmentTag_Versions_Versions_MIN;
  static const Versions Versions_MAX =
    EnvironmentTag_Versions_Versions_MAX;
  static const int Versions_ARRAYSIZE =
    EnvironmentTag_Versions_Versions_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Versions_descriptor() {
    return EnvironmentTag_Versions_descriptor();
  }
  static inline const ::std::string& Versions_Name(Versions value) {
    return EnvironmentTag_Versions_Name(value);
  }
  static inline bool Versions_Parse(const ::std::string& name,
      Versions* value) {
    return EnvironmentTag_Versions_Parse(name, value);
  }

  typedef EnvironmentTag_Devices Devices;
  static const Devices sd = EnvironmentTag_Devices_sd;
  static const Devices hd = EnvironmentTag_Devices_hd;
  static const Devices hd5 = EnvironmentTag_Devices_hd5;
  static const Devices ipad = EnvironmentTag_Devices_ipad;
  static const Devices ipad3 = EnvironmentTag_Devices_ipad3;
  static inline bool Devices_IsValid(int value) {
    return EnvironmentTag_Devices_IsValid(value);
  }
  static const Devices Devices_MIN =
    EnvironmentTag_Devices_Devices_MIN;
  static const Devices Devices_MAX =
    EnvironmentTag_Devices_Devices_MAX;
  static const int Devices_ARRAYSIZE =
    EnvironmentTag_Devices_Devices_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Devices_descriptor() {
    return EnvironmentTag_Devices_descriptor();
  }
  static inline const ::std::string& Devices_Name(Devices value) {
    return EnvironmentTag_Devices_Name(value);
  }
  static inline bool Devices_Parse(const ::std::string& name,
      Devices* value) {
    return EnvironmentTag_Devices_Parse(name, value);
  }

  typedef EnvironmentTag_Languages Languages;
  static const Languages enus = EnvironmentTag_Languages_enus;
  static const Languages zhcn = EnvironmentTag_Languages_zhcn;
  static inline bool Languages_IsValid(int value) {
    return EnvironmentTag_Languages_IsValid(value);
  }
  static const Languages Languages_MIN =
    EnvironmentTag_Languages_Languages_MIN;
  static const Languages Languages_MAX =
    EnvironmentTag_Languages_Languages_MAX;
  static const int Languages_ARRAYSIZE =
    EnvironmentTag_Languages_Languages_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Languages_descriptor() {
    return EnvironmentTag_Languages_descriptor();
  }
  static inline const ::std::string& Languages_Name(Languages value) {
    return EnvironmentTag_Languages_Name(value);
  }
  static inline bool Languages_Parse(const ::std::string& name,
      Languages* value) {
    return EnvironmentTag_Languages_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::Medusa::CoreProto::EnvironmentTag_Versions version() const;
  inline void set_version(::Medusa::CoreProto::EnvironmentTag_Versions value);

  // required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 2;
  inline ::Medusa::CoreProto::EnvironmentTag_Devices device() const;
  inline void set_device(::Medusa::CoreProto::EnvironmentTag_Devices value);

  // required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 3;
  inline ::Medusa::CoreProto::EnvironmentTag_Languages language() const;
  inline void set_language(::Medusa::CoreProto::EnvironmentTag_Languages value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.EnvironmentTag)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int version_;
  int device_;
  int language_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EnvironmentTag_2eproto();
  friend void protobuf_AssignDesc_EnvironmentTag_2eproto();
  friend void protobuf_ShutdownFile_EnvironmentTag_2eproto();

  void InitAsDefaultInstance();
  static EnvironmentTag* default_instance_;
};
// ===================================================================


// ===================================================================

// EnvironmentTag

// required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
inline bool EnvironmentTag::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnvironmentTag::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnvironmentTag::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnvironmentTag::clear_version() {
  version_ = 1;
  clear_has_version();
}
inline ::Medusa::CoreProto::EnvironmentTag_Versions EnvironmentTag::version() const {
  return static_cast< ::Medusa::CoreProto::EnvironmentTag_Versions >(version_);
}
inline void EnvironmentTag::set_version(::Medusa::CoreProto::EnvironmentTag_Versions value) {
  assert(::Medusa::CoreProto::EnvironmentTag_Versions_IsValid(value));
  set_has_version();
  version_ = value;
}

// required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
inline bool EnvironmentTag::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnvironmentTag::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnvironmentTag::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnvironmentTag::clear_device() {
  device_ = 1;
  clear_has_device();
}
inline ::Medusa::CoreProto::EnvironmentTag_Devices EnvironmentTag::device() const {
  return static_cast< ::Medusa::CoreProto::EnvironmentTag_Devices >(device_);
}
inline void EnvironmentTag::set_device(::Medusa::CoreProto::EnvironmentTag_Devices value) {
  assert(::Medusa::CoreProto::EnvironmentTag_Devices_IsValid(value));
  set_has_device();
  device_ = value;
}

// required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
inline bool EnvironmentTag::has_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnvironmentTag::set_has_language() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnvironmentTag::clear_has_language() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnvironmentTag::clear_language() {
  language_ = 1;
  clear_has_language();
}
inline ::Medusa::CoreProto::EnvironmentTag_Languages EnvironmentTag::language() const {
  return static_cast< ::Medusa::CoreProto::EnvironmentTag_Languages >(language_);
}
inline void EnvironmentTag::set_language(::Medusa::CoreProto::EnvironmentTag_Languages value) {
  assert(::Medusa::CoreProto::EnvironmentTag_Languages_IsValid(value));
  set_has_language();
  language_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::EnvironmentTag_Versions>() {
  return ::Medusa::CoreProto::EnvironmentTag_Versions_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::EnvironmentTag_Devices>() {
  return ::Medusa::CoreProto::EnvironmentTag_Devices_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::EnvironmentTag_Languages>() {
  return ::Medusa::CoreProto::EnvironmentTag_Languages_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EnvironmentTag_2eproto__INCLUDED

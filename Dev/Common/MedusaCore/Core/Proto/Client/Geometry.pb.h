// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Geometry.proto

#ifndef PROTOBUF_Geometry_2eproto__INCLUDED
#define PROTOBUF_Geometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Geometry_2eproto();
void protobuf_AssignDesc_Geometry_2eproto();
void protobuf_ShutdownFile_Geometry_2eproto();

class SizeU;
class SizeF;
class RangeU;
class RangeF;
class PointU;
class PointF;
class ScaleU;
class ScaleF;
class ColorF;
class ColorU;
class RectU;
class RectF;
class BorderU;

// ===================================================================

class SizeU : public ::google::protobuf::Message {
 public:
  SizeU();
  virtual ~SizeU();

  SizeU(const SizeU& from);

  inline SizeU& operator=(const SizeU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeU& default_instance();

  void Swap(SizeU* other);

  // implements Message ----------------------------------------------

  SizeU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SizeU& from);
  void MergeFrom(const SizeU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 Height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.SizeU)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static SizeU* default_instance_;
};
// -------------------------------------------------------------------

class SizeF : public ::google::protobuf::Message {
 public:
  SizeF();
  virtual ~SizeF();

  SizeF(const SizeF& from);

  inline SizeF& operator=(const SizeF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeF& default_instance();

  void Swap(SizeF* other);

  // implements Message ----------------------------------------------

  SizeF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SizeF& from);
  void MergeFrom(const SizeF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float Width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline float width() const;
  inline void set_width(float value);

  // required float Height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline float height() const;
  inline void set_height(float value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.SizeF)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float width_;
  float height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static SizeF* default_instance_;
};
// -------------------------------------------------------------------

class RangeU : public ::google::protobuf::Message {
 public:
  RangeU();
  virtual ~RangeU();

  RangeU(const RangeU& from);

  inline RangeU& operator=(const RangeU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeU& default_instance();

  void Swap(RangeU* other);

  // implements Message ----------------------------------------------

  RangeU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeU& from);
  void MergeFrom(const RangeU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 MinValue = 1;
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 1;
  inline ::google::protobuf::uint32 minvalue() const;
  inline void set_minvalue(::google::protobuf::uint32 value);

  // required uint32 MaxValue = 2;
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 2;
  inline ::google::protobuf::uint32 maxvalue() const;
  inline void set_maxvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.RangeU)
 private:
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 minvalue_;
  ::google::protobuf::uint32 maxvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static RangeU* default_instance_;
};
// -------------------------------------------------------------------

class RangeF : public ::google::protobuf::Message {
 public:
  RangeF();
  virtual ~RangeF();

  RangeF(const RangeF& from);

  inline RangeF& operator=(const RangeF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeF& default_instance();

  void Swap(RangeF* other);

  // implements Message ----------------------------------------------

  RangeF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeF& from);
  void MergeFrom(const RangeF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float MinValue = 1;
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 1;
  inline float minvalue() const;
  inline void set_minvalue(float value);

  // required float MaxValue = 2;
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 2;
  inline float maxvalue() const;
  inline void set_maxvalue(float value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.RangeF)
 private:
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float minvalue_;
  float maxvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static RangeF* default_instance_;
};
// -------------------------------------------------------------------

class PointU : public ::google::protobuf::Message {
 public:
  PointU();
  virtual ~PointU();

  PointU(const PointU& from);

  inline PointU& operator=(const PointU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointU& default_instance();

  void Swap(PointU* other);

  // implements Message ----------------------------------------------

  PointU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointU& from);
  void MergeFrom(const PointU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.PointU)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static PointU* default_instance_;
};
// -------------------------------------------------------------------

class PointF : public ::google::protobuf::Message {
 public:
  PointF();
  virtual ~PointF();

  PointF(const PointF& from);

  inline PointF& operator=(const PointF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointF& default_instance();

  void Swap(PointF* other);

  // implements Message ----------------------------------------------

  PointF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointF& from);
  void MergeFrom(const PointF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.PointF)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static PointF* default_instance_;
};
// -------------------------------------------------------------------

class ScaleU : public ::google::protobuf::Message {
 public:
  ScaleU();
  virtual ~ScaleU();

  ScaleU(const ScaleU& from);

  inline ScaleU& operator=(const ScaleU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleU& default_instance();

  void Swap(ScaleU* other);

  // implements Message ----------------------------------------------

  ScaleU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleU& from);
  void MergeFrom(const ScaleU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ScaleU)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static ScaleU* default_instance_;
};
// -------------------------------------------------------------------

class ScaleF : public ::google::protobuf::Message {
 public:
  ScaleF();
  virtual ~ScaleF();

  ScaleF(const ScaleF& from);

  inline ScaleF& operator=(const ScaleF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleF& default_instance();

  void Swap(ScaleF* other);

  // implements Message ----------------------------------------------

  ScaleF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleF& from);
  void MergeFrom(const ScaleF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ScaleF)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static ScaleF* default_instance_;
};
// -------------------------------------------------------------------

class ColorF : public ::google::protobuf::Message {
 public:
  ColorF();
  virtual ~ColorF();

  ColorF(const ColorF& from);

  inline ColorF& operator=(const ColorF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorF& default_instance();

  void Swap(ColorF* other);

  // implements Message ----------------------------------------------

  ColorF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorF& from);
  void MergeFrom(const ColorF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float R = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline float r() const;
  inline void set_r(float value);

  // required float G = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline float g() const;
  inline void set_g(float value);

  // required float B = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline float b() const;
  inline void set_b(float value);

  // required float A = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline float a() const;
  inline void set_a(float value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ColorF)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float r_;
  float g_;
  float b_;
  float a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static ColorF* default_instance_;
};
// -------------------------------------------------------------------

class ColorU : public ::google::protobuf::Message {
 public:
  ColorU();
  virtual ~ColorU();

  ColorU(const ColorU& from);

  inline ColorU& operator=(const ColorU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorU& default_instance();

  void Swap(ColorU* other);

  // implements Message ----------------------------------------------

  ColorU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorU& from);
  void MergeFrom(const ColorU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 R = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // required uint32 G = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);

  // required uint32 B = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // required uint32 A = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::uint32 a() const;
  inline void set_a(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ColorU)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  ::google::protobuf::uint32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static ColorU* default_instance_;
};
// -------------------------------------------------------------------

class RectU : public ::google::protobuf::Message {
 public:
  RectU();
  virtual ~RectU();

  RectU(const RectU& from);

  inline RectU& operator=(const RectU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RectU& default_instance();

  void Swap(RectU* other);

  // implements Message ----------------------------------------------

  RectU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RectU& from);
  void MergeFrom(const RectU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.PointU Origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::Medusa::CoreProto::PointU& origin() const;
  inline ::Medusa::CoreProto::PointU* mutable_origin();
  inline ::Medusa::CoreProto::PointU* release_origin();
  inline void set_allocated_origin(::Medusa::CoreProto::PointU* origin);

  // required .Medusa.CoreProto.SizeU Size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::Medusa::CoreProto::SizeU& size() const;
  inline ::Medusa::CoreProto::SizeU* mutable_size();
  inline ::Medusa::CoreProto::SizeU* release_size();
  inline void set_allocated_size(::Medusa::CoreProto::SizeU* size);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.RectU)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Medusa::CoreProto::PointU* origin_;
  ::Medusa::CoreProto::SizeU* size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static RectU* default_instance_;
};
// -------------------------------------------------------------------

class RectF : public ::google::protobuf::Message {
 public:
  RectF();
  virtual ~RectF();

  RectF(const RectF& from);

  inline RectF& operator=(const RectF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RectF& default_instance();

  void Swap(RectF* other);

  // implements Message ----------------------------------------------

  RectF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RectF& from);
  void MergeFrom(const RectF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.PointF Origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::Medusa::CoreProto::PointF& origin() const;
  inline ::Medusa::CoreProto::PointF* mutable_origin();
  inline ::Medusa::CoreProto::PointF* release_origin();
  inline void set_allocated_origin(::Medusa::CoreProto::PointF* origin);

  // required .Medusa.CoreProto.SizeF Size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline const ::Medusa::CoreProto::SizeF& size() const;
  inline ::Medusa::CoreProto::SizeF* mutable_size();
  inline ::Medusa::CoreProto::SizeF* release_size();
  inline void set_allocated_size(::Medusa::CoreProto::SizeF* size);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.RectF)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Medusa::CoreProto::PointF* origin_;
  ::Medusa::CoreProto::SizeF* size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static RectF* default_instance_;
};
// -------------------------------------------------------------------

class BorderU : public ::google::protobuf::Message {
 public:
  BorderU();
  virtual ~BorderU();

  BorderU(const BorderU& from);

  inline BorderU& operator=(const BorderU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BorderU& default_instance();

  void Swap(BorderU* other);

  // implements Message ----------------------------------------------

  BorderU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BorderU& from);
  void MergeFrom(const BorderU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline ::google::protobuf::uint32 left() const;
  inline void set_left(::google::protobuf::uint32 value);

  // required uint32 Right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline ::google::protobuf::uint32 right() const;
  inline void set_right(::google::protobuf::uint32 value);

  // required uint32 Top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::uint32 top() const;
  inline void set_top(::google::protobuf::uint32 value);

  // required uint32 Bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline ::google::protobuf::uint32 bottom() const;
  inline void set_bottom(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.BorderU)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 left_;
  ::google::protobuf::uint32 right_;
  ::google::protobuf::uint32 top_;
  ::google::protobuf::uint32 bottom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Geometry_2eproto();
  friend void protobuf_AssignDesc_Geometry_2eproto();
  friend void protobuf_ShutdownFile_Geometry_2eproto();

  void InitAsDefaultInstance();
  static BorderU* default_instance_;
};
// ===================================================================


// ===================================================================

// SizeU

// required uint32 Width = 1;
inline bool SizeU::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeU::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizeU::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizeU::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 SizeU::width() const {
  return width_;
}
inline void SizeU::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 Height = 2;
inline bool SizeU::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizeU::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizeU::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizeU::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 SizeU::height() const {
  return height_;
}
inline void SizeU::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// SizeF

// required float Width = 1;
inline bool SizeF::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeF::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SizeF::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SizeF::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float SizeF::width() const {
  return width_;
}
inline void SizeF::set_width(float value) {
  set_has_width();
  width_ = value;
}

// required float Height = 2;
inline bool SizeF::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizeF::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SizeF::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SizeF::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float SizeF::height() const {
  return height_;
}
inline void SizeF::set_height(float value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// RangeU

// required uint32 MinValue = 1;
inline bool RangeU::has_minvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeU::set_has_minvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeU::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeU::clear_minvalue() {
  minvalue_ = 0u;
  clear_has_minvalue();
}
inline ::google::protobuf::uint32 RangeU::minvalue() const {
  return minvalue_;
}
inline void RangeU::set_minvalue(::google::protobuf::uint32 value) {
  set_has_minvalue();
  minvalue_ = value;
}

// required uint32 MaxValue = 2;
inline bool RangeU::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeU::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeU::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeU::clear_maxvalue() {
  maxvalue_ = 0u;
  clear_has_maxvalue();
}
inline ::google::protobuf::uint32 RangeU::maxvalue() const {
  return maxvalue_;
}
inline void RangeU::set_maxvalue(::google::protobuf::uint32 value) {
  set_has_maxvalue();
  maxvalue_ = value;
}

// -------------------------------------------------------------------

// RangeF

// required float MinValue = 1;
inline bool RangeF::has_minvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeF::set_has_minvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeF::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeF::clear_minvalue() {
  minvalue_ = 0;
  clear_has_minvalue();
}
inline float RangeF::minvalue() const {
  return minvalue_;
}
inline void RangeF::set_minvalue(float value) {
  set_has_minvalue();
  minvalue_ = value;
}

// required float MaxValue = 2;
inline bool RangeF::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeF::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeF::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeF::clear_maxvalue() {
  maxvalue_ = 0;
  clear_has_maxvalue();
}
inline float RangeF::maxvalue() const {
  return maxvalue_;
}
inline void RangeF::set_maxvalue(float value) {
  set_has_maxvalue();
  maxvalue_ = value;
}

// -------------------------------------------------------------------

// PointU

// required uint32 X = 1;
inline bool PointU::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointU::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointU::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointU::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 PointU::x() const {
  return x_;
}
inline void PointU::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 Y = 2;
inline bool PointU::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointU::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointU::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointU::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 PointU::y() const {
  return y_;
}
inline void PointU::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// PointF

// required float X = 1;
inline bool PointF::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointF::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointF::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointF::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PointF::x() const {
  return x_;
}
inline void PointF::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float Y = 2;
inline bool PointF::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointF::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointF::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointF::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PointF::y() const {
  return y_;
}
inline void PointF::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// ScaleU

// required uint32 X = 1;
inline bool ScaleU::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleU::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleU::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleU::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 ScaleU::x() const {
  return x_;
}
inline void ScaleU::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 Y = 2;
inline bool ScaleU::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleU::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleU::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleU::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 ScaleU::y() const {
  return y_;
}
inline void ScaleU::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// ScaleF

// required float X = 1;
inline bool ScaleF::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleF::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleF::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleF::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ScaleF::x() const {
  return x_;
}
inline void ScaleF::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float Y = 2;
inline bool ScaleF::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleF::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleF::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleF::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ScaleF::y() const {
  return y_;
}
inline void ScaleF::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// ColorF

// required float R = 1;
inline bool ColorF::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorF::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorF::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorF::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float ColorF::r() const {
  return r_;
}
inline void ColorF::set_r(float value) {
  set_has_r();
  r_ = value;
}

// required float G = 2;
inline bool ColorF::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorF::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorF::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorF::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float ColorF::g() const {
  return g_;
}
inline void ColorF::set_g(float value) {
  set_has_g();
  g_ = value;
}

// required float B = 3;
inline bool ColorF::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorF::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorF::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorF::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float ColorF::b() const {
  return b_;
}
inline void ColorF::set_b(float value) {
  set_has_b();
  b_ = value;
}

// required float A = 4;
inline bool ColorF::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColorF::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColorF::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColorF::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float ColorF::a() const {
  return a_;
}
inline void ColorF::set_a(float value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// ColorU

// required uint32 R = 1;
inline bool ColorU::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorU::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorU::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorU::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 ColorU::r() const {
  return r_;
}
inline void ColorU::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
}

// required uint32 G = 2;
inline bool ColorU::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorU::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorU::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorU::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 ColorU::g() const {
  return g_;
}
inline void ColorU::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
}

// required uint32 B = 3;
inline bool ColorU::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorU::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorU::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorU::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 ColorU::b() const {
  return b_;
}
inline void ColorU::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
}

// required uint32 A = 4;
inline bool ColorU::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColorU::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColorU::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColorU::clear_a() {
  a_ = 0u;
  clear_has_a();
}
inline ::google::protobuf::uint32 ColorU::a() const {
  return a_;
}
inline void ColorU::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// RectU

// required .Medusa.CoreProto.PointU Origin = 1;
inline bool RectU::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RectU::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RectU::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RectU::clear_origin() {
  if (origin_ != NULL) origin_->::Medusa::CoreProto::PointU::Clear();
  clear_has_origin();
}
inline const ::Medusa::CoreProto::PointU& RectU::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::Medusa::CoreProto::PointU* RectU::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::Medusa::CoreProto::PointU;
  return origin_;
}
inline ::Medusa::CoreProto::PointU* RectU::release_origin() {
  clear_has_origin();
  ::Medusa::CoreProto::PointU* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void RectU::set_allocated_origin(::Medusa::CoreProto::PointU* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// required .Medusa.CoreProto.SizeU Size = 2;
inline bool RectU::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RectU::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RectU::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RectU::clear_size() {
  if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
  clear_has_size();
}
inline const ::Medusa::CoreProto::SizeU& RectU::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::Medusa::CoreProto::SizeU* RectU::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::Medusa::CoreProto::SizeU;
  return size_;
}
inline ::Medusa::CoreProto::SizeU* RectU::release_size() {
  clear_has_size();
  ::Medusa::CoreProto::SizeU* temp = size_;
  size_ = NULL;
  return temp;
}
inline void RectU::set_allocated_size(::Medusa::CoreProto::SizeU* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// -------------------------------------------------------------------

// RectF

// required .Medusa.CoreProto.PointF Origin = 1;
inline bool RectF::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RectF::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RectF::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RectF::clear_origin() {
  if (origin_ != NULL) origin_->::Medusa::CoreProto::PointF::Clear();
  clear_has_origin();
}
inline const ::Medusa::CoreProto::PointF& RectF::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::Medusa::CoreProto::PointF* RectF::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::Medusa::CoreProto::PointF;
  return origin_;
}
inline ::Medusa::CoreProto::PointF* RectF::release_origin() {
  clear_has_origin();
  ::Medusa::CoreProto::PointF* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void RectF::set_allocated_origin(::Medusa::CoreProto::PointF* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// required .Medusa.CoreProto.SizeF Size = 2;
inline bool RectF::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RectF::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RectF::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RectF::clear_size() {
  if (size_ != NULL) size_->::Medusa::CoreProto::SizeF::Clear();
  clear_has_size();
}
inline const ::Medusa::CoreProto::SizeF& RectF::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::Medusa::CoreProto::SizeF* RectF::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::Medusa::CoreProto::SizeF;
  return size_;
}
inline ::Medusa::CoreProto::SizeF* RectF::release_size() {
  clear_has_size();
  ::Medusa::CoreProto::SizeF* temp = size_;
  size_ = NULL;
  return temp;
}
inline void RectF::set_allocated_size(::Medusa::CoreProto::SizeF* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// -------------------------------------------------------------------

// BorderU

// required uint32 Left = 1;
inline bool BorderU::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BorderU::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BorderU::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BorderU::clear_left() {
  left_ = 0u;
  clear_has_left();
}
inline ::google::protobuf::uint32 BorderU::left() const {
  return left_;
}
inline void BorderU::set_left(::google::protobuf::uint32 value) {
  set_has_left();
  left_ = value;
}

// required uint32 Right = 2;
inline bool BorderU::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BorderU::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BorderU::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BorderU::clear_right() {
  right_ = 0u;
  clear_has_right();
}
inline ::google::protobuf::uint32 BorderU::right() const {
  return right_;
}
inline void BorderU::set_right(::google::protobuf::uint32 value) {
  set_has_right();
  right_ = value;
}

// required uint32 Top = 3;
inline bool BorderU::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BorderU::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BorderU::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BorderU::clear_top() {
  top_ = 0u;
  clear_has_top();
}
inline ::google::protobuf::uint32 BorderU::top() const {
  return top_;
}
inline void BorderU::set_top(::google::protobuf::uint32 value) {
  set_has_top();
  top_ = value;
}

// required uint32 Bottom = 4;
inline bool BorderU::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BorderU::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BorderU::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BorderU::clear_bottom() {
  bottom_ = 0u;
  clear_has_bottom();
}
inline ::google::protobuf::uint32 BorderU::bottom() const {
  return bottom_;
}
inline void BorderU::set_bottom(::google::protobuf::uint32 value) {
  set_has_bottom();
  bottom_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Geometry_2eproto__INCLUDED

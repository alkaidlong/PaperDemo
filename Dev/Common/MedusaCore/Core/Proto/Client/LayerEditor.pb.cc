// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LayerEditor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LayerEditor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {
namespace Editor {

namespace {

const ::google::protobuf::Descriptor* ImageFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Button_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Button_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EditBox_EditBoxKeyboardReturnType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EditBox_EditBoxInputMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EditBox_EditBoxInputFlag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProgressBar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressBar_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProgressBar_ProgressBarType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Trigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ListBox_ScorllDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ListBox_VerticalOrder_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TextAlignmentType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LayerEditor_2eproto() {
  protobuf_AddDesc_LayerEditor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LayerEditor.proto");
  GOOGLE_CHECK(file != NULL);
  ImageFile_descriptor_ = file->message_type(0);
  static const int ImageFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFile, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFile, border_),
  };
  ImageFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageFile_descriptor_,
      ImageFile::default_instance_,
      ImageFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageFile));
  Image_descriptor_ = file->message_type(1);
  static const int Image_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, optionalimages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, isfilpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, isfilpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, parallax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, isloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, renderflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, clickeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, ishide_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Button_descriptor_ = file->message_type(2);
  static const int Button_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, isfilpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, isfilpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, normalimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, selectedimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, disabledimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, disabledselectedimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, ontouchbegan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, ontouchmoved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, ontouchend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onclick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, renderflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, clickeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, ishide_),
  };
  Button_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Button_descriptor_,
      Button::default_instance_,
      Button_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Button));
  Frame_descriptor_ = file->message_type(3);
  static const int Frame_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, isfilpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, isfilpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, parallax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, uservalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, userstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, renderflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, clickeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, ishide_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  Label_descriptor_ = file->message_type(4);
  static const int Label_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, fontname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, alignmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, strokesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, shadowoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, shadowcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, shadowblur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, ishide_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
  EditBox_descriptor_ = file->message_type(5);
  static const int EditBox_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, fontname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, backgroundimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, alignmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, keyboardreturntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, inputmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, inputflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, characternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, minlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, maxlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onchar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, ishide_),
  };
  EditBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditBox_descriptor_,
      EditBox::default_instance_,
      EditBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditBox));
  EditBox_EditBoxKeyboardReturnType_descriptor_ = EditBox_descriptor_->enum_type(0);
  EditBox_EditBoxInputMode_descriptor_ = EditBox_descriptor_->enum_type(1);
  EditBox_EditBoxInputFlag_descriptor_ = EditBox_descriptor_->enum_type(2);
  ProgressBar_descriptor_ = file->message_type(6);
  static const int ProgressBar_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, midpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, changerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, renderflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, ishide_),
  };
  ProgressBar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressBar_descriptor_,
      ProgressBar::default_instance_,
      ProgressBar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressBar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressBar));
  ProgressBar_ProgressBarType_descriptor_ = ProgressBar_descriptor_->enum_type(0);
  Trigger_descriptor_ = file->message_type(7);
  static const int Trigger_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, parallax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, ishide_),
  };
  Trigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trigger_descriptor_,
      Trigger::default_instance_,
      Trigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trigger));
  TriggerRef_descriptor_ = file->message_type(8);
  static const int TriggerRef_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, parallax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, ishide_),
  };
  TriggerRef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerRef_descriptor_,
      TriggerRef::default_instance_,
      TriggerRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerRef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerRef));
  LayerRef_descriptor_ = file->message_type(9);
  static const int LayerRef_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, isfilpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, isfilpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, parallax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, ishide_),
  };
  LayerRef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerRef_descriptor_,
      LayerRef::default_instance_,
      LayerRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerRef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerRef));
  ListBox_descriptor_ = file->message_type(10);
  static const int ListBox_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, itemfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, isproportionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, zorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, onevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, ishide_),
  };
  ListBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListBox_descriptor_,
      ListBox::default_instance_,
      ListBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListBox));
  ListBox_ScorllDirection_descriptor_ = ListBox_descriptor_->enum_type(0);
  ListBox_VerticalOrder_descriptor_ = ListBox_descriptor_->enum_type(1);
  Layer_descriptor_ = file->message_type(11);
  static const int Layer_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, buttons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, editboxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, progressbars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, triggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, triggerrefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, layerrefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, onload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, onshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, onhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, onclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, onupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, ontouchbegan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, ontouchmoved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, ontouchend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, scissorbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, tag_),
  };
  Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Layer));
  TextAlignmentType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LayerEditor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageFile_descriptor_, &ImageFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Button_descriptor_, &Button::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditBox_descriptor_, &EditBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressBar_descriptor_, &ProgressBar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trigger_descriptor_, &Trigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerRef_descriptor_, &TriggerRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerRef_descriptor_, &LayerRef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListBox_descriptor_, &ListBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Layer_descriptor_, &Layer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LayerEditor_2eproto() {
  delete ImageFile::default_instance_;
  delete ImageFile_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Button::default_instance_;
  delete Button_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete Label::default_instance_;
  delete Label_reflection_;
  delete EditBox::default_instance_;
  delete EditBox_reflection_;
  delete ProgressBar::default_instance_;
  delete ProgressBar_reflection_;
  delete Trigger::default_instance_;
  delete Trigger_reflection_;
  delete TriggerRef::default_instance_;
  delete TriggerRef_reflection_;
  delete LayerRef::default_instance_;
  delete LayerRef_reflection_;
  delete ListBox::default_instance_;
  delete ListBox_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
}

void protobuf_AddDesc_LayerEditor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_Geometry_2eproto();
  ::Medusa::CoreProto::protobuf_AddDesc_FileSystem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LayerEditor.proto\022\027Medusa.CoreProto.Ed"
    "itor\032\016Geometry.proto\032\020FileSystem.proto\"^"
    "\n\tImageFile\022&\n\004File\030\001 \002(\0132\030.Medusa.CoreP"
    "roto.FileId\022)\n\006Border\030\002 \001(\0132\031.Medusa.Cor"
    "eProto.BorderU\"\245\005\n\005Image\022\n\n\002ID\030\001 \002(\t\022:\n\016"
    "OptionalImages\030\002 \003(\0132\".Medusa.CoreProto."
    "Editor.ImageFile\022%\n\004Size\030\003 \002(\0132\027.Medusa."
    "CoreProto.SizeU\022*\n\010Position\030\004 \002(\0132\030.Medu"
    "sa.CoreProto.PointF\022\031\n\021IsProportionPoint"
    "\030\005 \002(\010\022(\n\006Anchor\030\006 \002(\0132\030.Medusa.CoreProt"
    "o.PointF\022\016\n\006ZOrder\030\007 \002(\005\022\020\n\010Rotation\030\010 \001"
    "(\002\022\'\n\005Scale\030\t \001(\0132\030.Medusa.CoreProto.Sca"
    "leF\022\017\n\007IsFilpX\030\n \001(\010\022\017\n\007IsFilpY\030\013 \001(\010\022\021\n"
    "\tIsVisible\030\014 \002(\010\022\020\n\010Parallax\030\r \002(\002\0220\n\004Fi"
    "le\030\016 \002(\0132\".Medusa.CoreProto.Editor.Image"
    "File\022\016\n\006OnLoad\030\017 \001(\t\022\016\n\006OnShow\030\020 \001(\t\022\016\n\006"
    "OnHide\030\021 \001(\t\022\020\n\010OnClosed\030\022 \001(\t\022\020\n\010OnUpda"
    "te\030\023 \001(\t\022\017\n\007OnEvent\030\024 \001(\t\022\016\n\006IsLoop\030\025 \001("
    "\010\022+\n\nScissorBox\030\026 \001(\0132\027.Medusa.CoreProto"
    ".RectF\022\022\n\nRenderFlag\0302 \001(\005\022\013\n\003Tag\0303 \001(\005\022"
    "\023\n\013ClickEffect\030e \001(\t\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n"
    "\006IsHide\030\312\001 \001(\010\"\331\006\n\006Button\022\n\n\002ID\030\001 \002(\t\022%\n"
    "\004Size\030\002 \002(\0132\027.Medusa.CoreProto.SizeU\022*\n\010"
    "Position\030\003 \002(\0132\030.Medusa.CoreProto.PointF"
    "\022\031\n\021IsProportionPoint\030\004 \002(\010\022(\n\006Anchor\030\005 "
    "\002(\0132\030.Medusa.CoreProto.PointF\022\016\n\006ZOrder\030"
    "\006 \002(\005\022\020\n\010Rotation\030\007 \001(\002\022\'\n\005Scale\030\010 \001(\0132\030"
    ".Medusa.CoreProto.ScaleF\022\017\n\007IsFilpX\030\t \001("
    "\010\022\017\n\007IsFilpY\030\n \001(\010\022\021\n\tIsVisible\030\013 \002(\010\0227\n"
    "\013NormalImage\030\014 \001(\0132\".Medusa.CoreProto.Ed"
    "itor.ImageFile\0229\n\rSelectedImage\030\r \001(\0132\"."
    "Medusa.CoreProto.Editor.ImageFile\0229\n\rDis"
    "abledImage\030\016 \001(\0132\".Medusa.CoreProto.Edit"
    "or.ImageFile\022A\n\025DisabledSelectedImage\030\017 "
    "\001(\0132\".Medusa.CoreProto.Editor.ImageFile\022"
    "\016\n\006OnLoad\030\020 \001(\t\022\016\n\006OnShow\030\021 \001(\t\022\016\n\006OnHid"
    "e\030\022 \001(\t\022\020\n\010OnClosed\030\023 \001(\t\022\020\n\010OnUpdate\030\024 "
    "\001(\t\022\024\n\014OnTouchBegan\030\025 \001(\t\022\024\n\014OnTouchMove"
    "d\030\026 \001(\t\022\022\n\nOnTouchEnd\030\027 \001(\t\022\017\n\007OnClick\030\030"
    " \001(\t\022\017\n\007OnEvent\030\031 \001(\t\022+\n\nScissorBox\030\032 \001("
    "\0132\027.Medusa.CoreProto.RectF\022\022\n\nRenderFlag"
    "\0302 \001(\005\022\013\n\003Tag\0303 \001(\005\022\023\n\013ClickEffect\030e \001(\t"
    "\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n\006IsHide\030\312\001 \001(\010\"\326\003\n\005F"
    "rame\022\n\n\002ID\030\001 \002(\t\022%\n\004Size\030\002 \002(\0132\027.Medusa."
    "CoreProto.SizeU\022*\n\010Position\030\003 \002(\0132\030.Medu"
    "sa.CoreProto.PointF\022\031\n\021IsProportionPoint"
    "\030\004 \002(\010\022(\n\006Anchor\030\005 \002(\0132\030.Medusa.CoreProt"
    "o.PointF\022\016\n\006ZOrder\030\006 \002(\005\022\020\n\010Rotation\030\007 \001"
    "(\002\022\'\n\005Scale\030\010 \001(\0132\030.Medusa.CoreProto.Sca"
    "leF\022\017\n\007IsFilpX\030\t \001(\010\022\017\n\007IsFilpY\030\n \001(\010\022\020\n"
    "\010Parallax\030\013 \001(\002\022\021\n\tUserValue\030\024 \001(\005\022\022\n\nUs"
    "erString\030\025 \001(\t\022+\n\nScissorBox\030\026 \001(\0132\027.Med"
    "usa.CoreProto.RectF\022\022\n\nRenderFlag\0302 \001(\005\022"
    "\013\n\003Tag\0303 \001(\005\022\023\n\013ClickEffect\030e \001(\t\022\017\n\006IsL"
    "ock\030\311\001 \001(\010\022\017\n\006IsHide\030\312\001 \001(\010\"\211\006\n\005Label\022\n\n"
    "\002ID\030\001 \002(\t\022%\n\004Size\030\002 \002(\0132\027.Medusa.CorePro"
    "to.SizeU\022*\n\010Position\030\003 \002(\0132\030.Medusa.Core"
    "Proto.PointF\022\031\n\021IsProportionPoint\030\004 \002(\010\022"
    "(\n\006Anchor\030\005 \002(\0132\030.Medusa.CoreProto.Point"
    "F\022\016\n\006ZOrder\030\006 \002(\005\022\020\n\010Rotation\030\007 \001(\002\022\'\n\005S"
    "cale\030\010 \001(\0132\030.Medusa.CoreProto.ScaleF\022\021\n\t"
    "IsVisible\030\t \002(\010\022*\n\010FontName\030\013 \002(\0132\030.Medu"
    "sa.CoreProto.FileId\022\020\n\010FontSize\030\014 \002(\r\022\014\n"
    "\004Text\030\r \002(\t\022\'\n\005Color\030\016 \001(\0132\030.Medusa.Core"
    "Proto.ColorF\022A\n\rAlignmentType\030\n \002(\0162*.Me"
    "dusa.CoreProto.Editor.TextAlignmentType\022"
    "\016\n\006OnLoad\030\017 \001(\t\022\016\n\006OnShow\030\020 \001(\t\022\016\n\006OnHid"
    "e\030\021 \001(\t\022\020\n\010OnClosed\030\022 \001(\t\022\020\n\010OnUpdate\030\023 "
    "\001(\t\022\017\n\007OnEvent\030\024 \001(\t\022+\n\nScissorBox\030\025 \001(\013"
    "2\027.Medusa.CoreProto.RectF\022\013\n\003Tag\0303 \001(\005\022\022"
    "\n\nStrokeSize\0304 \001(\002\022.\n\014ShadowOffset\0305 \001(\013"
    "2\030.Medusa.CoreProto.PointF\022-\n\013ShadowColo"
    "r\0306 \001(\0132\030.Medusa.CoreProto.ColorF\022\022\n\nSha"
    "dowBlur\0307 \001(\002\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n\006IsHide"
    "\030\312\001 \001(\010\"\262\n\n\007EditBox\022\n\n\002ID\030\001 \002(\t\022%\n\004Size\030"
    "\002 \002(\0132\027.Medusa.CoreProto.SizeU\022*\n\010Positi"
    "on\030\003 \002(\0132\030.Medusa.CoreProto.PointF\022\031\n\021Is"
    "ProportionPoint\030\004 \002(\010\022(\n\006Anchor\030\005 \002(\0132\030."
    "Medusa.CoreProto.PointF\022\016\n\006ZOrder\030\006 \002(\005\022"
    "\020\n\010Rotation\030\007 \001(\002\022\'\n\005Scale\030\010 \001(\0132\030.Medus"
    "a.CoreProto.ScaleF\022\021\n\tIsVisible\030\t \002(\010\022*\n"
    "\010FontName\030\n \002(\0132\030.Medusa.CoreProto.FileI"
    "d\022\020\n\010FontSize\030\013 \002(\r\022\014\n\004Text\030\014 \001(\t\022\'\n\005Col"
    "or\030\r \001(\0132\030.Medusa.CoreProto.ColorF\022;\n\017Ba"
    "ckgroundImage\030\016 \002(\0132\".Medusa.CoreProto.E"
    "ditor.ImageFile\022A\n\rAlignmentType\030\022 \002(\0162*"
    ".Medusa.CoreProto.Editor.TextAlignmentTy"
    "pe\022V\n\022KeyboardReturnType\030\023 \002(\0162:.Medusa."
    "CoreProto.Editor.EditBox.EditBoxKeyboard"
    "ReturnType\022D\n\tInputMode\030\024 \002(\01621.Medusa.C"
    "oreProto.Editor.EditBox.EditBoxInputMode"
    "\022D\n\tInputFlag\030\025 \002(\01621.Medusa.CoreProto.E"
    "ditor.EditBox.EditBoxInputFlag\022\024\n\014Charac"
    "terNum\030\031 \001(\r\022\022\n\nMinLineNum\030\032 \001(\t\022\022\n\nMaxL"
    "ineNum\030\033 \001(\t\022\016\n\006OnLoad\030\036 \001(\t\022\016\n\006OnShow\030\037"
    " \001(\t\022\016\n\006OnHide\030  \001(\t\022\020\n\010OnClosed\030! \001(\t\022\020"
    "\n\010OnUpdate\030\" \001(\t\022\016\n\006OnChar\030# \001(\t\022\017\n\007OnEv"
    "ent\030$ \001(\t\022+\n\nScissorBox\030% \001(\0132\027.Medusa.C"
    "oreProto.RectF\022\013\n\003Tag\0303 \001(\005\022\017\n\006IsLock\030\311\001"
    " \001(\010\022\017\n\006IsHide\030\312\001 \001(\010\"P\n\031EditBoxKeyboard"
    "ReturnType\022\013\n\007Default\020\000\022\010\n\004Done\020\001\022\010\n\004Sen"
    "d\020\002\022\n\n\006Search\020\003\022\006\n\002Go\020\004\"n\n\020EditBoxInputM"
    "ode\022\007\n\003Any\020\000\022\r\n\tEmailAddr\020\001\022\013\n\007Numeric\020\002"
    "\022\017\n\013PhoneNumber\020\003\022\007\n\003Url\020\004\022\013\n\007Decimal\020\005\022"
    "\016\n\nSingleLine\020\006\"{\n\020EditBoxInputFlag\022\014\n\010P"
    "assword\020\000\022\r\n\tSensitive\020\001\022\023\n\017InitialCapsW"
    "ord\020\002\022\027\n\023InitialCapsSentence\020\003\022\034\n\030Initia"
    "lCapsAllCharacters\020\004\"\357\005\n\013ProgressBar\022\n\n\002"
    "ID\030\001 \002(\t\022*\n\010Position\030\002 \002(\0132\030.Medusa.Core"
    "Proto.PointF\022\031\n\021IsProportionPoint\030\003 \002(\010\022"
    "(\n\006Anchor\030\004 \002(\0132\030.Medusa.CoreProto.Point"
    "F\022\016\n\006ZOrder\030\005 \002(\005\022\020\n\010Rotation\030\006 \001(\002\022\'\n\005S"
    "cale\030\007 \001(\0132\030.Medusa.CoreProto.ScaleF\022\021\n\t"
    "IsVisible\030\010 \002(\010\022%\n\004Size\030\t \002(\0132\027.Medusa.C"
    "oreProto.SizeU\0221\n\005Image\030\n \001(\0132\".Medusa.C"
    "oreProto.Editor.ImageFile\022\016\n\006OnLoad\030\014 \001("
    "\t\022\016\n\006OnShow\030\r \001(\t\022\016\n\006OnHide\030\016 \001(\t\022\020\n\010OnC"
    "losed\030\017 \001(\t\022\020\n\010OnUpdate\030\020 \001(\t\022\017\n\007OnEvent"
    "\030\021 \001(\t\022\020\n\010Duration\030\022 \002(\002\022B\n\004Type\030\023 \001(\01624"
    ".Medusa.CoreProto.Editor.ProgressBar.Pro"
    "gressBarType\022*\n\010Midpoint\030\024 \001(\0132\030.Medusa."
    "CoreProto.PointF\022,\n\nChangeRate\030\025 \001(\0132\030.M"
    "edusa.CoreProto.PointF\022+\n\nScissorBox\030\026 \001"
    "(\0132\027.Medusa.CoreProto.RectF\022\022\n\nRenderFla"
    "g\0302 \001(\005\022\013\n\003Tag\0303 \001(\005\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n"
    "\006IsHide\030\312\001 \001(\010\"&\n\017ProgressBarType\022\n\n\006Rad"
    "ial\020\000\022\007\n\003Bar\020\001\"\347\001\n\007Trigger\022\n\n\002ID\030\001 \002(\t\022\020"
    "\n\010OnUpdate\030\002 \001(\t\022\017\n\007OnEvent\030\003 \001(\t\022%\n\004Siz"
    "e\030\004 \001(\0132\027.Medusa.CoreProto.SizeU\022*\n\010Posi"
    "tion\030\005 \001(\0132\030.Medusa.CoreProto.PointF\022\031\n\021"
    "IsProportionPoint\030\006 \001(\010\022\020\n\010Parallax\030\007 \001("
    "\002\022\013\n\003Tag\0303 \001(\005\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n\006IsHid"
    "e\030\312\001 \001(\010\"\364\001\n\nTriggerRef\022\n\n\002ID\030\001 \002(\t\022+\n\tM"
    "odelName\030\002 \002(\0132\030.Medusa.CoreProto.FileId"
    "\022%\n\004Size\030\003 \001(\0132\027.Medusa.CoreProto.SizeU\022"
    "*\n\010Position\030\004 \001(\0132\030.Medusa.CoreProto.Poi"
    "ntF\022\031\n\021IsProportionPoint\030\005 \001(\010\022\020\n\010Parall"
    "ax\030\006 \001(\002\022\013\n\003Tag\0303 \001(\005\022\017\n\006IsLock\030\311\001 \001(\010\022\017"
    "\n\006IsHide\030\312\001 \001(\010\"\365\002\n\010LayerRef\022\n\n\002ID\030\001 \002(\t"
    "\022+\n\tModelName\030\002 \002(\0132\030.Medusa.CoreProto.F"
    "ileId\022*\n\010Position\030\003 \002(\0132\030.Medusa.CorePro"
    "to.PointF\022\031\n\021IsProportionPoint\030\004 \002(\010\022(\n\006"
    "Anchor\030\005 \002(\0132\030.Medusa.CoreProto.PointF\022\016"
    "\n\006ZOrder\030\006 \002(\005\022\020\n\010Rotation\030\007 \001(\002\022\'\n\005Scal"
    "e\030\010 \001(\0132\030.Medusa.CoreProto.ScaleF\022\017\n\007IsF"
    "ilpX\030\t \001(\010\022\017\n\007IsFilpY\030\n \001(\010\022\021\n\tIsVisible"
    "\030\013 \002(\010\022\020\n\010Parallax\030\014 \002(\002\022\013\n\003Tag\0303 \001(\005\022\017\n"
    "\006IsLock\030\311\001 \001(\010\022\017\n\006IsHide\030\312\001 \001(\010\"\200\006\n\007List"
    "Box\022\n\n\002ID\030\001 \002(\t\022,\n\nItemFileID\030\002 \002(\0132\030.Me"
    "dusa.CoreProto.FileId\022%\n\004Size\030\003 \002(\0132\027.Me"
    "dusa.CoreProto.SizeU\022*\n\010Position\030\004 \002(\0132\030"
    ".Medusa.CoreProto.PointF\022\031\n\021IsProportion"
    "Point\030\005 \002(\010\022(\n\006Anchor\030\006 \002(\0132\030.Medusa.Cor"
    "eProto.PointF\022\016\n\006ZOrder\030\007 \002(\005\022\020\n\010Rotatio"
    "n\030\010 \001(\002\022\'\n\005Scale\030\t \001(\0132\030.Medusa.CoreProt"
    "o.ScaleF\022\021\n\tIsVisible\030\014 \002(\010\022C\n\tDirection"
    "\030\r \002(\01620.Medusa.CoreProto.Editor.ListBox"
    ".ScorllDirection\022A\n\tOrderType\030\016 \001(\0162..Me"
    "dusa.CoreProto.Editor.ListBox.VerticalOr"
    "der\022\016\n\006OnLoad\030\017 \001(\t\022\016\n\006OnShow\030\020 \001(\t\022\016\n\006O"
    "nHide\030\021 \001(\t\022\020\n\010OnClosed\030\022 \001(\t\022\020\n\010OnUpdat"
    "e\030\023 \001(\t\022\017\n\007OnEvent\030\024 \001(\t\022+\n\nScissorBox\030\025"
    " \001(\0132\027.Medusa.CoreProto.RectF\022\013\n\003Tag\0303 \001"
    "(\005\022\017\n\006IsLock\030\311\001 \001(\010\022\017\n\006IsHide\030\312\001 \001(\010\"L\n\017"
    "ScorllDirection\022\021\n\004None\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nHo"
    "rizontal\020\000\022\014\n\010Vertical\020\001\022\010\n\004Both\020\002\".\n\rVe"
    "rticalOrder\022\r\n\tAscending\020\000\022\016\n\nDescending"
    "\020\001\"\217\006\n\005Layer\022\n\n\002ID\030\001 \002(\t\022%\n\004Size\030\002 \002(\0132\027"
    ".Medusa.CoreProto.SizeU\022.\n\006Images\030\003 \003(\0132"
    "\036.Medusa.CoreProto.Editor.Image\0220\n\007Butto"
    "ns\030\004 \003(\0132\037.Medusa.CoreProto.Editor.Butto"
    "n\022.\n\006Frames\030\005 \003(\0132\036.Medusa.CoreProto.Edi"
    "tor.Frame\022.\n\006Labels\030\006 \003(\0132\036.Medusa.CoreP"
    "roto.Editor.Label\0222\n\010EditBoxs\030\007 \003(\0132 .Me"
    "dusa.CoreProto.Editor.EditBox\022:\n\014Progres"
    "sBars\030\t \003(\0132$.Medusa.CoreProto.Editor.Pr"
    "ogressBar\0222\n\010Triggers\030\n \003(\0132 .Medusa.Cor"
    "eProto.Editor.Trigger\0228\n\013TriggerRefs\030\013 \003"
    "(\0132#.Medusa.CoreProto.Editor.TriggerRef\022"
    "4\n\tLayerRefs\030\014 \003(\0132!.Medusa.CoreProto.Ed"
    "itor.LayerRef\022\016\n\006OnLoad\030\r \001(\t\022\016\n\006OnShow\030"
    "\016 \001(\t\022\016\n\006OnHide\030\017 \001(\t\022\020\n\010OnClosed\030\020 \001(\t\022"
    "\020\n\010OnUpdate\030\021 \001(\t\022\024\n\014OnTouchBegan\030\022 \001(\t\022"
    "\024\n\014OnTouchMoved\030\023 \001(\t\022\022\n\nOnTouchEnd\030\024 \001("
    "\t\022/\n\005Lists\030\025 \003(\0132 .Medusa.CoreProto.Edit"
    "or.ListBox\022+\n\nScissorBox\030\026 \001(\0132\027.Medusa."
    "CoreProto.RectF\022\013\n\003Tag\0303 \001(\005*\243\001\n\021TextAli"
    "gnmentType\022\013\n\007LeftTop\020\001\022\r\n\tMiddleTop\020\002\022\014"
    "\n\010RightTop\020\003\022\016\n\nLeftCenter\020\004\022\020\n\014MiddleCe"
    "nter\020\005\022\017\n\013RightCenter\020\006\022\016\n\nLeftBottom\020\007\022"
    "\020\n\014MiddleBottom\020\010\022\017\n\013RightBottom\020\t", 7634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LayerEditor.proto", &protobuf_RegisterTypes);
  ImageFile::default_instance_ = new ImageFile();
  Image::default_instance_ = new Image();
  Button::default_instance_ = new Button();
  Frame::default_instance_ = new Frame();
  Label::default_instance_ = new Label();
  EditBox::default_instance_ = new EditBox();
  ProgressBar::default_instance_ = new ProgressBar();
  Trigger::default_instance_ = new Trigger();
  TriggerRef::default_instance_ = new TriggerRef();
  LayerRef::default_instance_ = new LayerRef();
  ListBox::default_instance_ = new ListBox();
  Layer::default_instance_ = new Layer();
  ImageFile::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Button::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  Label::default_instance_->InitAsDefaultInstance();
  EditBox::default_instance_->InitAsDefaultInstance();
  ProgressBar::default_instance_->InitAsDefaultInstance();
  Trigger::default_instance_->InitAsDefaultInstance();
  TriggerRef::default_instance_->InitAsDefaultInstance();
  LayerRef::default_instance_->InitAsDefaultInstance();
  ListBox::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LayerEditor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LayerEditor_2eproto {
  StaticDescriptorInitializer_LayerEditor_2eproto() {
    protobuf_AddDesc_LayerEditor_2eproto();
  }
} static_descriptor_initializer_LayerEditor_2eproto_;
const ::google::protobuf::EnumDescriptor* TextAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextAlignmentType_descriptor_;
}
bool TextAlignmentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ImageFile::kFileFieldNumber;
const int ImageFile::kBorderFieldNumber;
#endif  // !_MSC_VER

ImageFile::ImageFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageFile::InitAsDefaultInstance() {
  file_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  border_ = const_cast< ::Medusa::CoreProto::BorderU*>(&::Medusa::CoreProto::BorderU::default_instance());
}

ImageFile::ImageFile(const ImageFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageFile::SharedCtor() {
  _cached_size_ = 0;
  file_ = NULL;
  border_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageFile::~ImageFile() {
  SharedDtor();
}

void ImageFile::SharedDtor() {
  if (this != default_instance_) {
    delete file_;
    delete border_;
  }
}

void ImageFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFile_descriptor_;
}

const ImageFile& ImageFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

ImageFile* ImageFile::default_instance_ = NULL;

ImageFile* ImageFile::New() const {
  return new ImageFile;
}

void ImageFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != NULL) file_->::Medusa::CoreProto::FileId::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::Medusa::CoreProto::BorderU::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.FileId File = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Border;
        break;
      }

      // optional .Medusa.CoreProto.BorderU Border = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.FileId File = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(), output);
  }

  // optional .Medusa.CoreProto.BorderU Border = 2;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->border(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.FileId File = 1;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(), target);
  }

  // optional .Medusa.CoreProto.BorderU Border = 2;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.FileId File = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }

    // optional .Medusa.CoreProto.BorderU Border = 2;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageFile::MergeFrom(const ImageFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      mutable_file()->::Medusa::CoreProto::FileId::MergeFrom(from.file());
    }
    if (from.has_border()) {
      mutable_border()->::Medusa::CoreProto::BorderU::MergeFrom(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFile::CopyFrom(const ImageFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  return true;
}

void ImageFile::Swap(ImageFile* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageFile_descriptor_;
  metadata.reflection = ImageFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Image::kIDFieldNumber;
const int Image::kOptionalImagesFieldNumber;
const int Image::kSizeFieldNumber;
const int Image::kPositionFieldNumber;
const int Image::kIsProportionPointFieldNumber;
const int Image::kAnchorFieldNumber;
const int Image::kZOrderFieldNumber;
const int Image::kRotationFieldNumber;
const int Image::kScaleFieldNumber;
const int Image::kIsFilpXFieldNumber;
const int Image::kIsFilpYFieldNumber;
const int Image::kIsVisibleFieldNumber;
const int Image::kParallaxFieldNumber;
const int Image::kFileFieldNumber;
const int Image::kOnLoadFieldNumber;
const int Image::kOnShowFieldNumber;
const int Image::kOnHideFieldNumber;
const int Image::kOnClosedFieldNumber;
const int Image::kOnUpdateFieldNumber;
const int Image::kOnEventFieldNumber;
const int Image::kIsLoopFieldNumber;
const int Image::kScissorBoxFieldNumber;
const int Image::kRenderFlagFieldNumber;
const int Image::kTagFieldNumber;
const int Image::kClickEffectFieldNumber;
const int Image::kIsLockFieldNumber;
const int Image::kIsHideFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  file_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isfilpx_ = false;
  isfilpy_ = false;
  isvisible_ = false;
  parallax_ = 0;
  file_ = NULL;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isloop_ = false;
  scissorbox_ = NULL;
  renderflag_ = 0;
  tag_ = 0;
  clickeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete clickeffect_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete file_;
    delete scissorbox_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
    isfilpx_ = false;
    isfilpy_ = false;
    isvisible_ = false;
    parallax_ = 0;
    if (has_file()) {
      if (file_ != NULL) file_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    isloop_ = false;
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    renderflag_ = 0;
    tag_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_clickeffect()) {
      if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
        clickeffect_->clear();
      }
    }
    islock_ = false;
    ishide_ = false;
  }
  optionalimages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OptionalImages;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.ImageFile OptionalImages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OptionalImages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optionalimages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OptionalImages;
        if (input->ExpectTag(26)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsFilpX;
        break;
      }

      // optional bool IsFilpX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpx_)));
          set_has_isfilpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsFilpY;
        break;
      }

      // optional bool IsFilpY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpy_)));
          set_has_isfilpy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_Parallax;
        break;
      }

      // required float Parallax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Parallax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallax_)));
          set_has_parallax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_File;
        break;
      }

      // required .Medusa.CoreProto.Editor.ImageFile File = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_File:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_IsLoop;
        break;
      }

      // optional bool IsLoop = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLoop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isloop_)));
          set_has_isloop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_RenderFlag;
        break;
      }

      // optional int32 RenderFlag = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RenderFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderflag_)));
          set_has_renderflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_ClickEffect;
        break;
      }

      // optional string ClickEffect = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClickEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clickeffect().data(), this->clickeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated .Medusa.CoreProto.Editor.ImageFile OptionalImages = 2;
  for (int i = 0; i < this->optionalimages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->optionalimages(i), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // required bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 6;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->anchor(), output);
  }

  // required int32 ZOrder = 7;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zorder(), output);
  }

  // optional float Rotation = 8;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scale(), output);
  }

  // optional bool IsFilpX = 10;
  if (has_isfilpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isfilpx(), output);
  }

  // optional bool IsFilpY = 11;
  if (has_isfilpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isfilpy(), output);
  }

  // required bool IsVisible = 12;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isvisible(), output);
  }

  // required float Parallax = 13;
  if (has_parallax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->parallax(), output);
  }

  // required .Medusa.CoreProto.Editor.ImageFile File = 14;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->file(), output);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->onload(), output);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onshow(), output);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onhide(), output);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->onclosed(), output);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->onupdate(), output);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->onevent(), output);
  }

  // optional bool IsLoop = 21;
  if (has_isloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isloop(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->scissorbox(), output);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->renderflag(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->clickeffect(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .Medusa.CoreProto.Editor.ImageFile OptionalImages = 2;
  for (int i = 0; i < this->optionalimages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->optionalimages(i), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // required bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 6;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->anchor(), target);
  }

  // required int32 ZOrder = 7;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zorder(), target);
  }

  // optional float Rotation = 8;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 9;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scale(), target);
  }

  // optional bool IsFilpX = 10;
  if (has_isfilpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isfilpx(), target);
  }

  // optional bool IsFilpY = 11;
  if (has_isfilpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isfilpy(), target);
  }

  // required bool IsVisible = 12;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isvisible(), target);
  }

  // required float Parallax = 13;
  if (has_parallax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->parallax(), target);
  }

  // required .Medusa.CoreProto.Editor.ImageFile File = 14;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->file(), target);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->onload(), target);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onshow(), target);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onhide(), target);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->onclosed(), target);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->onupdate(), target);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->onevent(), target);
  }

  // optional bool IsLoop = 21;
  if (has_isloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isloop(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->scissorbox(), target);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->renderflag(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->clickeffect(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 5;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 6;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 7;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 8;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Medusa.CoreProto.ScaleF Scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional bool IsFilpX = 10;
    if (has_isfilpx()) {
      total_size += 1 + 1;
    }

    // optional bool IsFilpY = 11;
    if (has_isfilpy()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 12;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required float Parallax = 13;
    if (has_parallax()) {
      total_size += 1 + 4;
    }

    // required .Medusa.CoreProto.Editor.ImageFile File = 14;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }

    // optional string OnLoad = 15;
    if (has_onload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 16;
    if (has_onshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OnHide = 17;
    if (has_onhide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 18;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 19;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnEvent = 20;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional bool IsLoop = 21;
    if (has_isloop()) {
      total_size += 2 + 1;
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 22;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 RenderFlag = 50;
    if (has_renderflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderflag());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string ClickEffect = 101;
    if (has_clickeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickeffect());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Medusa.CoreProto.Editor.ImageFile OptionalImages = 2;
  total_size += 1 * this->optionalimages_size();
  for (int i = 0; i < this->optionalimages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optionalimages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  optionalimages_.MergeFrom(from.optionalimages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
    if (from.has_isfilpx()) {
      set_isfilpx(from.isfilpx());
    }
    if (from.has_isfilpy()) {
      set_isfilpy(from.isfilpy());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_parallax()) {
      set_parallax(from.parallax());
    }
    if (from.has_file()) {
      mutable_file()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.file());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_isloop()) {
      set_isloop(from.isloop());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_renderflag()) {
      set_renderflag(from.renderflag());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clickeffect()) {
      set_clickeffect(from.clickeffect());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000387d) != 0x0000387d) return false;

  for (int i = 0; i < optionalimages_size(); i++) {
    if (!this->optionalimages(i).IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    optionalimages_.Swap(&other->optionalimages_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isfilpx_, other->isfilpx_);
    std::swap(isfilpy_, other->isfilpy_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(parallax_, other->parallax_);
    std::swap(file_, other->file_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onevent_, other->onevent_);
    std::swap(isloop_, other->isloop_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(renderflag_, other->renderflag_);
    std::swap(tag_, other->tag_);
    std::swap(clickeffect_, other->clickeffect_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Button::kIDFieldNumber;
const int Button::kSizeFieldNumber;
const int Button::kPositionFieldNumber;
const int Button::kIsProportionPointFieldNumber;
const int Button::kAnchorFieldNumber;
const int Button::kZOrderFieldNumber;
const int Button::kRotationFieldNumber;
const int Button::kScaleFieldNumber;
const int Button::kIsFilpXFieldNumber;
const int Button::kIsFilpYFieldNumber;
const int Button::kIsVisibleFieldNumber;
const int Button::kNormalImageFieldNumber;
const int Button::kSelectedImageFieldNumber;
const int Button::kDisabledImageFieldNumber;
const int Button::kDisabledSelectedImageFieldNumber;
const int Button::kOnLoadFieldNumber;
const int Button::kOnShowFieldNumber;
const int Button::kOnHideFieldNumber;
const int Button::kOnClosedFieldNumber;
const int Button::kOnUpdateFieldNumber;
const int Button::kOnTouchBeganFieldNumber;
const int Button::kOnTouchMovedFieldNumber;
const int Button::kOnTouchEndFieldNumber;
const int Button::kOnClickFieldNumber;
const int Button::kOnEventFieldNumber;
const int Button::kScissorBoxFieldNumber;
const int Button::kRenderFlagFieldNumber;
const int Button::kTagFieldNumber;
const int Button::kClickEffectFieldNumber;
const int Button::kIsLockFieldNumber;
const int Button::kIsHideFieldNumber;
#endif  // !_MSC_VER

Button::Button()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Button::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  normalimage_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  selectedimage_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  disabledimage_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  disabledselectedimage_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

Button::Button(const Button& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Button::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isfilpx_ = false;
  isfilpy_ = false;
  isvisible_ = false;
  normalimage_ = NULL;
  selectedimage_ = NULL;
  disabledimage_ = NULL;
  disabledselectedimage_ = NULL;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchbegan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchmoved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  renderflag_ = 0;
  tag_ = 0;
  clickeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Button::~Button() {
  SharedDtor();
}

void Button::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (ontouchbegan_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchbegan_;
  }
  if (ontouchmoved_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchmoved_;
  }
  if (ontouchend_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchend_;
  }
  if (onclick_ != &::google::protobuf::internal::kEmptyString) {
    delete onclick_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete clickeffect_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete normalimage_;
    delete selectedimage_;
    delete disabledimage_;
    delete disabledselectedimage_;
    delete scissorbox_;
  }
}

void Button::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Button::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Button_descriptor_;
}

const Button& Button::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Button* Button::default_instance_ = NULL;

Button* Button::New() const {
  return new Button;
}

void Button::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isfilpx_ = false;
    isfilpy_ = false;
    isvisible_ = false;
    if (has_normalimage()) {
      if (normalimage_ != NULL) normalimage_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_selectedimage()) {
      if (selectedimage_ != NULL) selectedimage_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_disabledimage()) {
      if (disabledimage_ != NULL) disabledimage_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_disabledselectedimage()) {
      if (disabledselectedimage_ != NULL) disabledselectedimage_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_ontouchbegan()) {
      if (ontouchbegan_ != &::google::protobuf::internal::kEmptyString) {
        ontouchbegan_->clear();
      }
    }
    if (has_ontouchmoved()) {
      if (ontouchmoved_ != &::google::protobuf::internal::kEmptyString) {
        ontouchmoved_->clear();
      }
    }
    if (has_ontouchend()) {
      if (ontouchend_ != &::google::protobuf::internal::kEmptyString) {
        ontouchend_->clear();
      }
    }
    if (has_onclick()) {
      if (onclick_ != &::google::protobuf::internal::kEmptyString) {
        onclick_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    renderflag_ = 0;
    tag_ = 0;
    if (has_clickeffect()) {
      if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
        clickeffect_->clear();
      }
    }
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsFilpX;
        break;
      }

      // optional bool IsFilpX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpx_)));
          set_has_isfilpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsFilpY;
        break;
      }

      // optional bool IsFilpY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpy_)));
          set_has_isfilpy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_NormalImage;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ImageFile NormalImage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NormalImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_SelectedImage;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ImageFile SelectedImage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectedImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectedimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_DisabledImage;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ImageFile DisabledImage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DisabledImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabledimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_DisabledSelectedImage;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ImageFile DisabledSelectedImage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DisabledSelectedImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabledselectedimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_OnTouchBegan;
        break;
      }

      // optional string OnTouchBegan = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchBegan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchbegan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchbegan().data(), this->ontouchbegan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_OnTouchMoved;
        break;
      }

      // optional string OnTouchMoved = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchMoved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchmoved()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchmoved().data(), this->ontouchmoved().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_OnTouchEnd;
        break;
      }

      // optional string OnTouchEnd = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchend().data(), this->ontouchend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_OnClick;
        break;
      }

      // optional string OnClick = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclick().data(), this->onclick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_RenderFlag;
        break;
      }

      // optional int32 RenderFlag = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RenderFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderflag_)));
          set_has_renderflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_ClickEffect;
        break;
      }

      // optional string ClickEffect = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClickEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clickeffect().data(), this->clickeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor(), output);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zorder(), output);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scale(), output);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isfilpx(), output);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isfilpy(), output);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isvisible(), output);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile NormalImage = 12;
  if (has_normalimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->normalimage(), output);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile SelectedImage = 13;
  if (has_selectedimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->selectedimage(), output);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile DisabledImage = 14;
  if (has_disabledimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->disabledimage(), output);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile DisabledSelectedImage = 15;
  if (has_disabledselectedimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->disabledselectedimage(), output);
  }

  // optional string OnLoad = 16;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onload(), output);
  }

  // optional string OnShow = 17;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onshow(), output);
  }

  // optional string OnHide = 18;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->onhide(), output);
  }

  // optional string OnClosed = 19;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->onclosed(), output);
  }

  // optional string OnUpdate = 20;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->onupdate(), output);
  }

  // optional string OnTouchBegan = 21;
  if (has_ontouchbegan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchbegan().data(), this->ontouchbegan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ontouchbegan(), output);
  }

  // optional string OnTouchMoved = 22;
  if (has_ontouchmoved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchmoved().data(), this->ontouchmoved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->ontouchmoved(), output);
  }

  // optional string OnTouchEnd = 23;
  if (has_ontouchend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchend().data(), this->ontouchend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->ontouchend(), output);
  }

  // optional string OnClick = 24;
  if (has_onclick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclick().data(), this->onclick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->onclick(), output);
  }

  // optional string OnEvent = 25;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->onevent(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 26;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->scissorbox(), output);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->renderflag(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->clickeffect(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Button::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor(), target);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zorder(), target);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scale(), target);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isfilpx(), target);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isfilpy(), target);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isvisible(), target);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile NormalImage = 12;
  if (has_normalimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->normalimage(), target);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile SelectedImage = 13;
  if (has_selectedimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->selectedimage(), target);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile DisabledImage = 14;
  if (has_disabledimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->disabledimage(), target);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile DisabledSelectedImage = 15;
  if (has_disabledselectedimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->disabledselectedimage(), target);
  }

  // optional string OnLoad = 16;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onload(), target);
  }

  // optional string OnShow = 17;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onshow(), target);
  }

  // optional string OnHide = 18;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->onhide(), target);
  }

  // optional string OnClosed = 19;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->onclosed(), target);
  }

  // optional string OnUpdate = 20;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->onupdate(), target);
  }

  // optional string OnTouchBegan = 21;
  if (has_ontouchbegan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchbegan().data(), this->ontouchbegan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ontouchbegan(), target);
  }

  // optional string OnTouchMoved = 22;
  if (has_ontouchmoved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchmoved().data(), this->ontouchmoved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->ontouchmoved(), target);
  }

  // optional string OnTouchEnd = 23;
  if (has_ontouchend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchend().data(), this->ontouchend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->ontouchend(), target);
  }

  // optional string OnClick = 24;
  if (has_onclick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclick().data(), this->onclick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->onclick(), target);
  }

  // optional string OnEvent = 25;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->onevent(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 26;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->scissorbox(), target);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->renderflag(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->clickeffect(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Button::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 4;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 5;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 6;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsFilpX = 9;
    if (has_isfilpx()) {
      total_size += 1 + 1;
    }

    // optional bool IsFilpY = 10;
    if (has_isfilpy()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 11;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // optional .Medusa.CoreProto.Editor.ImageFile NormalImage = 12;
    if (has_normalimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normalimage());
    }

    // optional .Medusa.CoreProto.Editor.ImageFile SelectedImage = 13;
    if (has_selectedimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectedimage());
    }

    // optional .Medusa.CoreProto.Editor.ImageFile DisabledImage = 14;
    if (has_disabledimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disabledimage());
    }

    // optional .Medusa.CoreProto.Editor.ImageFile DisabledSelectedImage = 15;
    if (has_disabledselectedimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disabledselectedimage());
    }

    // optional string OnLoad = 16;
    if (has_onload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OnShow = 17;
    if (has_onshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

    // optional string OnHide = 18;
    if (has_onhide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 19;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 20;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnTouchBegan = 21;
    if (has_ontouchbegan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchbegan());
    }

    // optional string OnTouchMoved = 22;
    if (has_ontouchmoved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchmoved());
    }

    // optional string OnTouchEnd = 23;
    if (has_ontouchend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchend());
    }

    // optional string OnClick = 24;
    if (has_onclick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclick());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string OnEvent = 25;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 26;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 RenderFlag = 50;
    if (has_renderflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderflag());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional string ClickEffect = 101;
    if (has_clickeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickeffect());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Button::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Button* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Button*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Button::MergeFrom(const Button& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfilpx()) {
      set_isfilpx(from.isfilpx());
    }
    if (from.has_isfilpy()) {
      set_isfilpy(from.isfilpy());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_normalimage()) {
      mutable_normalimage()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.normalimage());
    }
    if (from.has_selectedimage()) {
      mutable_selectedimage()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.selectedimage());
    }
    if (from.has_disabledimage()) {
      mutable_disabledimage()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.disabledimage());
    }
    if (from.has_disabledselectedimage()) {
      mutable_disabledselectedimage()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.disabledselectedimage());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_ontouchbegan()) {
      set_ontouchbegan(from.ontouchbegan());
    }
    if (from.has_ontouchmoved()) {
      set_ontouchmoved(from.ontouchmoved());
    }
    if (from.has_ontouchend()) {
      set_ontouchend(from.ontouchend());
    }
    if (from.has_onclick()) {
      set_onclick(from.onclick());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_renderflag()) {
      set_renderflag(from.renderflag());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_clickeffect()) {
      set_clickeffect(from.clickeffect());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Button::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Button::CopyFrom(const Button& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000043f) != 0x0000043f) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_normalimage()) {
    if (!this->normalimage().IsInitialized()) return false;
  }
  if (has_selectedimage()) {
    if (!this->selectedimage().IsInitialized()) return false;
  }
  if (has_disabledimage()) {
    if (!this->disabledimage().IsInitialized()) return false;
  }
  if (has_disabledselectedimage()) {
    if (!this->disabledselectedimage().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void Button::Swap(Button* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isfilpx_, other->isfilpx_);
    std::swap(isfilpy_, other->isfilpy_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(normalimage_, other->normalimage_);
    std::swap(selectedimage_, other->selectedimage_);
    std::swap(disabledimage_, other->disabledimage_);
    std::swap(disabledselectedimage_, other->disabledselectedimage_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(ontouchbegan_, other->ontouchbegan_);
    std::swap(ontouchmoved_, other->ontouchmoved_);
    std::swap(ontouchend_, other->ontouchend_);
    std::swap(onclick_, other->onclick_);
    std::swap(onevent_, other->onevent_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(renderflag_, other->renderflag_);
    std::swap(tag_, other->tag_);
    std::swap(clickeffect_, other->clickeffect_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Button::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Button_descriptor_;
  metadata.reflection = Button_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kIDFieldNumber;
const int Frame::kSizeFieldNumber;
const int Frame::kPositionFieldNumber;
const int Frame::kIsProportionPointFieldNumber;
const int Frame::kAnchorFieldNumber;
const int Frame::kZOrderFieldNumber;
const int Frame::kRotationFieldNumber;
const int Frame::kScaleFieldNumber;
const int Frame::kIsFilpXFieldNumber;
const int Frame::kIsFilpYFieldNumber;
const int Frame::kParallaxFieldNumber;
const int Frame::kUserValueFieldNumber;
const int Frame::kUserStringFieldNumber;
const int Frame::kScissorBoxFieldNumber;
const int Frame::kRenderFlagFieldNumber;
const int Frame::kTagFieldNumber;
const int Frame::kClickEffectFieldNumber;
const int Frame::kIsLockFieldNumber;
const int Frame::kIsHideFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Frame::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isfilpx_ = false;
  isfilpy_ = false;
  parallax_ = 0;
  uservalue_ = 0;
  userstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  renderflag_ = 0;
  tag_ = 0;
  clickeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  SharedDtor();
}

void Frame::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (userstring_ != &::google::protobuf::internal::kEmptyString) {
    delete userstring_;
  }
  if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete clickeffect_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete scissorbox_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isfilpx_ = false;
    isfilpy_ = false;
    parallax_ = 0;
    uservalue_ = 0;
    if (has_userstring()) {
      if (userstring_ != &::google::protobuf::internal::kEmptyString) {
        userstring_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    renderflag_ = 0;
    tag_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_clickeffect()) {
      if (clickeffect_ != &::google::protobuf::internal::kEmptyString) {
        clickeffect_->clear();
      }
    }
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsFilpX;
        break;
      }

      // optional bool IsFilpX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpx_)));
          set_has_isfilpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsFilpY;
        break;
      }

      // optional bool IsFilpY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpy_)));
          set_has_isfilpy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Parallax;
        break;
      }

      // optional float Parallax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Parallax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallax_)));
          set_has_parallax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_UserValue;
        break;
      }

      // optional int32 UserValue = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uservalue_)));
          set_has_uservalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_UserString;
        break;
      }

      // optional string UserString = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userstring().data(), this->userstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_RenderFlag;
        break;
      }

      // optional int32 RenderFlag = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RenderFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderflag_)));
          set_has_renderflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_ClickEffect;
        break;
      }

      // optional string ClickEffect = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClickEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clickeffect().data(), this->clickeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor(), output);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zorder(), output);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scale(), output);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isfilpx(), output);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isfilpy(), output);
  }

  // optional float Parallax = 11;
  if (has_parallax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->parallax(), output);
  }

  // optional int32 UserValue = 20;
  if (has_uservalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->uservalue(), output);
  }

  // optional string UserString = 21;
  if (has_userstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userstring().data(), this->userstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->userstring(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->scissorbox(), output);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->renderflag(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->clickeffect(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor(), target);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zorder(), target);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scale(), target);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isfilpx(), target);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isfilpy(), target);
  }

  // optional float Parallax = 11;
  if (has_parallax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->parallax(), target);
  }

  // optional int32 UserValue = 20;
  if (has_uservalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->uservalue(), target);
  }

  // optional string UserString = 21;
  if (has_userstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userstring().data(), this->userstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->userstring(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->scissorbox(), target);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->renderflag(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional string ClickEffect = 101;
  if (has_clickeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clickeffect().data(), this->clickeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->clickeffect(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 4;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 5;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 6;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsFilpX = 9;
    if (has_isfilpx()) {
      total_size += 1 + 1;
    }

    // optional bool IsFilpY = 10;
    if (has_isfilpy()) {
      total_size += 1 + 1;
    }

    // optional float Parallax = 11;
    if (has_parallax()) {
      total_size += 1 + 4;
    }

    // optional int32 UserValue = 20;
    if (has_uservalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uservalue());
    }

    // optional string UserString = 21;
    if (has_userstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userstring());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 22;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 RenderFlag = 50;
    if (has_renderflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderflag());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string ClickEffect = 101;
    if (has_clickeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clickeffect());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfilpx()) {
      set_isfilpx(from.isfilpx());
    }
    if (from.has_isfilpy()) {
      set_isfilpy(from.isfilpy());
    }
    if (from.has_parallax()) {
      set_parallax(from.parallax());
    }
    if (from.has_uservalue()) {
      set_uservalue(from.uservalue());
    }
    if (from.has_userstring()) {
      set_userstring(from.userstring());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_renderflag()) {
      set_renderflag(from.renderflag());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_clickeffect()) {
      set_clickeffect(from.clickeffect());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isfilpx_, other->isfilpx_);
    std::swap(isfilpy_, other->isfilpy_);
    std::swap(parallax_, other->parallax_);
    std::swap(uservalue_, other->uservalue_);
    std::swap(userstring_, other->userstring_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(renderflag_, other->renderflag_);
    std::swap(tag_, other->tag_);
    std::swap(clickeffect_, other->clickeffect_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Label::kIDFieldNumber;
const int Label::kSizeFieldNumber;
const int Label::kPositionFieldNumber;
const int Label::kIsProportionPointFieldNumber;
const int Label::kAnchorFieldNumber;
const int Label::kZOrderFieldNumber;
const int Label::kRotationFieldNumber;
const int Label::kScaleFieldNumber;
const int Label::kIsVisibleFieldNumber;
const int Label::kFontNameFieldNumber;
const int Label::kFontSizeFieldNumber;
const int Label::kTextFieldNumber;
const int Label::kColorFieldNumber;
const int Label::kAlignmentTypeFieldNumber;
const int Label::kOnLoadFieldNumber;
const int Label::kOnShowFieldNumber;
const int Label::kOnHideFieldNumber;
const int Label::kOnClosedFieldNumber;
const int Label::kOnUpdateFieldNumber;
const int Label::kOnEventFieldNumber;
const int Label::kScissorBoxFieldNumber;
const int Label::kTagFieldNumber;
const int Label::kStrokeSizeFieldNumber;
const int Label::kShadowOffsetFieldNumber;
const int Label::kShadowColorFieldNumber;
const int Label::kShadowBlurFieldNumber;
const int Label::kIsLockFieldNumber;
const int Label::kIsHideFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  fontname_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  color_ = const_cast< ::Medusa::CoreProto::ColorF*>(&::Medusa::CoreProto::ColorF::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
  shadowoffset_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  shadowcolor_ = const_cast< ::Medusa::CoreProto::ColorF*>(&::Medusa::CoreProto::ColorF::default_instance());
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isvisible_ = false;
  fontname_ = NULL;
  fontsize_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = NULL;
  alignmenttype_ = 1;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  tag_ = 0;
  strokesize_ = 0;
  shadowoffset_ = NULL;
  shadowcolor_ = NULL;
  shadowblur_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete fontname_;
    delete color_;
    delete scissorbox_;
    delete shadowoffset_;
    delete shadowcolor_;
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isvisible_ = false;
    if (has_fontname()) {
      if (fontname_ != NULL) fontname_->::Medusa::CoreProto::FileId::Clear();
    }
    fontsize_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_color()) {
      if (color_ != NULL) color_->::Medusa::CoreProto::ColorF::Clear();
    }
    alignmenttype_ = 1;
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    tag_ = 0;
    strokesize_ = 0;
    if (has_shadowoffset()) {
      if (shadowoffset_ != NULL) shadowoffset_->::Medusa::CoreProto::PointF::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_shadowcolor()) {
      if (shadowcolor_ != NULL) shadowcolor_->::Medusa::CoreProto::ColorF::Clear();
    }
    shadowblur_ = 0;
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AlignmentType;
        break;
      }

      // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AlignmentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::TextAlignmentType_IsValid(value)) {
            set_alignmenttype(static_cast< ::Medusa::CoreProto::Editor::TextAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_FontName;
        break;
      }

      // required .Medusa.CoreProto.FileId FontName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FontSize;
        break;
      }

      // required uint32 FontSize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Text;
        break;
      }

      // required string Text = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Color;
        break;
      }

      // optional .Medusa.CoreProto.ColorF Color = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(421)) goto parse_StrokeSize;
        break;
      }

      // optional float StrokeSize = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StrokeSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strokesize_)));
          set_has_strokesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_ShadowOffset;
        break;
      }

      // optional .Medusa.CoreProto.PointF ShadowOffset = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShadowOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_ShadowColor;
        break;
      }

      // optional .Medusa.CoreProto.ColorF ShadowColor = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShadowColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_ShadowBlur;
        break;
      }

      // optional float ShadowBlur = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ShadowBlur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowblur_)));
          set_has_shadowblur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor(), output);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zorder(), output);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scale(), output);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isvisible(), output);
  }

  // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 10;
  if (has_alignmenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->alignmenttype(), output);
  }

  // required .Medusa.CoreProto.FileId FontName = 11;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fontname(), output);
  }

  // required uint32 FontSize = 12;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->fontsize(), output);
  }

  // required string Text = 13;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->text(), output);
  }

  // optional .Medusa.CoreProto.ColorF Color = 14;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->color(), output);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->onload(), output);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onshow(), output);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onhide(), output);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->onclosed(), output);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->onupdate(), output);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->onevent(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 21;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->scissorbox(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional float StrokeSize = 52;
  if (has_strokesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->strokesize(), output);
  }

  // optional .Medusa.CoreProto.PointF ShadowOffset = 53;
  if (has_shadowoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->shadowoffset(), output);
  }

  // optional .Medusa.CoreProto.ColorF ShadowColor = 54;
  if (has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->shadowcolor(), output);
  }

  // optional float ShadowBlur = 55;
  if (has_shadowblur()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->shadowblur(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor(), target);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zorder(), target);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scale(), target);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isvisible(), target);
  }

  // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 10;
  if (has_alignmenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->alignmenttype(), target);
  }

  // required .Medusa.CoreProto.FileId FontName = 11;
  if (has_fontname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fontname(), target);
  }

  // required uint32 FontSize = 12;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->fontsize(), target);
  }

  // required string Text = 13;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->text(), target);
  }

  // optional .Medusa.CoreProto.ColorF Color = 14;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->color(), target);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->onload(), target);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onshow(), target);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onhide(), target);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->onclosed(), target);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->onupdate(), target);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->onevent(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 21;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->scissorbox(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional float StrokeSize = 52;
  if (has_strokesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->strokesize(), target);
  }

  // optional .Medusa.CoreProto.PointF ShadowOffset = 53;
  if (has_shadowoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->shadowoffset(), target);
  }

  // optional .Medusa.CoreProto.ColorF ShadowColor = 54;
  if (has_shadowcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->shadowcolor(), target);
  }

  // optional float ShadowBlur = 55;
  if (has_shadowblur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->shadowblur(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 4;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 5;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 6;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsVisible = 9;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.FileId FontName = 11;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontname());
    }

    // required uint32 FontSize = 12;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

    // required string Text = 13;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Medusa.CoreProto.ColorF Color = 14;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 10;
    if (has_alignmenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alignmenttype());
    }

    // optional string OnLoad = 15;
    if (has_onload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 16;
    if (has_onshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OnHide = 17;
    if (has_onhide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 18;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 19;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnEvent = 20;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 21;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional float StrokeSize = 52;
    if (has_strokesize()) {
      total_size += 2 + 4;
    }

    // optional .Medusa.CoreProto.PointF ShadowOffset = 53;
    if (has_shadowoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadowoffset());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Medusa.CoreProto.ColorF ShadowColor = 54;
    if (has_shadowcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadowcolor());
    }

    // optional float ShadowBlur = 55;
    if (has_shadowblur()) {
      total_size += 2 + 4;
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_fontname()) {
      mutable_fontname()->::Medusa::CoreProto::FileId::MergeFrom(from.fontname());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_color()) {
      mutable_color()->::Medusa::CoreProto::ColorF::MergeFrom(from.color());
    }
    if (from.has_alignmenttype()) {
      set_alignmenttype(from.alignmenttype());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_strokesize()) {
      set_strokesize(from.strokesize());
    }
    if (from.has_shadowoffset()) {
      mutable_shadowoffset()->::Medusa::CoreProto::PointF::MergeFrom(from.shadowoffset());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shadowcolor()) {
      mutable_shadowcolor()->::Medusa::CoreProto::ColorF::MergeFrom(from.shadowcolor());
    }
    if (from.has_shadowblur()) {
      set_shadowblur(from.shadowblur());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002f3f) != 0x00002f3f) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_fontname()) {
    if (!this->fontname().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  if (has_shadowoffset()) {
    if (!this->shadowoffset().IsInitialized()) return false;
  }
  if (has_shadowcolor()) {
    if (!this->shadowcolor().IsInitialized()) return false;
  }
  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(text_, other->text_);
    std::swap(color_, other->color_);
    std::swap(alignmenttype_, other->alignmenttype_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onevent_, other->onevent_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(tag_, other->tag_);
    std::swap(strokesize_, other->strokesize_);
    std::swap(shadowoffset_, other->shadowoffset_);
    std::swap(shadowcolor_, other->shadowcolor_);
    std::swap(shadowblur_, other->shadowblur_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EditBox_EditBoxKeyboardReturnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditBox_EditBoxKeyboardReturnType_descriptor_;
}
bool EditBox_EditBoxKeyboardReturnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EditBox_EditBoxKeyboardReturnType EditBox::Default;
const EditBox_EditBoxKeyboardReturnType EditBox::Done;
const EditBox_EditBoxKeyboardReturnType EditBox::Send;
const EditBox_EditBoxKeyboardReturnType EditBox::Search;
const EditBox_EditBoxKeyboardReturnType EditBox::Go;
const EditBox_EditBoxKeyboardReturnType EditBox::EditBoxKeyboardReturnType_MIN;
const EditBox_EditBoxKeyboardReturnType EditBox::EditBoxKeyboardReturnType_MAX;
const int EditBox::EditBoxKeyboardReturnType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EditBox_EditBoxInputMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditBox_EditBoxInputMode_descriptor_;
}
bool EditBox_EditBoxInputMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EditBox_EditBoxInputMode EditBox::Any;
const EditBox_EditBoxInputMode EditBox::EmailAddr;
const EditBox_EditBoxInputMode EditBox::Numeric;
const EditBox_EditBoxInputMode EditBox::PhoneNumber;
const EditBox_EditBoxInputMode EditBox::Url;
const EditBox_EditBoxInputMode EditBox::Decimal;
const EditBox_EditBoxInputMode EditBox::SingleLine;
const EditBox_EditBoxInputMode EditBox::EditBoxInputMode_MIN;
const EditBox_EditBoxInputMode EditBox::EditBoxInputMode_MAX;
const int EditBox::EditBoxInputMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EditBox_EditBoxInputFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditBox_EditBoxInputFlag_descriptor_;
}
bool EditBox_EditBoxInputFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EditBox_EditBoxInputFlag EditBox::Password;
const EditBox_EditBoxInputFlag EditBox::Sensitive;
const EditBox_EditBoxInputFlag EditBox::InitialCapsWord;
const EditBox_EditBoxInputFlag EditBox::InitialCapsSentence;
const EditBox_EditBoxInputFlag EditBox::InitialCapsAllCharacters;
const EditBox_EditBoxInputFlag EditBox::EditBoxInputFlag_MIN;
const EditBox_EditBoxInputFlag EditBox::EditBoxInputFlag_MAX;
const int EditBox::EditBoxInputFlag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EditBox::kIDFieldNumber;
const int EditBox::kSizeFieldNumber;
const int EditBox::kPositionFieldNumber;
const int EditBox::kIsProportionPointFieldNumber;
const int EditBox::kAnchorFieldNumber;
const int EditBox::kZOrderFieldNumber;
const int EditBox::kRotationFieldNumber;
const int EditBox::kScaleFieldNumber;
const int EditBox::kIsVisibleFieldNumber;
const int EditBox::kFontNameFieldNumber;
const int EditBox::kFontSizeFieldNumber;
const int EditBox::kTextFieldNumber;
const int EditBox::kColorFieldNumber;
const int EditBox::kBackgroundImageFieldNumber;
const int EditBox::kAlignmentTypeFieldNumber;
const int EditBox::kKeyboardReturnTypeFieldNumber;
const int EditBox::kInputModeFieldNumber;
const int EditBox::kInputFlagFieldNumber;
const int EditBox::kCharacterNumFieldNumber;
const int EditBox::kMinLineNumFieldNumber;
const int EditBox::kMaxLineNumFieldNumber;
const int EditBox::kOnLoadFieldNumber;
const int EditBox::kOnShowFieldNumber;
const int EditBox::kOnHideFieldNumber;
const int EditBox::kOnClosedFieldNumber;
const int EditBox::kOnUpdateFieldNumber;
const int EditBox::kOnCharFieldNumber;
const int EditBox::kOnEventFieldNumber;
const int EditBox::kScissorBoxFieldNumber;
const int EditBox::kTagFieldNumber;
const int EditBox::kIsLockFieldNumber;
const int EditBox::kIsHideFieldNumber;
#endif  // !_MSC_VER

EditBox::EditBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditBox::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  fontname_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  color_ = const_cast< ::Medusa::CoreProto::ColorF*>(&::Medusa::CoreProto::ColorF::default_instance());
  backgroundimage_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

EditBox::EditBox(const EditBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditBox::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isvisible_ = false;
  fontname_ = NULL;
  fontsize_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = NULL;
  backgroundimage_ = NULL;
  alignmenttype_ = 1;
  keyboardreturntype_ = 0;
  inputmode_ = 0;
  inputflag_ = 0;
  characternum_ = 0u;
  minlinenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxlinenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onchar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditBox::~EditBox() {
  SharedDtor();
}

void EditBox::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (minlinenum_ != &::google::protobuf::internal::kEmptyString) {
    delete minlinenum_;
  }
  if (maxlinenum_ != &::google::protobuf::internal::kEmptyString) {
    delete maxlinenum_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onchar_ != &::google::protobuf::internal::kEmptyString) {
    delete onchar_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete fontname_;
    delete color_;
    delete backgroundimage_;
    delete scissorbox_;
  }
}

void EditBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditBox_descriptor_;
}

const EditBox& EditBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

EditBox* EditBox::default_instance_ = NULL;

EditBox* EditBox::New() const {
  return new EditBox;
}

void EditBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isvisible_ = false;
    if (has_fontname()) {
      if (fontname_ != NULL) fontname_->::Medusa::CoreProto::FileId::Clear();
    }
    fontsize_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_color()) {
      if (color_ != NULL) color_->::Medusa::CoreProto::ColorF::Clear();
    }
    if (has_backgroundimage()) {
      if (backgroundimage_ != NULL) backgroundimage_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    alignmenttype_ = 1;
    keyboardreturntype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    inputmode_ = 0;
    inputflag_ = 0;
    characternum_ = 0u;
    if (has_minlinenum()) {
      if (minlinenum_ != &::google::protobuf::internal::kEmptyString) {
        minlinenum_->clear();
      }
    }
    if (has_maxlinenum()) {
      if (maxlinenum_ != &::google::protobuf::internal::kEmptyString) {
        maxlinenum_->clear();
      }
    }
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onchar()) {
      if (onchar_ != &::google::protobuf::internal::kEmptyString) {
        onchar_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    tag_ = 0;
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_FontName;
        break;
      }

      // required .Medusa.CoreProto.FileId FontName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FontSize;
        break;
      }

      // required uint32 FontSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Text;
        break;
      }

      // optional string Text = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Color;
        break;
      }

      // optional .Medusa.CoreProto.ColorF Color = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_BackgroundImage;
        break;
      }

      // required .Medusa.CoreProto.Editor.ImageFile BackgroundImage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BackgroundImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_AlignmentType;
        break;
      }

      // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AlignmentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::TextAlignmentType_IsValid(value)) {
            set_alignmenttype(static_cast< ::Medusa::CoreProto::Editor::TextAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_KeyboardReturnType;
        break;
      }

      // required .Medusa.CoreProto.Editor.EditBox.EditBoxKeyboardReturnType KeyboardReturnType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KeyboardReturnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::EditBox_EditBoxKeyboardReturnType_IsValid(value)) {
            set_keyboardreturntype(static_cast< ::Medusa::CoreProto::Editor::EditBox_EditBoxKeyboardReturnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_InputMode;
        break;
      }

      // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputMode InputMode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InputMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::EditBox_EditBoxInputMode_IsValid(value)) {
            set_inputmode(static_cast< ::Medusa::CoreProto::Editor::EditBox_EditBoxInputMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_InputFlag;
        break;
      }

      // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputFlag InputFlag = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InputFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::EditBox_EditBoxInputFlag_IsValid(value)) {
            set_inputflag(static_cast< ::Medusa::CoreProto::Editor::EditBox_EditBoxInputFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_CharacterNum;
        break;
      }

      // optional uint32 CharacterNum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CharacterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characternum_)));
          set_has_characternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_MinLineNum;
        break;
      }

      // optional string MinLineNum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MinLineNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minlinenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minlinenum().data(), this->minlinenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_MaxLineNum;
        break;
      }

      // optional string MaxLineNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaxLineNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxlinenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxlinenum().data(), this->maxlinenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_OnChar;
        break;
      }

      // optional string OnChar = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnChar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onchar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onchar().data(), this->onchar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor(), output);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zorder(), output);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scale(), output);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isvisible(), output);
  }

  // required .Medusa.CoreProto.FileId FontName = 10;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fontname(), output);
  }

  // required uint32 FontSize = 11;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fontsize(), output);
  }

  // optional string Text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->text(), output);
  }

  // optional .Medusa.CoreProto.ColorF Color = 13;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->color(), output);
  }

  // required .Medusa.CoreProto.Editor.ImageFile BackgroundImage = 14;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->backgroundimage(), output);
  }

  // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 18;
  if (has_alignmenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->alignmenttype(), output);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxKeyboardReturnType KeyboardReturnType = 19;
  if (has_keyboardreturntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->keyboardreturntype(), output);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputMode InputMode = 20;
  if (has_inputmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->inputmode(), output);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputFlag InputFlag = 21;
  if (has_inputflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->inputflag(), output);
  }

  // optional uint32 CharacterNum = 25;
  if (has_characternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->characternum(), output);
  }

  // optional string MinLineNum = 26;
  if (has_minlinenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minlinenum().data(), this->minlinenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->minlinenum(), output);
  }

  // optional string MaxLineNum = 27;
  if (has_maxlinenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxlinenum().data(), this->maxlinenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->maxlinenum(), output);
  }

  // optional string OnLoad = 30;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->onload(), output);
  }

  // optional string OnShow = 31;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->onshow(), output);
  }

  // optional string OnHide = 32;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->onhide(), output);
  }

  // optional string OnClosed = 33;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->onclosed(), output);
  }

  // optional string OnUpdate = 34;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->onupdate(), output);
  }

  // optional string OnChar = 35;
  if (has_onchar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onchar().data(), this->onchar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->onchar(), output);
  }

  // optional string OnEvent = 36;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->onevent(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 37;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->scissorbox(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor(), target);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zorder(), target);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scale(), target);
  }

  // required bool IsVisible = 9;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isvisible(), target);
  }

  // required .Medusa.CoreProto.FileId FontName = 10;
  if (has_fontname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fontname(), target);
  }

  // required uint32 FontSize = 11;
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fontsize(), target);
  }

  // optional string Text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->text(), target);
  }

  // optional .Medusa.CoreProto.ColorF Color = 13;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->color(), target);
  }

  // required .Medusa.CoreProto.Editor.ImageFile BackgroundImage = 14;
  if (has_backgroundimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->backgroundimage(), target);
  }

  // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 18;
  if (has_alignmenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->alignmenttype(), target);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxKeyboardReturnType KeyboardReturnType = 19;
  if (has_keyboardreturntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->keyboardreturntype(), target);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputMode InputMode = 20;
  if (has_inputmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->inputmode(), target);
  }

  // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputFlag InputFlag = 21;
  if (has_inputflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->inputflag(), target);
  }

  // optional uint32 CharacterNum = 25;
  if (has_characternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->characternum(), target);
  }

  // optional string MinLineNum = 26;
  if (has_minlinenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minlinenum().data(), this->minlinenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->minlinenum(), target);
  }

  // optional string MaxLineNum = 27;
  if (has_maxlinenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxlinenum().data(), this->maxlinenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->maxlinenum(), target);
  }

  // optional string OnLoad = 30;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->onload(), target);
  }

  // optional string OnShow = 31;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->onshow(), target);
  }

  // optional string OnHide = 32;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->onhide(), target);
  }

  // optional string OnClosed = 33;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->onclosed(), target);
  }

  // optional string OnUpdate = 34;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->onupdate(), target);
  }

  // optional string OnChar = 35;
  if (has_onchar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onchar().data(), this->onchar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->onchar(), target);
  }

  // optional string OnEvent = 36;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->onevent(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 37;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->scissorbox(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 4;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 5;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 6;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool IsVisible = 9;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.FileId FontName = 10;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontname());
    }

    // required uint32 FontSize = 11;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

    // optional string Text = 12;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Medusa.CoreProto.ColorF Color = 13;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // required .Medusa.CoreProto.Editor.ImageFile BackgroundImage = 14;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundimage());
    }

    // required .Medusa.CoreProto.Editor.TextAlignmentType AlignmentType = 18;
    if (has_alignmenttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alignmenttype());
    }

    // required .Medusa.CoreProto.Editor.EditBox.EditBoxKeyboardReturnType KeyboardReturnType = 19;
    if (has_keyboardreturntype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keyboardreturntype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputMode InputMode = 20;
    if (has_inputmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inputmode());
    }

    // required .Medusa.CoreProto.Editor.EditBox.EditBoxInputFlag InputFlag = 21;
    if (has_inputflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inputflag());
    }

    // optional uint32 CharacterNum = 25;
    if (has_characternum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->characternum());
    }

    // optional string MinLineNum = 26;
    if (has_minlinenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minlinenum());
    }

    // optional string MaxLineNum = 27;
    if (has_maxlinenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxlinenum());
    }

    // optional string OnLoad = 30;
    if (has_onload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 31;
    if (has_onshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

    // optional string OnHide = 32;
    if (has_onhide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string OnClosed = 33;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 34;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnChar = 35;
    if (has_onchar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onchar());
    }

    // optional string OnEvent = 36;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 37;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditBox::MergeFrom(const EditBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_fontname()) {
      mutable_fontname()->::Medusa::CoreProto::FileId::MergeFrom(from.fontname());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_color()) {
      mutable_color()->::Medusa::CoreProto::ColorF::MergeFrom(from.color());
    }
    if (from.has_backgroundimage()) {
      mutable_backgroundimage()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.backgroundimage());
    }
    if (from.has_alignmenttype()) {
      set_alignmenttype(from.alignmenttype());
    }
    if (from.has_keyboardreturntype()) {
      set_keyboardreturntype(from.keyboardreturntype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inputmode()) {
      set_inputmode(from.inputmode());
    }
    if (from.has_inputflag()) {
      set_inputflag(from.inputflag());
    }
    if (from.has_characternum()) {
      set_characternum(from.characternum());
    }
    if (from.has_minlinenum()) {
      set_minlinenum(from.minlinenum());
    }
    if (from.has_maxlinenum()) {
      set_maxlinenum(from.maxlinenum());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onchar()) {
      set_onchar(from.onchar());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditBox::CopyFrom(const EditBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003e73f) != 0x0003e73f) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_fontname()) {
    if (!this->fontname().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_backgroundimage()) {
    if (!this->backgroundimage().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void EditBox::Swap(EditBox* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(text_, other->text_);
    std::swap(color_, other->color_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(alignmenttype_, other->alignmenttype_);
    std::swap(keyboardreturntype_, other->keyboardreturntype_);
    std::swap(inputmode_, other->inputmode_);
    std::swap(inputflag_, other->inputflag_);
    std::swap(characternum_, other->characternum_);
    std::swap(minlinenum_, other->minlinenum_);
    std::swap(maxlinenum_, other->maxlinenum_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onchar_, other->onchar_);
    std::swap(onevent_, other->onevent_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditBox_descriptor_;
  metadata.reflection = EditBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProgressBar_ProgressBarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressBar_ProgressBarType_descriptor_;
}
bool ProgressBar_ProgressBarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProgressBar_ProgressBarType ProgressBar::Radial;
const ProgressBar_ProgressBarType ProgressBar::Bar;
const ProgressBar_ProgressBarType ProgressBar::ProgressBarType_MIN;
const ProgressBar_ProgressBarType ProgressBar::ProgressBarType_MAX;
const int ProgressBar::ProgressBarType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProgressBar::kIDFieldNumber;
const int ProgressBar::kPositionFieldNumber;
const int ProgressBar::kIsProportionPointFieldNumber;
const int ProgressBar::kAnchorFieldNumber;
const int ProgressBar::kZOrderFieldNumber;
const int ProgressBar::kRotationFieldNumber;
const int ProgressBar::kScaleFieldNumber;
const int ProgressBar::kIsVisibleFieldNumber;
const int ProgressBar::kSizeFieldNumber;
const int ProgressBar::kImageFieldNumber;
const int ProgressBar::kOnLoadFieldNumber;
const int ProgressBar::kOnShowFieldNumber;
const int ProgressBar::kOnHideFieldNumber;
const int ProgressBar::kOnClosedFieldNumber;
const int ProgressBar::kOnUpdateFieldNumber;
const int ProgressBar::kOnEventFieldNumber;
const int ProgressBar::kDurationFieldNumber;
const int ProgressBar::kTypeFieldNumber;
const int ProgressBar::kMidpointFieldNumber;
const int ProgressBar::kChangeRateFieldNumber;
const int ProgressBar::kScissorBoxFieldNumber;
const int ProgressBar::kRenderFlagFieldNumber;
const int ProgressBar::kTagFieldNumber;
const int ProgressBar::kIsLockFieldNumber;
const int ProgressBar::kIsHideFieldNumber;
#endif  // !_MSC_VER

ProgressBar::ProgressBar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgressBar::InitAsDefaultInstance() {
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  image_ = const_cast< ::Medusa::CoreProto::Editor::ImageFile*>(&::Medusa::CoreProto::Editor::ImageFile::default_instance());
  midpoint_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  changerate_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

ProgressBar::ProgressBar(const ProgressBar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgressBar::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isvisible_ = false;
  size_ = NULL;
  image_ = NULL;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  type_ = 0;
  midpoint_ = NULL;
  changerate_ = NULL;
  scissorbox_ = NULL;
  renderflag_ = 0;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressBar::~ProgressBar() {
  SharedDtor();
}

void ProgressBar::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (this != default_instance_) {
    delete position_;
    delete anchor_;
    delete scale_;
    delete size_;
    delete image_;
    delete midpoint_;
    delete changerate_;
    delete scissorbox_;
  }
}

void ProgressBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressBar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressBar_descriptor_;
}

const ProgressBar& ProgressBar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

ProgressBar* ProgressBar::default_instance_ = NULL;

ProgressBar* ProgressBar::New() const {
  return new ProgressBar;
}

void ProgressBar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
    isvisible_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::Medusa::CoreProto::Editor::ImageFile::Clear();
    }
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    duration_ = 0;
    type_ = 0;
    if (has_midpoint()) {
      if (midpoint_ != NULL) midpoint_->::Medusa::CoreProto::PointF::Clear();
    }
    if (has_changerate()) {
      if (changerate_ != NULL) changerate_->::Medusa::CoreProto::PointF::Clear();
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    renderflag_ = 0;
    tag_ = 0;
    islock_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Image;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ImageFile Image = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_Duration;
        break;
      }

      // required float Duration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Type;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ProgressBar.ProgressBarType Type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::ProgressBar_ProgressBarType_IsValid(value)) {
            set_type(static_cast< ::Medusa::CoreProto::Editor::ProgressBar_ProgressBarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_Midpoint;
        break;
      }

      // optional .Medusa.CoreProto.PointF Midpoint = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Midpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_midpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ChangeRate;
        break;
      }

      // optional .Medusa.CoreProto.PointF ChangeRate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changerate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_RenderFlag;
        break;
      }

      // optional int32 RenderFlag = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RenderFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderflag_)));
          set_has_renderflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgressBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required bool IsProportionPoint = 3;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 4;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->anchor(), output);
  }

  // required int32 ZOrder = 5;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zorder(), output);
  }

  // optional float Rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scale(), output);
  }

  // required bool IsVisible = 8;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isvisible(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 9;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->size(), output);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile Image = 10;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->image(), output);
  }

  // optional string OnLoad = 12;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->onload(), output);
  }

  // optional string OnShow = 13;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->onshow(), output);
  }

  // optional string OnHide = 14;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->onhide(), output);
  }

  // optional string OnClosed = 15;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->onclosed(), output);
  }

  // optional string OnUpdate = 16;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onupdate(), output);
  }

  // optional string OnEvent = 17;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onevent(), output);
  }

  // required float Duration = 18;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->duration(), output);
  }

  // optional .Medusa.CoreProto.Editor.ProgressBar.ProgressBarType Type = 19;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->type(), output);
  }

  // optional .Medusa.CoreProto.PointF Midpoint = 20;
  if (has_midpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->midpoint(), output);
  }

  // optional .Medusa.CoreProto.PointF ChangeRate = 21;
  if (has_changerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->changerate(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->scissorbox(), output);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->renderflag(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgressBar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required bool IsProportionPoint = 3;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 4;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->anchor(), target);
  }

  // required int32 ZOrder = 5;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zorder(), target);
  }

  // optional float Rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 7;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scale(), target);
  }

  // required bool IsVisible = 8;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isvisible(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 9;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->size(), target);
  }

  // optional .Medusa.CoreProto.Editor.ImageFile Image = 10;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->image(), target);
  }

  // optional string OnLoad = 12;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->onload(), target);
  }

  // optional string OnShow = 13;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->onshow(), target);
  }

  // optional string OnHide = 14;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->onhide(), target);
  }

  // optional string OnClosed = 15;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->onclosed(), target);
  }

  // optional string OnUpdate = 16;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onupdate(), target);
  }

  // optional string OnEvent = 17;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onevent(), target);
  }

  // required float Duration = 18;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->duration(), target);
  }

  // optional .Medusa.CoreProto.Editor.ProgressBar.ProgressBarType Type = 19;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->type(), target);
  }

  // optional .Medusa.CoreProto.PointF Midpoint = 20;
  if (has_midpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->midpoint(), target);
  }

  // optional .Medusa.CoreProto.PointF ChangeRate = 21;
  if (has_changerate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->changerate(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->scissorbox(), target);
  }

  // optional int32 RenderFlag = 50;
  if (has_renderflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->renderflag(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgressBar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.PointF Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 3;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 4;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 5;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 6;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 7;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required bool IsVisible = 8;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Medusa.CoreProto.SizeU Size = 9;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional .Medusa.CoreProto.Editor.ImageFile Image = 10;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional string OnLoad = 12;
    if (has_onload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 13;
    if (has_onshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

    // optional string OnHide = 14;
    if (has_onhide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 15;
    if (has_onclosed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 16;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnEvent = 17;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float Duration = 18;
    if (has_duration()) {
      total_size += 2 + 4;
    }

    // optional .Medusa.CoreProto.Editor.ProgressBar.ProgressBarType Type = 19;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Medusa.CoreProto.PointF Midpoint = 20;
    if (has_midpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->midpoint());
    }

    // optional .Medusa.CoreProto.PointF ChangeRate = 21;
    if (has_changerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changerate());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 22;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 RenderFlag = 50;
    if (has_renderflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderflag());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressBar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressBar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressBar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressBar::MergeFrom(const ProgressBar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_image()) {
      mutable_image()->::Medusa::CoreProto::Editor::ImageFile::MergeFrom(from.image());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_midpoint()) {
      mutable_midpoint()->::Medusa::CoreProto::PointF::MergeFrom(from.midpoint());
    }
    if (from.has_changerate()) {
      mutable_changerate()->::Medusa::CoreProto::PointF::MergeFrom(from.changerate());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_renderflag()) {
      set_renderflag(from.renderflag());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressBar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressBar::CopyFrom(const ProgressBar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressBar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001019f) != 0x0001019f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_midpoint()) {
    if (!this->midpoint().IsInitialized()) return false;
  }
  if (has_changerate()) {
    if (!this->changerate().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void ProgressBar::Swap(ProgressBar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(size_, other->size_);
    std::swap(image_, other->image_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onevent_, other->onevent_);
    std::swap(duration_, other->duration_);
    std::swap(type_, other->type_);
    std::swap(midpoint_, other->midpoint_);
    std::swap(changerate_, other->changerate_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(renderflag_, other->renderflag_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressBar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressBar_descriptor_;
  metadata.reflection = ProgressBar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trigger::kIDFieldNumber;
const int Trigger::kOnUpdateFieldNumber;
const int Trigger::kOnEventFieldNumber;
const int Trigger::kSizeFieldNumber;
const int Trigger::kPositionFieldNumber;
const int Trigger::kIsProportionPointFieldNumber;
const int Trigger::kParallaxFieldNumber;
const int Trigger::kTagFieldNumber;
const int Trigger::kIsLockFieldNumber;
const int Trigger::kIsHideFieldNumber;
#endif  // !_MSC_VER

Trigger::Trigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trigger::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
}

Trigger::Trigger(const Trigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trigger::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  parallax_ = 0;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trigger::~Trigger() {
  SharedDtor();
}

void Trigger::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (this != default_instance_) {
    delete size_;
    delete position_;
  }
}

void Trigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trigger_descriptor_;
}

const Trigger& Trigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Trigger* Trigger::default_instance_ = NULL;

Trigger* Trigger::New() const {
  return new Trigger;
}

void Trigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    parallax_ = 0;
    tag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Size;
        break;
      }

      // optional .Medusa.CoreProto.SizeU Size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Position;
        break;
      }

      // optional .Medusa.CoreProto.PointF Position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsProportionPoint;
        break;
      }

      // optional bool IsProportionPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Parallax;
        break;
      }

      // optional float Parallax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Parallax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallax_)));
          set_has_parallax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string OnUpdate = 2;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->onupdate(), output);
  }

  // optional string OnEvent = 3;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->onevent(), output);
  }

  // optional .Medusa.CoreProto.SizeU Size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->size(), output);
  }

  // optional .Medusa.CoreProto.PointF Position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->position(), output);
  }

  // optional bool IsProportionPoint = 6;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isproportionpoint(), output);
  }

  // optional float Parallax = 7;
  if (has_parallax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->parallax(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string OnUpdate = 2;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->onupdate(), target);
  }

  // optional string OnEvent = 3;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->onevent(), target);
  }

  // optional .Medusa.CoreProto.SizeU Size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->size(), target);
  }

  // optional .Medusa.CoreProto.PointF Position = 5;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->position(), target);
  }

  // optional bool IsProportionPoint = 6;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isproportionpoint(), target);
  }

  // optional float Parallax = 7;
  if (has_parallax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->parallax(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string OnUpdate = 2;
    if (has_onupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnEvent = 3;
    if (has_onevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional .Medusa.CoreProto.SizeU Size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional .Medusa.CoreProto.PointF Position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional bool IsProportionPoint = 6;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // optional float Parallax = 7;
    if (has_parallax()) {
      total_size += 1 + 4;
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_parallax()) {
      set_parallax(from.parallax());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void Trigger::Swap(Trigger* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onevent_, other->onevent_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(parallax_, other->parallax_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trigger_descriptor_;
  metadata.reflection = Trigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerRef::kIDFieldNumber;
const int TriggerRef::kModelNameFieldNumber;
const int TriggerRef::kSizeFieldNumber;
const int TriggerRef::kPositionFieldNumber;
const int TriggerRef::kIsProportionPointFieldNumber;
const int TriggerRef::kParallaxFieldNumber;
const int TriggerRef::kTagFieldNumber;
const int TriggerRef::kIsLockFieldNumber;
const int TriggerRef::kIsHideFieldNumber;
#endif  // !_MSC_VER

TriggerRef::TriggerRef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggerRef::InitAsDefaultInstance() {
  modelname_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
}

TriggerRef::TriggerRef(const TriggerRef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggerRef::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelname_ = NULL;
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  parallax_ = 0;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerRef::~TriggerRef() {
  SharedDtor();
}

void TriggerRef::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete modelname_;
    delete size_;
    delete position_;
  }
}

void TriggerRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerRef_descriptor_;
}

const TriggerRef& TriggerRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

TriggerRef* TriggerRef::default_instance_ = NULL;

TriggerRef* TriggerRef::New() const {
  return new TriggerRef;
}

void TriggerRef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_modelname()) {
      if (modelname_ != NULL) modelname_->::Medusa::CoreProto::FileId::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    parallax_ = 0;
    tag_ = 0;
    islock_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ModelName;
        break;
      }

      // required .Medusa.CoreProto.FileId ModelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Size;
        break;
      }

      // optional .Medusa.CoreProto.SizeU Size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // optional .Medusa.CoreProto.PointF Position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsProportionPoint;
        break;
      }

      // optional bool IsProportionPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_Parallax;
        break;
      }

      // optional float Parallax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Parallax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallax_)));
          set_has_parallax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggerRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.FileId ModelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->modelname(), output);
  }

  // optional .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->size(), output);
  }

  // optional .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // optional bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isproportionpoint(), output);
  }

  // optional float Parallax = 6;
  if (has_parallax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->parallax(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggerRef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.FileId ModelName = 2;
  if (has_modelname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->modelname(), target);
  }

  // optional .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->size(), target);
  }

  // optional .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // optional bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isproportionpoint(), target);
  }

  // optional float Parallax = 6;
  if (has_parallax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->parallax(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggerRef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.FileId ModelName = 2;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelname());
    }

    // optional .Medusa.CoreProto.SizeU Size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional .Medusa.CoreProto.PointF Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional bool IsProportionPoint = 5;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // optional float Parallax = 6;
    if (has_parallax()) {
      total_size += 1 + 4;
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerRef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerRef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerRef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerRef::MergeFrom(const TriggerRef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_modelname()) {
      mutable_modelname()->::Medusa::CoreProto::FileId::MergeFrom(from.modelname());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_parallax()) {
      set_parallax(from.parallax());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerRef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerRef::CopyFrom(const TriggerRef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_modelname()) {
    if (!this->modelname().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void TriggerRef::Swap(TriggerRef* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(modelname_, other->modelname_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(parallax_, other->parallax_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerRef_descriptor_;
  metadata.reflection = TriggerRef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerRef::kIDFieldNumber;
const int LayerRef::kModelNameFieldNumber;
const int LayerRef::kPositionFieldNumber;
const int LayerRef::kIsProportionPointFieldNumber;
const int LayerRef::kAnchorFieldNumber;
const int LayerRef::kZOrderFieldNumber;
const int LayerRef::kRotationFieldNumber;
const int LayerRef::kScaleFieldNumber;
const int LayerRef::kIsFilpXFieldNumber;
const int LayerRef::kIsFilpYFieldNumber;
const int LayerRef::kIsVisibleFieldNumber;
const int LayerRef::kParallaxFieldNumber;
const int LayerRef::kTagFieldNumber;
const int LayerRef::kIsLockFieldNumber;
const int LayerRef::kIsHideFieldNumber;
#endif  // !_MSC_VER

LayerRef::LayerRef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerRef::InitAsDefaultInstance() {
  modelname_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
}

LayerRef::LayerRef(const LayerRef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerRef::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelname_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isfilpx_ = false;
  isfilpy_ = false;
  isvisible_ = false;
  parallax_ = 0;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerRef::~LayerRef() {
  SharedDtor();
}

void LayerRef::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete modelname_;
    delete position_;
    delete anchor_;
    delete scale_;
  }
}

void LayerRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerRef_descriptor_;
}

const LayerRef& LayerRef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

LayerRef* LayerRef::default_instance_ = NULL;

LayerRef* LayerRef::New() const {
  return new LayerRef;
}

void LayerRef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_modelname()) {
      if (modelname_ != NULL) modelname_->::Medusa::CoreProto::FileId::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isfilpx_ = false;
    isfilpy_ = false;
    isvisible_ = false;
    parallax_ = 0;
    tag_ = 0;
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ModelName;
        break;
      }

      // required .Medusa.CoreProto.FileId ModelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsFilpX;
        break;
      }

      // optional bool IsFilpX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpx_)));
          set_has_isfilpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsFilpY;
        break;
      }

      // optional bool IsFilpY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFilpY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilpy_)));
          set_has_isfilpy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_Parallax;
        break;
      }

      // required float Parallax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Parallax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallax_)));
          set_has_parallax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.FileId ModelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->modelname(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anchor(), output);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zorder(), output);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scale(), output);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isfilpx(), output);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isfilpy(), output);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isvisible(), output);
  }

  // required float Parallax = 12;
  if (has_parallax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->parallax(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerRef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.FileId ModelName = 2;
  if (has_modelname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->modelname(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required bool IsProportionPoint = 4;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 5;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anchor(), target);
  }

  // required int32 ZOrder = 6;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zorder(), target);
  }

  // optional float Rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scale(), target);
  }

  // optional bool IsFilpX = 9;
  if (has_isfilpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isfilpx(), target);
  }

  // optional bool IsFilpY = 10;
  if (has_isfilpy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isfilpy(), target);
  }

  // required bool IsVisible = 11;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isvisible(), target);
  }

  // required float Parallax = 12;
  if (has_parallax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->parallax(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerRef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.FileId ModelName = 2;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelname());
    }

    // required .Medusa.CoreProto.PointF Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 4;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 5;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 6;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional .Medusa.CoreProto.ScaleF Scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsFilpX = 9;
    if (has_isfilpx()) {
      total_size += 1 + 1;
    }

    // optional bool IsFilpY = 10;
    if (has_isfilpy()) {
      total_size += 1 + 1;
    }

    // required bool IsVisible = 11;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required float Parallax = 12;
    if (has_parallax()) {
      total_size += 1 + 4;
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerRef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerRef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerRef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerRef::MergeFrom(const LayerRef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_modelname()) {
      mutable_modelname()->::Medusa::CoreProto::FileId::MergeFrom(from.modelname());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isfilpx()) {
      set_isfilpx(from.isfilpx());
    }
    if (from.has_isfilpy()) {
      set_isfilpy(from.isfilpy());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_parallax()) {
      set_parallax(from.parallax());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerRef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerRef::CopyFrom(const LayerRef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerRef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c3f) != 0x00000c3f) return false;

  if (has_modelname()) {
    if (!this->modelname().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  return true;
}

void LayerRef::Swap(LayerRef* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(modelname_, other->modelname_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isfilpx_, other->isfilpx_);
    std::swap(isfilpy_, other->isfilpy_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(parallax_, other->parallax_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerRef_descriptor_;
  metadata.reflection = LayerRef_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ListBox_ScorllDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListBox_ScorllDirection_descriptor_;
}
bool ListBox_ScorllDirection_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ListBox_ScorllDirection ListBox::None;
const ListBox_ScorllDirection ListBox::Horizontal;
const ListBox_ScorllDirection ListBox::Vertical;
const ListBox_ScorllDirection ListBox::Both;
const ListBox_ScorllDirection ListBox::ScorllDirection_MIN;
const ListBox_ScorllDirection ListBox::ScorllDirection_MAX;
const int ListBox::ScorllDirection_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ListBox_VerticalOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListBox_VerticalOrder_descriptor_;
}
bool ListBox_VerticalOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ListBox_VerticalOrder ListBox::Ascending;
const ListBox_VerticalOrder ListBox::Descending;
const ListBox_VerticalOrder ListBox::VerticalOrder_MIN;
const ListBox_VerticalOrder ListBox::VerticalOrder_MAX;
const int ListBox::VerticalOrder_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ListBox::kIDFieldNumber;
const int ListBox::kItemFileIDFieldNumber;
const int ListBox::kSizeFieldNumber;
const int ListBox::kPositionFieldNumber;
const int ListBox::kIsProportionPointFieldNumber;
const int ListBox::kAnchorFieldNumber;
const int ListBox::kZOrderFieldNumber;
const int ListBox::kRotationFieldNumber;
const int ListBox::kScaleFieldNumber;
const int ListBox::kIsVisibleFieldNumber;
const int ListBox::kDirectionFieldNumber;
const int ListBox::kOrderTypeFieldNumber;
const int ListBox::kOnLoadFieldNumber;
const int ListBox::kOnShowFieldNumber;
const int ListBox::kOnHideFieldNumber;
const int ListBox::kOnClosedFieldNumber;
const int ListBox::kOnUpdateFieldNumber;
const int ListBox::kOnEventFieldNumber;
const int ListBox::kScissorBoxFieldNumber;
const int ListBox::kTagFieldNumber;
const int ListBox::kIsLockFieldNumber;
const int ListBox::kIsHideFieldNumber;
#endif  // !_MSC_VER

ListBox::ListBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListBox::InitAsDefaultInstance() {
  itemfileid_ = const_cast< ::Medusa::CoreProto::FileId*>(&::Medusa::CoreProto::FileId::default_instance());
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  position_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  anchor_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  scale_ = const_cast< ::Medusa::CoreProto::ScaleF*>(&::Medusa::CoreProto::ScaleF::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

ListBox::ListBox(const ListBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListBox::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemfileid_ = NULL;
  size_ = NULL;
  position_ = NULL;
  isproportionpoint_ = false;
  anchor_ = NULL;
  zorder_ = 0;
  rotation_ = 0;
  scale_ = NULL;
  isvisible_ = false;
  direction_ = -1;
  ordertype_ = 0;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  tag_ = 0;
  islock_ = false;
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListBox::~ListBox() {
  SharedDtor();
}

void ListBox::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (onevent_ != &::google::protobuf::internal::kEmptyString) {
    delete onevent_;
  }
  if (this != default_instance_) {
    delete itemfileid_;
    delete size_;
    delete position_;
    delete anchor_;
    delete scale_;
    delete scissorbox_;
  }
}

void ListBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListBox_descriptor_;
}

const ListBox& ListBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

ListBox* ListBox::default_instance_ = NULL;

ListBox* ListBox::New() const {
  return new ListBox;
}

void ListBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_itemfileid()) {
      if (itemfileid_ != NULL) itemfileid_->::Medusa::CoreProto::FileId::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Medusa::CoreProto::PointF::Clear();
    }
    isproportionpoint_ = false;
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Medusa::CoreProto::PointF::Clear();
    }
    zorder_ = 0;
    rotation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Medusa::CoreProto::ScaleF::Clear();
    }
    isvisible_ = false;
    direction_ = -1;
    ordertype_ = 0;
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
    if (has_onevent()) {
      if (onevent_ != &::google::protobuf::internal::kEmptyString) {
        onevent_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    tag_ = 0;
    islock_ = false;
    ishide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemFileID;
        break;
      }

      // required .Medusa.CoreProto.FileId ItemFileID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemFileID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemfileid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // required .Medusa.CoreProto.PointF Position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsProportionPoint;
        break;
      }

      // required bool IsProportionPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsProportionPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isproportionpoint_)));
          set_has_isproportionpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Anchor;
        break;
      }

      // required .Medusa.CoreProto.PointF Anchor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ZOrder;
        break;
      }

      // required int32 ZOrder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Rotation;
        break;
      }

      // optional float Rotation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Scale;
        break;
      }

      // optional .Medusa.CoreProto.ScaleF Scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsVisible;
        break;
      }

      // required bool IsVisible = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Direction;
        break;
      }

      // required .Medusa.CoreProto.Editor.ListBox.ScorllDirection Direction = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::ListBox_ScorllDirection_IsValid(value)) {
            set_direction(static_cast< ::Medusa::CoreProto::Editor::ListBox_ScorllDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_OrderType;
        break;
      }

      // optional .Medusa.CoreProto.Editor.ListBox.VerticalOrder OrderType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::Editor::ListBox_VerticalOrder_IsValid(value)) {
            set_ordertype(static_cast< ::Medusa::CoreProto::Editor::ListBox_VerticalOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OnEvent;
        break;
      }

      // optional string OnEvent = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onevent().data(), this->onevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_IsLock;
        break;
      }

      // optional bool IsLock = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_IsHide;
        break;
      }

      // optional bool IsHide = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.FileId ItemFileID = 2;
  if (has_itemfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemfileid(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->size(), output);
  }

  // required .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // required bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isproportionpoint(), output);
  }

  // required .Medusa.CoreProto.PointF Anchor = 6;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->anchor(), output);
  }

  // required int32 ZOrder = 7;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zorder(), output);
  }

  // optional float Rotation = 8;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rotation(), output);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scale(), output);
  }

  // required bool IsVisible = 12;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isvisible(), output);
  }

  // required .Medusa.CoreProto.Editor.ListBox.ScorllDirection Direction = 13;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->direction(), output);
  }

  // optional .Medusa.CoreProto.Editor.ListBox.VerticalOrder OrderType = 14;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ordertype(), output);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->onload(), output);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onshow(), output);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onhide(), output);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->onclosed(), output);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->onupdate(), output);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->onevent(), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 21;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->scissorbox(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->islock(), output);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(202, this->ishide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.FileId ItemFileID = 2;
  if (has_itemfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemfileid(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->size(), target);
  }

  // required .Medusa.CoreProto.PointF Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // required bool IsProportionPoint = 5;
  if (has_isproportionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isproportionpoint(), target);
  }

  // required .Medusa.CoreProto.PointF Anchor = 6;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->anchor(), target);
  }

  // required int32 ZOrder = 7;
  if (has_zorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zorder(), target);
  }

  // optional float Rotation = 8;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rotation(), target);
  }

  // optional .Medusa.CoreProto.ScaleF Scale = 9;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scale(), target);
  }

  // required bool IsVisible = 12;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isvisible(), target);
  }

  // required .Medusa.CoreProto.Editor.ListBox.ScorllDirection Direction = 13;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->direction(), target);
  }

  // optional .Medusa.CoreProto.Editor.ListBox.VerticalOrder OrderType = 14;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ordertype(), target);
  }

  // optional string OnLoad = 15;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->onload(), target);
  }

  // optional string OnShow = 16;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onshow(), target);
  }

  // optional string OnHide = 17;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onhide(), target);
  }

  // optional string OnClosed = 18;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->onclosed(), target);
  }

  // optional string OnUpdate = 19;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->onupdate(), target);
  }

  // optional string OnEvent = 20;
  if (has_onevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onevent().data(), this->onevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->onevent(), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 21;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->scissorbox(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  // optional bool IsLock = 201;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->islock(), target);
  }

  // optional bool IsHide = 202;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(202, this->ishide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.FileId ItemFileID = 2;
    if (has_itemfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemfileid());
    }

    // required .Medusa.CoreProto.SizeU Size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .Medusa.CoreProto.PointF Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required bool IsProportionPoint = 5;
    if (has_isproportionpoint()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.PointF Anchor = 6;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // required int32 ZOrder = 7;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional float Rotation = 8;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Medusa.CoreProto.ScaleF Scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required bool IsVisible = 12;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }

    // required .Medusa.CoreProto.Editor.ListBox.ScorllDirection Direction = 13;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional .Medusa.CoreProto.Editor.ListBox.VerticalOrder OrderType = 14;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional string OnLoad = 15;
    if (has_onload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 16;
    if (has_onshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

    // optional string OnHide = 17;
    if (has_onhide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 18;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OnUpdate = 19;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

    // optional string OnEvent = 20;
    if (has_onevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onevent());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 21;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional bool IsLock = 201;
    if (has_islock()) {
      total_size += 2 + 1;
    }

    // optional bool IsHide = 202;
    if (has_ishide()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListBox::MergeFrom(const ListBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemfileid()) {
      mutable_itemfileid()->::Medusa::CoreProto::FileId::MergeFrom(from.itemfileid());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Medusa::CoreProto::PointF::MergeFrom(from.position());
    }
    if (from.has_isproportionpoint()) {
      set_isproportionpoint(from.isproportionpoint());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Medusa::CoreProto::PointF::MergeFrom(from.anchor());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale()) {
      mutable_scale()->::Medusa::CoreProto::ScaleF::MergeFrom(from.scale());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
    if (from.has_onevent()) {
      set_onevent(from.onevent());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBox::CopyFrom(const ListBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000067f) != 0x0000067f) return false;

  if (has_itemfileid()) {
    if (!this->itemfileid().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_anchor()) {
    if (!this->anchor().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void ListBox::Swap(ListBox* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemfileid_, other->itemfileid_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(isproportionpoint_, other->isproportionpoint_);
    std::swap(anchor_, other->anchor_);
    std::swap(zorder_, other->zorder_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(direction_, other->direction_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(onevent_, other->onevent_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(tag_, other->tag_);
    std::swap(islock_, other->islock_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListBox_descriptor_;
  metadata.reflection = ListBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Layer::kIDFieldNumber;
const int Layer::kSizeFieldNumber;
const int Layer::kImagesFieldNumber;
const int Layer::kButtonsFieldNumber;
const int Layer::kFramesFieldNumber;
const int Layer::kLabelsFieldNumber;
const int Layer::kEditBoxsFieldNumber;
const int Layer::kProgressBarsFieldNumber;
const int Layer::kTriggersFieldNumber;
const int Layer::kTriggerRefsFieldNumber;
const int Layer::kLayerRefsFieldNumber;
const int Layer::kOnLoadFieldNumber;
const int Layer::kOnShowFieldNumber;
const int Layer::kOnHideFieldNumber;
const int Layer::kOnClosedFieldNumber;
const int Layer::kOnUpdateFieldNumber;
const int Layer::kOnTouchBeganFieldNumber;
const int Layer::kOnTouchMovedFieldNumber;
const int Layer::kOnTouchEndFieldNumber;
const int Layer::kListsFieldNumber;
const int Layer::kScissorBoxFieldNumber;
const int Layer::kTagFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Layer::InitAsDefaultInstance() {
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
  scissorbox_ = const_cast< ::Medusa::CoreProto::RectF*>(&::Medusa::CoreProto::RectF::default_instance());
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Layer::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  onload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onhide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onclosed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onupdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchbegan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchmoved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ontouchend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scissorbox_ = NULL;
  tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Layer::~Layer() {
  SharedDtor();
}

void Layer::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (onload_ != &::google::protobuf::internal::kEmptyString) {
    delete onload_;
  }
  if (onshow_ != &::google::protobuf::internal::kEmptyString) {
    delete onshow_;
  }
  if (onhide_ != &::google::protobuf::internal::kEmptyString) {
    delete onhide_;
  }
  if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
    delete onclosed_;
  }
  if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
    delete onupdate_;
  }
  if (ontouchbegan_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchbegan_;
  }
  if (ontouchmoved_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchmoved_;
  }
  if (ontouchend_ != &::google::protobuf::internal::kEmptyString) {
    delete ontouchend_;
  }
  if (this != default_instance_) {
    delete size_;
    delete scissorbox_;
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerEditor_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New() const {
  return new Layer;
}

void Layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_onload()) {
      if (onload_ != &::google::protobuf::internal::kEmptyString) {
        onload_->clear();
      }
    }
    if (has_onshow()) {
      if (onshow_ != &::google::protobuf::internal::kEmptyString) {
        onshow_->clear();
      }
    }
    if (has_onhide()) {
      if (onhide_ != &::google::protobuf::internal::kEmptyString) {
        onhide_->clear();
      }
    }
    if (has_onclosed()) {
      if (onclosed_ != &::google::protobuf::internal::kEmptyString) {
        onclosed_->clear();
      }
    }
    if (has_onupdate()) {
      if (onupdate_ != &::google::protobuf::internal::kEmptyString) {
        onupdate_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_ontouchbegan()) {
      if (ontouchbegan_ != &::google::protobuf::internal::kEmptyString) {
        ontouchbegan_->clear();
      }
    }
    if (has_ontouchmoved()) {
      if (ontouchmoved_ != &::google::protobuf::internal::kEmptyString) {
        ontouchmoved_->clear();
      }
    }
    if (has_ontouchend()) {
      if (ontouchend_ != &::google::protobuf::internal::kEmptyString) {
        ontouchend_->clear();
      }
    }
    if (has_scissorbox()) {
      if (scissorbox_ != NULL) scissorbox_->::Medusa::CoreProto::RectF::Clear();
    }
    tag_ = 0;
  }
  images_.Clear();
  buttons_.Clear();
  frames_.Clear();
  labels_.Clear();
  editboxs_.Clear();
  progressbars_.Clear();
  triggers_.Clear();
  triggerrefs_.Clear();
  layerrefs_.Clear();
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Images;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.Image Images = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Images;
        if (input->ExpectTag(34)) goto parse_Buttons;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.Button Buttons = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Buttons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buttons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Buttons;
        if (input->ExpectTag(42)) goto parse_Frames;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.Frame Frames = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Frames;
        if (input->ExpectTag(50)) goto parse_Labels;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.Label Labels = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Labels;
        if (input->ExpectTag(58)) goto parse_EditBoxs;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.EditBox EditBoxs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EditBoxs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_editboxs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_EditBoxs;
        if (input->ExpectTag(74)) goto parse_ProgressBars;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.ProgressBar ProgressBars = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProgressBars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progressbars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ProgressBars;
        if (input->ExpectTag(82)) goto parse_Triggers;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.Trigger Triggers = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Triggers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Triggers;
        if (input->ExpectTag(90)) goto parse_TriggerRefs;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.TriggerRef TriggerRefs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TriggerRefs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggerrefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_TriggerRefs;
        if (input->ExpectTag(98)) goto parse_LayerRefs;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.LayerRef LayerRefs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LayerRefs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layerrefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_LayerRefs;
        if (input->ExpectTag(106)) goto parse_OnLoad;
        break;
      }

      // optional string OnLoad = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnLoad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onload().data(), this->onload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_OnShow;
        break;
      }

      // optional string OnShow = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onshow().data(), this->onshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OnHide;
        break;
      }

      // optional string OnHide = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnHide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onhide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onhide().data(), this->onhide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OnClosed;
        break;
      }

      // optional string OnClosed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnClosed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onclosed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onclosed().data(), this->onclosed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_OnUpdate;
        break;
      }

      // optional string OnUpdate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onupdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onupdate().data(), this->onupdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_OnTouchBegan;
        break;
      }

      // optional string OnTouchBegan = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchBegan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchbegan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchbegan().data(), this->ontouchbegan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OnTouchMoved;
        break;
      }

      // optional string OnTouchMoved = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchMoved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchmoved()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchmoved().data(), this->ontouchmoved().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OnTouchEnd;
        break;
      }

      // optional string OnTouchEnd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnTouchEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontouchend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontouchend().data(), this->ontouchend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Lists;
        break;
      }

      // repeated .Medusa.CoreProto.Editor.ListBox Lists = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_Lists;
        if (input->ExpectTag(178)) goto parse_ScissorBox;
        break;
      }

      // optional .Medusa.CoreProto.RectF ScissorBox = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScissorBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scissorbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Tag;
        break;
      }

      // optional int32 Tag = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // repeated .Medusa.CoreProto.Editor.Image Images = 3;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->images(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.Button Buttons = 4;
  for (int i = 0; i < this->buttons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buttons(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.Frame Frames = 5;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frames(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.Label Labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->labels(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.EditBox EditBoxs = 7;
  for (int i = 0; i < this->editboxs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->editboxs(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.ProgressBar ProgressBars = 9;
  for (int i = 0; i < this->progressbars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->progressbars(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.Trigger Triggers = 10;
  for (int i = 0; i < this->triggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->triggers(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.TriggerRef TriggerRefs = 11;
  for (int i = 0; i < this->triggerrefs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->triggerrefs(i), output);
  }

  // repeated .Medusa.CoreProto.Editor.LayerRef LayerRefs = 12;
  for (int i = 0; i < this->layerrefs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->layerrefs(i), output);
  }

  // optional string OnLoad = 13;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->onload(), output);
  }

  // optional string OnShow = 14;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->onshow(), output);
  }

  // optional string OnHide = 15;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->onhide(), output);
  }

  // optional string OnClosed = 16;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->onclosed(), output);
  }

  // optional string OnUpdate = 17;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->onupdate(), output);
  }

  // optional string OnTouchBegan = 18;
  if (has_ontouchbegan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchbegan().data(), this->ontouchbegan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->ontouchbegan(), output);
  }

  // optional string OnTouchMoved = 19;
  if (has_ontouchmoved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchmoved().data(), this->ontouchmoved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->ontouchmoved(), output);
  }

  // optional string OnTouchEnd = 20;
  if (has_ontouchend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchend().data(), this->ontouchend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ontouchend(), output);
  }

  // repeated .Medusa.CoreProto.Editor.ListBox Lists = 21;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lists(i), output);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->scissorbox(), output);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // repeated .Medusa.CoreProto.Editor.Image Images = 3;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->images(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.Button Buttons = 4;
  for (int i = 0; i < this->buttons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buttons(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.Frame Frames = 5;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frames(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.Label Labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->labels(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.EditBox EditBoxs = 7;
  for (int i = 0; i < this->editboxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->editboxs(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.ProgressBar ProgressBars = 9;
  for (int i = 0; i < this->progressbars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->progressbars(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.Trigger Triggers = 10;
  for (int i = 0; i < this->triggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->triggers(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.TriggerRef TriggerRefs = 11;
  for (int i = 0; i < this->triggerrefs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->triggerrefs(i), target);
  }

  // repeated .Medusa.CoreProto.Editor.LayerRef LayerRefs = 12;
  for (int i = 0; i < this->layerrefs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->layerrefs(i), target);
  }

  // optional string OnLoad = 13;
  if (has_onload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onload().data(), this->onload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->onload(), target);
  }

  // optional string OnShow = 14;
  if (has_onshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onshow().data(), this->onshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->onshow(), target);
  }

  // optional string OnHide = 15;
  if (has_onhide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onhide().data(), this->onhide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->onhide(), target);
  }

  // optional string OnClosed = 16;
  if (has_onclosed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onclosed().data(), this->onclosed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->onclosed(), target);
  }

  // optional string OnUpdate = 17;
  if (has_onupdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onupdate().data(), this->onupdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->onupdate(), target);
  }

  // optional string OnTouchBegan = 18;
  if (has_ontouchbegan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchbegan().data(), this->ontouchbegan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->ontouchbegan(), target);
  }

  // optional string OnTouchMoved = 19;
  if (has_ontouchmoved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchmoved().data(), this->ontouchmoved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->ontouchmoved(), target);
  }

  // optional string OnTouchEnd = 20;
  if (has_ontouchend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontouchend().data(), this->ontouchend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ontouchend(), target);
  }

  // repeated .Medusa.CoreProto.Editor.ListBox Lists = 21;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->lists(i), target);
  }

  // optional .Medusa.CoreProto.RectF ScissorBox = 22;
  if (has_scissorbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->scissorbox(), target);
  }

  // optional int32 Tag = 51;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional string OnLoad = 13;
    if (has_onload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onload());
    }

    // optional string OnShow = 14;
    if (has_onshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onshow());
    }

    // optional string OnHide = 15;
    if (has_onhide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onhide());
    }

    // optional string OnClosed = 16;
    if (has_onclosed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onclosed());
    }

    // optional string OnUpdate = 17;
    if (has_onupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onupdate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string OnTouchBegan = 18;
    if (has_ontouchbegan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchbegan());
    }

    // optional string OnTouchMoved = 19;
    if (has_ontouchmoved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchmoved());
    }

    // optional string OnTouchEnd = 20;
    if (has_ontouchend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontouchend());
    }

    // optional .Medusa.CoreProto.RectF ScissorBox = 22;
    if (has_scissorbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scissorbox());
    }

    // optional int32 Tag = 51;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  // repeated .Medusa.CoreProto.Editor.Image Images = 3;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  // repeated .Medusa.CoreProto.Editor.Button Buttons = 4;
  total_size += 1 * this->buttons_size();
  for (int i = 0; i < this->buttons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buttons(i));
  }

  // repeated .Medusa.CoreProto.Editor.Frame Frames = 5;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  // repeated .Medusa.CoreProto.Editor.Label Labels = 6;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  // repeated .Medusa.CoreProto.Editor.EditBox EditBoxs = 7;
  total_size += 1 * this->editboxs_size();
  for (int i = 0; i < this->editboxs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->editboxs(i));
  }

  // repeated .Medusa.CoreProto.Editor.ProgressBar ProgressBars = 9;
  total_size += 1 * this->progressbars_size();
  for (int i = 0; i < this->progressbars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progressbars(i));
  }

  // repeated .Medusa.CoreProto.Editor.Trigger Triggers = 10;
  total_size += 1 * this->triggers_size();
  for (int i = 0; i < this->triggers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggers(i));
  }

  // repeated .Medusa.CoreProto.Editor.TriggerRef TriggerRefs = 11;
  total_size += 1 * this->triggerrefs_size();
  for (int i = 0; i < this->triggerrefs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggerrefs(i));
  }

  // repeated .Medusa.CoreProto.Editor.LayerRef LayerRefs = 12;
  total_size += 1 * this->layerrefs_size();
  for (int i = 0; i < this->layerrefs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layerrefs(i));
  }

  // repeated .Medusa.CoreProto.Editor.ListBox Lists = 21;
  total_size += 2 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  buttons_.MergeFrom(from.buttons_);
  frames_.MergeFrom(from.frames_);
  labels_.MergeFrom(from.labels_);
  editboxs_.MergeFrom(from.editboxs_);
  progressbars_.MergeFrom(from.progressbars_);
  triggers_.MergeFrom(from.triggers_);
  triggerrefs_.MergeFrom(from.triggerrefs_);
  layerrefs_.MergeFrom(from.layerrefs_);
  lists_.MergeFrom(from.lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_onload()) {
      set_onload(from.onload());
    }
    if (from.has_onshow()) {
      set_onshow(from.onshow());
    }
    if (from.has_onhide()) {
      set_onhide(from.onhide());
    }
    if (from.has_onclosed()) {
      set_onclosed(from.onclosed());
    }
    if (from.has_onupdate()) {
      set_onupdate(from.onupdate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ontouchbegan()) {
      set_ontouchbegan(from.ontouchbegan());
    }
    if (from.has_ontouchmoved()) {
      set_ontouchmoved(from.ontouchmoved());
    }
    if (from.has_ontouchend()) {
      set_ontouchend(from.ontouchend());
    }
    if (from.has_scissorbox()) {
      mutable_scissorbox()->::Medusa::CoreProto::RectF::MergeFrom(from.scissorbox());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buttons_size(); i++) {
    if (!this->buttons(i).IsInitialized()) return false;
  }
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  for (int i = 0; i < editboxs_size(); i++) {
    if (!this->editboxs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < progressbars_size(); i++) {
    if (!this->progressbars(i).IsInitialized()) return false;
  }
  for (int i = 0; i < triggers_size(); i++) {
    if (!this->triggers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < triggerrefs_size(); i++) {
    if (!this->triggerrefs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < layerrefs_size(); i++) {
    if (!this->layerrefs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lists_size(); i++) {
    if (!this->lists(i).IsInitialized()) return false;
  }
  if (has_scissorbox()) {
    if (!this->scissorbox().IsInitialized()) return false;
  }
  return true;
}

void Layer::Swap(Layer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    images_.Swap(&other->images_);
    buttons_.Swap(&other->buttons_);
    frames_.Swap(&other->frames_);
    labels_.Swap(&other->labels_);
    editboxs_.Swap(&other->editboxs_);
    progressbars_.Swap(&other->progressbars_);
    triggers_.Swap(&other->triggers_);
    triggerrefs_.Swap(&other->triggerrefs_);
    layerrefs_.Swap(&other->layerrefs_);
    std::swap(onload_, other->onload_);
    std::swap(onshow_, other->onshow_);
    std::swap(onhide_, other->onhide_);
    std::swap(onclosed_, other->onclosed_);
    std::swap(onupdate_, other->onupdate_);
    std::swap(ontouchbegan_, other->ontouchbegan_);
    std::swap(ontouchmoved_, other->ontouchmoved_);
    std::swap(ontouchend_, other->ontouchend_);
    lists_.Swap(&other->lists_);
    std::swap(scissorbox_, other->scissorbox_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Editor
}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

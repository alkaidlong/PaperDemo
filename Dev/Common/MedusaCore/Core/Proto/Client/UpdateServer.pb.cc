// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpdateServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UpdateServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* UpdateServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateServer_UpdateServerStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UpdateServer_2eproto() {
  protobuf_AddDesc_UpdateServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UpdateServer.proto");
  GOOGLE_CHECK(file != NULL);
  UpdateServer_descriptor_ = file->message_type(0);
  static const int UpdateServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, minversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, curversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, description_),
  };
  UpdateServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateServer_descriptor_,
      UpdateServer::default_instance_,
      UpdateServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateServer));
  UpdateServer_UpdateServerStatus_descriptor_ = UpdateServer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UpdateServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateServer_descriptor_, &UpdateServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UpdateServer_2eproto() {
  delete UpdateServer::default_instance_;
  delete UpdateServer_reflection_;
}

void protobuf_AddDesc_UpdateServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_CoreDefines_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UpdateServer.proto\022\020Medusa.CoreProto\032\021"
    "CoreDefines.proto\"\214\002\n\014UpdateServer\022A\n\006St"
    "atus\030\001 \002(\01621.Medusa.CoreProto.UpdateServ"
    "er.UpdateServerStatus\022-\n\nMinVersion\030\002 \002("
    "\0132\031.Medusa.CoreProto.Version\022-\n\nCurVersi"
    "on\030\003 \002(\0132\031.Medusa.CoreProto.Version\022\023\n\013D"
    "escription\030\004 \002(\t\"F\n\022UpdateServerStatus\022\006"
    "\n\002OK\020\000\022\014\n\010Maintain\020\001\022\t\n\005Error\020\002\022\017\n\013DontU"
    "pgrade\020\003", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UpdateServer.proto", &protobuf_RegisterTypes);
  UpdateServer::default_instance_ = new UpdateServer();
  UpdateServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UpdateServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UpdateServer_2eproto {
  StaticDescriptorInitializer_UpdateServer_2eproto() {
    protobuf_AddDesc_UpdateServer_2eproto();
  }
} static_descriptor_initializer_UpdateServer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UpdateServer_UpdateServerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateServer_UpdateServerStatus_descriptor_;
}
bool UpdateServer_UpdateServerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpdateServer_UpdateServerStatus UpdateServer::OK;
const UpdateServer_UpdateServerStatus UpdateServer::Maintain;
const UpdateServer_UpdateServerStatus UpdateServer::Error;
const UpdateServer_UpdateServerStatus UpdateServer::DontUpgrade;
const UpdateServer_UpdateServerStatus UpdateServer::UpdateServerStatus_MIN;
const UpdateServer_UpdateServerStatus UpdateServer::UpdateServerStatus_MAX;
const int UpdateServer::UpdateServerStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpdateServer::kStatusFieldNumber;
const int UpdateServer::kMinVersionFieldNumber;
const int UpdateServer::kCurVersionFieldNumber;
const int UpdateServer::kDescriptionFieldNumber;
#endif  // !_MSC_VER

UpdateServer::UpdateServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateServer::InitAsDefaultInstance() {
  minversion_ = const_cast< ::Medusa::CoreProto::Version*>(&::Medusa::CoreProto::Version::default_instance());
  curversion_ = const_cast< ::Medusa::CoreProto::Version*>(&::Medusa::CoreProto::Version::default_instance());
}

UpdateServer::UpdateServer(const UpdateServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateServer::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  minversion_ = NULL;
  curversion_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateServer::~UpdateServer() {
  SharedDtor();
}

void UpdateServer::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete minversion_;
    delete curversion_;
  }
}

void UpdateServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateServer_descriptor_;
}

const UpdateServer& UpdateServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UpdateServer_2eproto();
  return *default_instance_;
}

UpdateServer* UpdateServer::default_instance_ = NULL;

UpdateServer* UpdateServer::New() const {
  return new UpdateServer;
}

void UpdateServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_minversion()) {
      if (minversion_ != NULL) minversion_->::Medusa::CoreProto::Version::Clear();
    }
    if (has_curversion()) {
      if (curversion_ != NULL) curversion_->::Medusa::CoreProto::Version::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.UpdateServer.UpdateServerStatus Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::UpdateServer_UpdateServerStatus_IsValid(value)) {
            set_status(static_cast< ::Medusa::CoreProto::UpdateServer_UpdateServerStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MinVersion;
        break;
      }

      // required .Medusa.CoreProto.Version MinVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MinVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CurVersion;
        break;
      }

      // required .Medusa.CoreProto.Version CurVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // required string Description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.UpdateServer.UpdateServerStatus Status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required .Medusa.CoreProto.Version MinVersion = 2;
  if (has_minversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->minversion(), output);
  }

  // required .Medusa.CoreProto.Version CurVersion = 3;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->curversion(), output);
  }

  // required string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.UpdateServer.UpdateServerStatus Status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required .Medusa.CoreProto.Version MinVersion = 2;
  if (has_minversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->minversion(), target);
  }

  // required .Medusa.CoreProto.Version CurVersion = 3;
  if (has_curversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->curversion(), target);
  }

  // required string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.UpdateServer.UpdateServerStatus Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .Medusa.CoreProto.Version MinVersion = 2;
    if (has_minversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minversion());
    }

    // required .Medusa.CoreProto.Version CurVersion = 3;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curversion());
    }

    // required string Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateServer::MergeFrom(const UpdateServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_minversion()) {
      mutable_minversion()->::Medusa::CoreProto::Version::MergeFrom(from.minversion());
    }
    if (from.has_curversion()) {
      mutable_curversion()->::Medusa::CoreProto::Version::MergeFrom(from.curversion());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServer::CopyFrom(const UpdateServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UpdateServer::Swap(UpdateServer* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(minversion_, other->minversion_);
    std::swap(curversion_, other->curversion_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateServer_descriptor_;
  metadata.reflection = UpdateServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

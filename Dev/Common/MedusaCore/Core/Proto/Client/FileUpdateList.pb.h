// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileUpdateList.proto

#ifndef PROTOBUF_FileUpdateList_2eproto__INCLUDED
#define PROTOBUF_FileUpdateList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CoreDefines.pb.h"
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FileUpdateList_2eproto();
void protobuf_AssignDesc_FileUpdateList_2eproto();
void protobuf_ShutdownFile_FileUpdateList_2eproto();

class FileUpdateItem;
class FileUpdateList;

// ===================================================================

class FileUpdateItem : public ::google::protobuf::Message {
 public:
  FileUpdateItem();
  virtual ~FileUpdateItem();

  FileUpdateItem(const FileUpdateItem& from);

  inline FileUpdateItem& operator=(const FileUpdateItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileUpdateItem& default_instance();

  void Swap(FileUpdateItem* other);

  // implements Message ----------------------------------------------

  FileUpdateItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileUpdateItem& from);
  void MergeFrom(const FileUpdateItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required string md5 = 2;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 2;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FileUpdateItem)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::std::string* md5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FileUpdateList_2eproto();
  friend void protobuf_AssignDesc_FileUpdateList_2eproto();
  friend void protobuf_ShutdownFile_FileUpdateList_2eproto();

  void InitAsDefaultInstance();
  static FileUpdateItem* default_instance_;
};
// -------------------------------------------------------------------

class FileUpdateList : public ::google::protobuf::Message {
 public:
  FileUpdateList();
  virtual ~FileUpdateList();

  FileUpdateList(const FileUpdateList& from);

  inline FileUpdateList& operator=(const FileUpdateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileUpdateList& default_instance();

  void Swap(FileUpdateList* other);

  // implements Message ----------------------------------------------

  FileUpdateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileUpdateList& from);
  void MergeFrom(const FileUpdateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.Version version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::Medusa::CoreProto::Version& version() const;
  inline ::Medusa::CoreProto::Version* mutable_version();
  inline ::Medusa::CoreProto::Version* release_version();
  inline void set_allocated_version(::Medusa::CoreProto::Version* version);

  // repeated .Medusa.CoreProto.FileUpdateItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Medusa::CoreProto::FileUpdateItem& items(int index) const;
  inline ::Medusa::CoreProto::FileUpdateItem* mutable_items(int index);
  inline ::Medusa::CoreProto::FileUpdateItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileUpdateItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileUpdateItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FileUpdateList)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Medusa::CoreProto::Version* version_;
  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileUpdateItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FileUpdateList_2eproto();
  friend void protobuf_AssignDesc_FileUpdateList_2eproto();
  friend void protobuf_ShutdownFile_FileUpdateList_2eproto();

  void InitAsDefaultInstance();
  static FileUpdateList* default_instance_;
};
// ===================================================================


// ===================================================================

// FileUpdateItem

// required string path = 1;
inline bool FileUpdateItem::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileUpdateItem::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileUpdateItem::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileUpdateItem::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileUpdateItem::path() const {
  return *path_;
}
inline void FileUpdateItem::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileUpdateItem::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileUpdateItem::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileUpdateItem::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileUpdateItem::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileUpdateItem::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string md5 = 2;
inline bool FileUpdateItem::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileUpdateItem::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileUpdateItem::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileUpdateItem::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& FileUpdateItem::md5() const {
  return *md5_;
}
inline void FileUpdateItem::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void FileUpdateItem::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void FileUpdateItem::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileUpdateItem::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* FileUpdateItem::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileUpdateItem::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileUpdateList

// required .Medusa.CoreProto.Version version = 1;
inline bool FileUpdateList::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileUpdateList::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileUpdateList::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileUpdateList::clear_version() {
  if (version_ != NULL) version_->::Medusa::CoreProto::Version::Clear();
  clear_has_version();
}
inline const ::Medusa::CoreProto::Version& FileUpdateList::version() const {
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::Medusa::CoreProto::Version* FileUpdateList::mutable_version() {
  set_has_version();
  if (version_ == NULL) version_ = new ::Medusa::CoreProto::Version;
  return version_;
}
inline ::Medusa::CoreProto::Version* FileUpdateList::release_version() {
  clear_has_version();
  ::Medusa::CoreProto::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline void FileUpdateList::set_allocated_version(::Medusa::CoreProto::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    set_has_version();
  } else {
    clear_has_version();
  }
}

// repeated .Medusa.CoreProto.FileUpdateItem items = 2;
inline int FileUpdateList::items_size() const {
  return items_.size();
}
inline void FileUpdateList::clear_items() {
  items_.Clear();
}
inline const ::Medusa::CoreProto::FileUpdateItem& FileUpdateList::items(int index) const {
  return items_.Get(index);
}
inline ::Medusa::CoreProto::FileUpdateItem* FileUpdateList::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Medusa::CoreProto::FileUpdateItem* FileUpdateList::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileUpdateItem >&
FileUpdateList::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileUpdateItem >*
FileUpdateList::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FileUpdateList_2eproto__INCLUDED

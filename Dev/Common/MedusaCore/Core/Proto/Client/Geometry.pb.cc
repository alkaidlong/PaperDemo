// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* SizeU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeU_reflection_ = NULL;
const ::google::protobuf::Descriptor* SizeF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SizeF_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeU_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeF_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointU_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointF_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleU_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleF_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorF_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorU_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectU_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectF_reflection_ = NULL;
const ::google::protobuf::Descriptor* BorderU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BorderU_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Geometry_2eproto() {
  protobuf_AddDesc_Geometry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Geometry.proto");
  GOOGLE_CHECK(file != NULL);
  SizeU_descriptor_ = file->message_type(0);
  static const int SizeU_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeU, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeU, height_),
  };
  SizeU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SizeU_descriptor_,
      SizeU::default_instance_,
      SizeU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SizeU));
  SizeF_descriptor_ = file->message_type(1);
  static const int SizeF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeF, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeF, height_),
  };
  SizeF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SizeF_descriptor_,
      SizeF::default_instance_,
      SizeF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SizeF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SizeF));
  RangeU_descriptor_ = file->message_type(2);
  static const int RangeU_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeU, minvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeU, maxvalue_),
  };
  RangeU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeU_descriptor_,
      RangeU::default_instance_,
      RangeU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeU));
  RangeF_descriptor_ = file->message_type(3);
  static const int RangeF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeF, minvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeF, maxvalue_),
  };
  RangeF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeF_descriptor_,
      RangeF::default_instance_,
      RangeF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeF));
  PointU_descriptor_ = file->message_type(4);
  static const int PointU_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointU, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointU, y_),
  };
  PointU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointU_descriptor_,
      PointU::default_instance_,
      PointU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointU));
  PointF_descriptor_ = file->message_type(5);
  static const int PointF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, y_),
  };
  PointF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointF_descriptor_,
      PointF::default_instance_,
      PointF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointF));
  ScaleU_descriptor_ = file->message_type(6);
  static const int ScaleU_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleU, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleU, y_),
  };
  ScaleU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScaleU_descriptor_,
      ScaleU::default_instance_,
      ScaleU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScaleU));
  ScaleF_descriptor_ = file->message_type(7);
  static const int ScaleF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleF, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleF, y_),
  };
  ScaleF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScaleF_descriptor_,
      ScaleF::default_instance_,
      ScaleF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScaleF));
  ColorF_descriptor_ = file->message_type(8);
  static const int ColorF_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, a_),
  };
  ColorF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorF_descriptor_,
      ColorF::default_instance_,
      ColorF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorF));
  ColorU_descriptor_ = file->message_type(9);
  static const int ColorU_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, a_),
  };
  ColorU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorU_descriptor_,
      ColorU::default_instance_,
      ColorU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorU));
  RectU_descriptor_ = file->message_type(10);
  static const int RectU_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectU, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectU, size_),
  };
  RectU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectU_descriptor_,
      RectU::default_instance_,
      RectU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectU));
  RectF_descriptor_ = file->message_type(11);
  static const int RectF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, size_),
  };
  RectF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectF_descriptor_,
      RectF::default_instance_,
      RectF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectF));
  BorderU_descriptor_ = file->message_type(12);
  static const int BorderU_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, bottom_),
  };
  BorderU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BorderU_descriptor_,
      BorderU::default_instance_,
      BorderU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorderU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BorderU));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Geometry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SizeU_descriptor_, &SizeU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SizeF_descriptor_, &SizeF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeU_descriptor_, &RangeU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeF_descriptor_, &RangeF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointU_descriptor_, &PointU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointF_descriptor_, &PointF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScaleU_descriptor_, &ScaleU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScaleF_descriptor_, &ScaleF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorF_descriptor_, &ColorF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorU_descriptor_, &ColorU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectU_descriptor_, &RectU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectF_descriptor_, &RectF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BorderU_descriptor_, &BorderU::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Geometry_2eproto() {
  delete SizeU::default_instance_;
  delete SizeU_reflection_;
  delete SizeF::default_instance_;
  delete SizeF_reflection_;
  delete RangeU::default_instance_;
  delete RangeU_reflection_;
  delete RangeF::default_instance_;
  delete RangeF_reflection_;
  delete PointU::default_instance_;
  delete PointU_reflection_;
  delete PointF::default_instance_;
  delete PointF_reflection_;
  delete ScaleU::default_instance_;
  delete ScaleU_reflection_;
  delete ScaleF::default_instance_;
  delete ScaleF_reflection_;
  delete ColorF::default_instance_;
  delete ColorF_reflection_;
  delete ColorU::default_instance_;
  delete ColorU_reflection_;
  delete RectU::default_instance_;
  delete RectU_reflection_;
  delete RectF::default_instance_;
  delete RectF_reflection_;
  delete BorderU::default_instance_;
  delete BorderU_reflection_;
}

void protobuf_AddDesc_Geometry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Geometry.proto\022\020Medusa.CoreProto\"&\n\005Si"
    "zeU\022\r\n\005Width\030\001 \002(\r\022\016\n\006Height\030\002 \002(\r\"&\n\005Si"
    "zeF\022\r\n\005Width\030\001 \002(\002\022\016\n\006Height\030\002 \002(\002\",\n\006Ra"
    "ngeU\022\020\n\010MinValue\030\001 \002(\r\022\020\n\010MaxValue\030\002 \002(\r"
    "\",\n\006RangeF\022\020\n\010MinValue\030\001 \002(\002\022\020\n\010MaxValue"
    "\030\002 \002(\002\"\036\n\006PointU\022\t\n\001X\030\001 \002(\r\022\t\n\001Y\030\002 \002(\r\"\036"
    "\n\006PointF\022\t\n\001X\030\001 \002(\002\022\t\n\001Y\030\002 \002(\002\"\036\n\006ScaleU"
    "\022\t\n\001X\030\001 \002(\r\022\t\n\001Y\030\002 \002(\r\"\036\n\006ScaleF\022\t\n\001X\030\001 "
    "\002(\002\022\t\n\001Y\030\002 \002(\002\"4\n\006ColorF\022\t\n\001R\030\001 \002(\002\022\t\n\001G"
    "\030\002 \002(\002\022\t\n\001B\030\003 \002(\002\022\t\n\001A\030\004 \002(\002\"4\n\006ColorU\022\t"
    "\n\001R\030\001 \002(\r\022\t\n\001G\030\002 \002(\r\022\t\n\001B\030\003 \002(\r\022\t\n\001A\030\004 \002"
    "(\r\"X\n\005RectU\022(\n\006Origin\030\001 \002(\0132\030.Medusa.Cor"
    "eProto.PointU\022%\n\004Size\030\002 \002(\0132\027.Medusa.Cor"
    "eProto.SizeU\"X\n\005RectF\022(\n\006Origin\030\001 \002(\0132\030."
    "Medusa.CoreProto.PointF\022%\n\004Size\030\002 \002(\0132\027."
    "Medusa.CoreProto.SizeF\"C\n\007BorderU\022\014\n\004Lef"
    "t\030\001 \002(\r\022\r\n\005Right\030\002 \002(\r\022\013\n\003Top\030\003 \002(\r\022\016\n\006B"
    "ottom\030\004 \002(\r", 691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Geometry.proto", &protobuf_RegisterTypes);
  SizeU::default_instance_ = new SizeU();
  SizeF::default_instance_ = new SizeF();
  RangeU::default_instance_ = new RangeU();
  RangeF::default_instance_ = new RangeF();
  PointU::default_instance_ = new PointU();
  PointF::default_instance_ = new PointF();
  ScaleU::default_instance_ = new ScaleU();
  ScaleF::default_instance_ = new ScaleF();
  ColorF::default_instance_ = new ColorF();
  ColorU::default_instance_ = new ColorU();
  RectU::default_instance_ = new RectU();
  RectF::default_instance_ = new RectF();
  BorderU::default_instance_ = new BorderU();
  SizeU::default_instance_->InitAsDefaultInstance();
  SizeF::default_instance_->InitAsDefaultInstance();
  RangeU::default_instance_->InitAsDefaultInstance();
  RangeF::default_instance_->InitAsDefaultInstance();
  PointU::default_instance_->InitAsDefaultInstance();
  PointF::default_instance_->InitAsDefaultInstance();
  ScaleU::default_instance_->InitAsDefaultInstance();
  ScaleF::default_instance_->InitAsDefaultInstance();
  ColorF::default_instance_->InitAsDefaultInstance();
  ColorU::default_instance_->InitAsDefaultInstance();
  RectU::default_instance_->InitAsDefaultInstance();
  RectF::default_instance_->InitAsDefaultInstance();
  BorderU::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Geometry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Geometry_2eproto {
  StaticDescriptorInitializer_Geometry_2eproto() {
    protobuf_AddDesc_Geometry_2eproto();
  }
} static_descriptor_initializer_Geometry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SizeU::kWidthFieldNumber;
const int SizeU::kHeightFieldNumber;
#endif  // !_MSC_VER

SizeU::SizeU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SizeU::InitAsDefaultInstance() {
}

SizeU::SizeU(const SizeU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SizeU::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SizeU::~SizeU() {
  SharedDtor();
}

void SizeU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SizeU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeU_descriptor_;
}

const SizeU& SizeU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

SizeU* SizeU::default_instance_ = NULL;

SizeU* SizeU::New() const {
  return new SizeU;
}

void SizeU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SizeU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Height;
        break;
      }

      // required uint32 Height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SizeU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 Height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SizeU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 Height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SizeU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 Height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SizeU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SizeU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SizeU::MergeFrom(const SizeU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SizeU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeU::CopyFrom(const SizeU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SizeU::Swap(SizeU* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SizeU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeU_descriptor_;
  metadata.reflection = SizeU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SizeF::kWidthFieldNumber;
const int SizeF::kHeightFieldNumber;
#endif  // !_MSC_VER

SizeF::SizeF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SizeF::InitAsDefaultInstance() {
}

SizeF::SizeF(const SizeF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SizeF::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SizeF::~SizeF() {
  SharedDtor();
}

void SizeF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SizeF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SizeF_descriptor_;
}

const SizeF& SizeF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

SizeF* SizeF::default_instance_ = NULL;

SizeF* SizeF::New() const {
  return new SizeF;
}

void SizeF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SizeF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Height;
        break;
      }

      // required float Height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SizeF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float Width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float Height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SizeF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float Width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float Height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SizeF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float Width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float Height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SizeF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SizeF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SizeF::MergeFrom(const SizeF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SizeF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeF::CopyFrom(const SizeF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SizeF::Swap(SizeF* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SizeF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SizeF_descriptor_;
  metadata.reflection = SizeF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeU::kMinValueFieldNumber;
const int RangeU::kMaxValueFieldNumber;
#endif  // !_MSC_VER

RangeU::RangeU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeU::InitAsDefaultInstance() {
}

RangeU::RangeU(const RangeU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeU::SharedCtor() {
  _cached_size_ = 0;
  minvalue_ = 0u;
  maxvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeU::~RangeU() {
  SharedDtor();
}

void RangeU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeU_descriptor_;
}

const RangeU& RangeU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

RangeU* RangeU::default_instance_ = NULL;

RangeU* RangeU::New() const {
  return new RangeU;
}

void RangeU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minvalue_ = 0u;
    maxvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MinValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minvalue_)));
          set_has_minvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxValue;
        break;
      }

      // required uint32 MaxValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MinValue = 1;
  if (has_minvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minvalue(), output);
  }

  // required uint32 MaxValue = 2;
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MinValue = 1;
  if (has_minvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minvalue(), target);
  }

  // required uint32 MaxValue = 2;
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MinValue = 1;
    if (has_minvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minvalue());
    }

    // required uint32 MaxValue = 2;
    if (has_maxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeU::MergeFrom(const RangeU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minvalue()) {
      set_minvalue(from.minvalue());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeU::CopyFrom(const RangeU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RangeU::Swap(RangeU* other) {
  if (other != this) {
    std::swap(minvalue_, other->minvalue_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeU_descriptor_;
  metadata.reflection = RangeU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeF::kMinValueFieldNumber;
const int RangeF::kMaxValueFieldNumber;
#endif  // !_MSC_VER

RangeF::RangeF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeF::InitAsDefaultInstance() {
}

RangeF::RangeF(const RangeF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeF::SharedCtor() {
  _cached_size_ = 0;
  minvalue_ = 0;
  maxvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeF::~RangeF() {
  SharedDtor();
}

void RangeF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeF_descriptor_;
}

const RangeF& RangeF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

RangeF* RangeF::default_instance_ = NULL;

RangeF* RangeF::New() const {
  return new RangeF;
}

void RangeF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minvalue_ = 0;
    maxvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float MinValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minvalue_)));
          set_has_minvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_MaxValue;
        break;
      }

      // required float MaxValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float MinValue = 1;
  if (has_minvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->minvalue(), output);
  }

  // required float MaxValue = 2;
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float MinValue = 1;
  if (has_minvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->minvalue(), target);
  }

  // required float MaxValue = 2;
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float MinValue = 1;
    if (has_minvalue()) {
      total_size += 1 + 4;
    }

    // required float MaxValue = 2;
    if (has_maxvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeF::MergeFrom(const RangeF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minvalue()) {
      set_minvalue(from.minvalue());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeF::CopyFrom(const RangeF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RangeF::Swap(RangeF* other) {
  if (other != this) {
    std::swap(minvalue_, other->minvalue_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeF_descriptor_;
  metadata.reflection = RangeF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointU::kXFieldNumber;
const int PointU::kYFieldNumber;
#endif  // !_MSC_VER

PointU::PointU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointU::InitAsDefaultInstance() {
}

PointU::PointU(const PointU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointU::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointU::~PointU() {
  SharedDtor();
}

void PointU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointU_descriptor_;
}

const PointU& PointU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

PointU* PointU::default_instance_ = NULL;

PointU* PointU::New() const {
  return new PointU;
}

void PointU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // required uint32 Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointU::MergeFrom(const PointU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointU::CopyFrom(const PointU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointU::Swap(PointU* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointU_descriptor_;
  metadata.reflection = PointU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointF::kXFieldNumber;
const int PointF::kYFieldNumber;
#endif  // !_MSC_VER

PointF::PointF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointF::InitAsDefaultInstance() {
}

PointF::PointF(const PointF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointF::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointF::~PointF() {
  SharedDtor();
}

void PointF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointF_descriptor_;
}

const PointF& PointF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

PointF* PointF::default_instance_ = NULL;

PointF* PointF::New() const {
  return new PointF;
}

void PointF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // required float Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float Y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointF::MergeFrom(const PointF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointF::CopyFrom(const PointF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointF::Swap(PointF* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointF_descriptor_;
  metadata.reflection = PointF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScaleU::kXFieldNumber;
const int ScaleU::kYFieldNumber;
#endif  // !_MSC_VER

ScaleU::ScaleU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScaleU::InitAsDefaultInstance() {
}

ScaleU::ScaleU(const ScaleU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScaleU::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScaleU::~ScaleU() {
  SharedDtor();
}

void ScaleU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScaleU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleU_descriptor_;
}

const ScaleU& ScaleU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

ScaleU* ScaleU::default_instance_ = NULL;

ScaleU* ScaleU::New() const {
  return new ScaleU;
}

void ScaleU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScaleU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // required uint32 Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScaleU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScaleU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScaleU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScaleU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScaleU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScaleU::MergeFrom(const ScaleU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScaleU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleU::CopyFrom(const ScaleU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScaleU::Swap(ScaleU* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScaleU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleU_descriptor_;
  metadata.reflection = ScaleU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScaleF::kXFieldNumber;
const int ScaleF::kYFieldNumber;
#endif  // !_MSC_VER

ScaleF::ScaleF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScaleF::InitAsDefaultInstance() {
}

ScaleF::ScaleF(const ScaleF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScaleF::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScaleF::~ScaleF() {
  SharedDtor();
}

void ScaleF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScaleF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleF_descriptor_;
}

const ScaleF& ScaleF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

ScaleF* ScaleF::default_instance_ = NULL;

ScaleF* ScaleF::New() const {
  return new ScaleF;
}

void ScaleF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScaleF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // required float Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScaleF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScaleF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScaleF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float X = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float Y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScaleF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScaleF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScaleF::MergeFrom(const ScaleF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScaleF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleF::CopyFrom(const ScaleF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScaleF::Swap(ScaleF* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScaleF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleF_descriptor_;
  metadata.reflection = ScaleF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorF::kRFieldNumber;
const int ColorF::kGFieldNumber;
const int ColorF::kBFieldNumber;
const int ColorF::kAFieldNumber;
#endif  // !_MSC_VER

ColorF::ColorF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColorF::InitAsDefaultInstance() {
}

ColorF::ColorF(const ColorF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColorF::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorF::~ColorF() {
  SharedDtor();
}

void ColorF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorF_descriptor_;
}

const ColorF& ColorF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

ColorF* ColorF::default_instance_ = NULL;

ColorF* ColorF::New() const {
  return new ColorF;
}

void ColorF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float R = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_G;
        break;
      }

      // required float G = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_B;
        break;
      }

      // required float B = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_A;
        break;
      }

      // required float A = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColorF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float R = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // required float G = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // required float B = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // required float A = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColorF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float R = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // required float G = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // required float B = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // required float A = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColorF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float R = 1;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // required float G = 2;
    if (has_g()) {
      total_size += 1 + 4;
    }

    // required float B = 3;
    if (has_b()) {
      total_size += 1 + 4;
    }

    // required float A = 4;
    if (has_a()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorF::MergeFrom(const ColorF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorF::CopyFrom(const ColorF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorF::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ColorF::Swap(ColorF* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorF_descriptor_;
  metadata.reflection = ColorF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColorU::kRFieldNumber;
const int ColorU::kGFieldNumber;
const int ColorU::kBFieldNumber;
const int ColorU::kAFieldNumber;
#endif  // !_MSC_VER

ColorU::ColorU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColorU::InitAsDefaultInstance() {
}

ColorU::ColorU(const ColorU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColorU::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  a_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorU::~ColorU() {
  SharedDtor();
}

void ColorU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorU_descriptor_;
}

const ColorU& ColorU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

ColorU* ColorU::default_instance_ = NULL;

ColorU* ColorU::New() const {
  return new ColorU;
}

void ColorU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0u;
    g_ = 0u;
    b_ = 0u;
    a_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 R = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_G;
        break;
      }

      // required uint32 G = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_B;
        break;
      }

      // required uint32 B = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_A;
        break;
      }

      // required uint32 A = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColorU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 R = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // required uint32 G = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // required uint32 B = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  // required uint32 A = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColorU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 R = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // required uint32 G = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // required uint32 B = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  // required uint32 A = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColorU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 R = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // required uint32 G = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // required uint32 B = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

    // required uint32 A = 4;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorU::MergeFrom(const ColorU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorU::CopyFrom(const ColorU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorU::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ColorU::Swap(ColorU* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorU_descriptor_;
  metadata.reflection = ColorU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectU::kOriginFieldNumber;
const int RectU::kSizeFieldNumber;
#endif  // !_MSC_VER

RectU::RectU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RectU::InitAsDefaultInstance() {
  origin_ = const_cast< ::Medusa::CoreProto::PointU*>(&::Medusa::CoreProto::PointU::default_instance());
  size_ = const_cast< ::Medusa::CoreProto::SizeU*>(&::Medusa::CoreProto::SizeU::default_instance());
}

RectU::RectU(const RectU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RectU::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectU::~RectU() {
  SharedDtor();
}

void RectU::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete size_;
  }
}

void RectU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectU_descriptor_;
}

const RectU& RectU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

RectU* RectU::default_instance_ = NULL;

RectU* RectU::New() const {
  return new RectU;
}

void RectU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Medusa::CoreProto::PointU::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeU::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.PointU Origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeU Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RectU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.PointU Origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RectU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.PointU Origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // required .Medusa.CoreProto.SizeU Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RectU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.PointU Origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .Medusa.CoreProto.SizeU Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectU::MergeFrom(const RectU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::Medusa::CoreProto::PointU::MergeFrom(from.origin());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeU::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectU::CopyFrom(const RectU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void RectU::Swap(RectU* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectU_descriptor_;
  metadata.reflection = RectU_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectF::kOriginFieldNumber;
const int RectF::kSizeFieldNumber;
#endif  // !_MSC_VER

RectF::RectF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RectF::InitAsDefaultInstance() {
  origin_ = const_cast< ::Medusa::CoreProto::PointF*>(&::Medusa::CoreProto::PointF::default_instance());
  size_ = const_cast< ::Medusa::CoreProto::SizeF*>(&::Medusa::CoreProto::SizeF::default_instance());
}

RectF::RectF(const RectF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RectF::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectF::~RectF() {
  SharedDtor();
}

void RectF::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete size_;
  }
}

void RectF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectF_descriptor_;
}

const RectF& RectF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

RectF* RectF::default_instance_ = NULL;

RectF* RectF::New() const {
  return new RectF;
}

void RectF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::Medusa::CoreProto::PointF::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::Medusa::CoreProto::SizeF::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.PointF Origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Size;
        break;
      }

      // required .Medusa.CoreProto.SizeF Size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RectF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.PointF Origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // required .Medusa.CoreProto.SizeF Size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RectF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.PointF Origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // required .Medusa.CoreProto.SizeF Size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RectF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.PointF Origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .Medusa.CoreProto.SizeF Size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectF::MergeFrom(const RectF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::Medusa::CoreProto::PointF::MergeFrom(from.origin());
    }
    if (from.has_size()) {
      mutable_size()->::Medusa::CoreProto::SizeF::MergeFrom(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectF::CopyFrom(const RectF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void RectF::Swap(RectF* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectF_descriptor_;
  metadata.reflection = RectF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BorderU::kLeftFieldNumber;
const int BorderU::kRightFieldNumber;
const int BorderU::kTopFieldNumber;
const int BorderU::kBottomFieldNumber;
#endif  // !_MSC_VER

BorderU::BorderU()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BorderU::InitAsDefaultInstance() {
}

BorderU::BorderU(const BorderU& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BorderU::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0u;
  right_ = 0u;
  top_ = 0u;
  bottom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BorderU::~BorderU() {
  SharedDtor();
}

void BorderU::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BorderU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BorderU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BorderU_descriptor_;
}

const BorderU& BorderU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Geometry_2eproto();
  return *default_instance_;
}

BorderU* BorderU::default_instance_ = NULL;

BorderU* BorderU::New() const {
  return new BorderU;
}

void BorderU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0u;
    right_ = 0u;
    top_ = 0u;
    bottom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BorderU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Right;
        break;
      }

      // required uint32 Right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Top;
        break;
      }

      // required uint32 Top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Bottom;
        break;
      }

      // required uint32 Bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BorderU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }

  // required uint32 Right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->right(), output);
  }

  // required uint32 Top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top(), output);
  }

  // required uint32 Bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BorderU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }

  // required uint32 Right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->right(), target);
  }

  // required uint32 Top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top(), target);
  }

  // required uint32 Bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BorderU::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }

    // required uint32 Right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }

    // required uint32 Top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }

    // required uint32 Bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BorderU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BorderU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BorderU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BorderU::MergeFrom(const BorderU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BorderU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BorderU::CopyFrom(const BorderU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorderU::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BorderU::Swap(BorderU* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BorderU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BorderU_descriptor_;
  metadata.reflection = BorderU_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

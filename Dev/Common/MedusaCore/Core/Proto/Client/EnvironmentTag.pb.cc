// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnvironmentTag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EnvironmentTag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* EnvironmentTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnvironmentTag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentTag_Versions_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentTag_Devices_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnvironmentTag_Languages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EnvironmentTag_2eproto() {
  protobuf_AddDesc_EnvironmentTag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EnvironmentTag.proto");
  GOOGLE_CHECK(file != NULL);
  EnvironmentTag_descriptor_ = file->message_type(0);
  static const int EnvironmentTag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentTag, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentTag, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentTag, language_),
  };
  EnvironmentTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnvironmentTag_descriptor_,
      EnvironmentTag::default_instance_,
      EnvironmentTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnvironmentTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnvironmentTag));
  EnvironmentTag_Versions_descriptor_ = EnvironmentTag_descriptor_->enum_type(0);
  EnvironmentTag_Devices_descriptor_ = EnvironmentTag_descriptor_->enum_type(1);
  EnvironmentTag_Languages_descriptor_ = EnvironmentTag_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EnvironmentTag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnvironmentTag_descriptor_, &EnvironmentTag::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EnvironmentTag_2eproto() {
  delete EnvironmentTag::default_instance_;
  delete EnvironmentTag_reflection_;
}

void protobuf_AddDesc_EnvironmentTag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_Geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024EnvironmentTag.proto\022\020Medusa.CoreProto"
    "\032\016Geometry.proto\"\276\002\n\016EnvironmentTag\022:\n\007V"
    "ersion\030\001 \002(\0162).Medusa.CoreProto.Environm"
    "entTag.Versions\0228\n\006Device\030\002 \002(\0162(.Medusa"
    ".CoreProto.EnvironmentTag.Devices\022<\n\010Lan"
    "guage\030\003 \002(\0162*.Medusa.CoreProto.Environme"
    "ntTag.Languages\"\036\n\010Versions\022\010\n\004main\020\001\022\010\n"
    "\004free\020\002\"7\n\007Devices\022\006\n\002sd\020\001\022\006\n\002hd\020\002\022\007\n\003hd"
    "5\020\004\022\010\n\004ipad\020\010\022\t\n\005ipad3\020\020\"\037\n\tLanguages\022\010\n"
    "\004enus\020\001\022\010\n\004zhcn\020\002", 377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EnvironmentTag.proto", &protobuf_RegisterTypes);
  EnvironmentTag::default_instance_ = new EnvironmentTag();
  EnvironmentTag::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EnvironmentTag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EnvironmentTag_2eproto {
  StaticDescriptorInitializer_EnvironmentTag_2eproto() {
    protobuf_AddDesc_EnvironmentTag_2eproto();
  }
} static_descriptor_initializer_EnvironmentTag_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EnvironmentTag_Versions_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentTag_Versions_descriptor_;
}
bool EnvironmentTag_Versions_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EnvironmentTag_Versions EnvironmentTag::main;
const EnvironmentTag_Versions EnvironmentTag::free;
const EnvironmentTag_Versions EnvironmentTag::Versions_MIN;
const EnvironmentTag_Versions EnvironmentTag::Versions_MAX;
const int EnvironmentTag::Versions_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EnvironmentTag_Devices_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentTag_Devices_descriptor_;
}
bool EnvironmentTag_Devices_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EnvironmentTag_Devices EnvironmentTag::sd;
const EnvironmentTag_Devices EnvironmentTag::hd;
const EnvironmentTag_Devices EnvironmentTag::hd5;
const EnvironmentTag_Devices EnvironmentTag::ipad;
const EnvironmentTag_Devices EnvironmentTag::ipad3;
const EnvironmentTag_Devices EnvironmentTag::Devices_MIN;
const EnvironmentTag_Devices EnvironmentTag::Devices_MAX;
const int EnvironmentTag::Devices_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EnvironmentTag_Languages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentTag_Languages_descriptor_;
}
bool EnvironmentTag_Languages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EnvironmentTag_Languages EnvironmentTag::enus;
const EnvironmentTag_Languages EnvironmentTag::zhcn;
const EnvironmentTag_Languages EnvironmentTag::Languages_MIN;
const EnvironmentTag_Languages EnvironmentTag::Languages_MAX;
const int EnvironmentTag::Languages_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EnvironmentTag::kVersionFieldNumber;
const int EnvironmentTag::kDeviceFieldNumber;
const int EnvironmentTag::kLanguageFieldNumber;
#endif  // !_MSC_VER

EnvironmentTag::EnvironmentTag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnvironmentTag::InitAsDefaultInstance() {
}

EnvironmentTag::EnvironmentTag(const EnvironmentTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnvironmentTag::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  device_ = 1;
  language_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvironmentTag::~EnvironmentTag() {
  SharedDtor();
}

void EnvironmentTag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnvironmentTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvironmentTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnvironmentTag_descriptor_;
}

const EnvironmentTag& EnvironmentTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnvironmentTag_2eproto();
  return *default_instance_;
}

EnvironmentTag* EnvironmentTag::default_instance_ = NULL;

EnvironmentTag* EnvironmentTag::New() const {
  return new EnvironmentTag;
}

void EnvironmentTag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    device_ = 1;
    language_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnvironmentTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::EnvironmentTag_Versions_IsValid(value)) {
            set_version(static_cast< ::Medusa::CoreProto::EnvironmentTag_Versions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Device;
        break;
      }

      // required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Device:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::EnvironmentTag_Devices_IsValid(value)) {
            set_device(static_cast< ::Medusa::CoreProto::EnvironmentTag_Devices >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Language;
        break;
      }

      // required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Language:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::EnvironmentTag_Languages_IsValid(value)) {
            set_language(static_cast< ::Medusa::CoreProto::EnvironmentTag_Languages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnvironmentTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }

  // required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device(), output);
  }

  // required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnvironmentTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->version(), target);
  }

  // required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device(), target);
  }

  // required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnvironmentTag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.EnvironmentTag.Versions Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

    // required .Medusa.CoreProto.EnvironmentTag.Devices Device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
    }

    // required .Medusa.CoreProto.EnvironmentTag.Languages Language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvironmentTag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnvironmentTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnvironmentTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnvironmentTag::MergeFrom(const EnvironmentTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnvironmentTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentTag::CopyFrom(const EnvironmentTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentTag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnvironmentTag::Swap(EnvironmentTag* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(device_, other->device_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnvironmentTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnvironmentTag_descriptor_;
  metadata.reflection = EnvironmentTag_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

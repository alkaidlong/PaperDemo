// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FuckyString.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FuckyString.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* FuckyStringNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuckyStringNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuckyString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuckyString_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FuckyString_2eproto() {
  protobuf_AddDesc_FuckyString_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FuckyString.proto");
  GOOGLE_CHECK(file != NULL);
  FuckyStringNode_descriptor_ = file->message_type(0);
  static const int FuckyStringNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyStringNode, charval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyStringNode, isfucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyStringNode, childs_),
  };
  FuckyStringNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuckyStringNode_descriptor_,
      FuckyStringNode::default_instance_,
      FuckyStringNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyStringNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyStringNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuckyStringNode));
  FuckyString_descriptor_ = file->message_type(1);
  static const int FuckyString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyString, rootnodes_),
  };
  FuckyString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuckyString_descriptor_,
      FuckyString::default_instance_,
      FuckyString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuckyString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuckyString));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FuckyString_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuckyStringNode_descriptor_, &FuckyStringNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuckyString_descriptor_, &FuckyString::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FuckyString_2eproto() {
  delete FuckyStringNode::default_instance_;
  delete FuckyStringNode_reflection_;
  delete FuckyString::default_instance_;
  delete FuckyString_reflection_;
}

void protobuf_AddDesc_FuckyString_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FuckyString.proto\022\020Medusa.CoreProto\"f\n"
    "\017FuckyStringNode\022\017\n\007charVal\030\001 \002(\005\022\017\n\007isF"
    "ucky\030\002 \002(\010\0221\n\006childs\030\003 \003(\0132!.Medusa.Core"
    "Proto.FuckyStringNode\"C\n\013FuckyString\0224\n\t"
    "rootNodes\030\001 \003(\0132!.Medusa.CoreProto.Fucky"
    "StringNode", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FuckyString.proto", &protobuf_RegisterTypes);
  FuckyStringNode::default_instance_ = new FuckyStringNode();
  FuckyString::default_instance_ = new FuckyString();
  FuckyStringNode::default_instance_->InitAsDefaultInstance();
  FuckyString::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FuckyString_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FuckyString_2eproto {
  StaticDescriptorInitializer_FuckyString_2eproto() {
    protobuf_AddDesc_FuckyString_2eproto();
  }
} static_descriptor_initializer_FuckyString_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FuckyStringNode::kCharValFieldNumber;
const int FuckyStringNode::kIsFuckyFieldNumber;
const int FuckyStringNode::kChildsFieldNumber;
#endif  // !_MSC_VER

FuckyStringNode::FuckyStringNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuckyStringNode::InitAsDefaultInstance() {
}

FuckyStringNode::FuckyStringNode(const FuckyStringNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuckyStringNode::SharedCtor() {
  _cached_size_ = 0;
  charval_ = 0;
  isfucky_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuckyStringNode::~FuckyStringNode() {
  SharedDtor();
}

void FuckyStringNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuckyStringNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuckyStringNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuckyStringNode_descriptor_;
}

const FuckyStringNode& FuckyStringNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuckyString_2eproto();
  return *default_instance_;
}

FuckyStringNode* FuckyStringNode::default_instance_ = NULL;

FuckyStringNode* FuckyStringNode::New() const {
  return new FuckyStringNode;
}

void FuckyStringNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charval_ = 0;
    isfucky_ = false;
  }
  childs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuckyStringNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 charVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charval_)));
          set_has_charval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFucky;
        break;
      }

      // required bool isFucky = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfucky_)));
          set_has_isfucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_childs;
        break;
      }

      // repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_childs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuckyStringNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 charVal = 1;
  if (has_charval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charval(), output);
  }

  // required bool isFucky = 2;
  if (has_isfucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfucky(), output);
  }

  // repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
  for (int i = 0; i < this->childs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->childs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuckyStringNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 charVal = 1;
  if (has_charval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charval(), target);
  }

  // required bool isFucky = 2;
  if (has_isfucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfucky(), target);
  }

  // repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
  for (int i = 0; i < this->childs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->childs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuckyStringNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 charVal = 1;
    if (has_charval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charval());
    }

    // required bool isFucky = 2;
    if (has_isfucky()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Medusa.CoreProto.FuckyStringNode childs = 3;
  total_size += 1 * this->childs_size();
  for (int i = 0; i < this->childs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuckyStringNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuckyStringNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuckyStringNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuckyStringNode::MergeFrom(const FuckyStringNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  childs_.MergeFrom(from.childs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charval()) {
      set_charval(from.charval());
    }
    if (from.has_isfucky()) {
      set_isfucky(from.isfucky());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuckyStringNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuckyStringNode::CopyFrom(const FuckyStringNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuckyStringNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < childs_size(); i++) {
    if (!this->childs(i).IsInitialized()) return false;
  }
  return true;
}

void FuckyStringNode::Swap(FuckyStringNode* other) {
  if (other != this) {
    std::swap(charval_, other->charval_);
    std::swap(isfucky_, other->isfucky_);
    childs_.Swap(&other->childs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuckyStringNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuckyStringNode_descriptor_;
  metadata.reflection = FuckyStringNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuckyString::kRootNodesFieldNumber;
#endif  // !_MSC_VER

FuckyString::FuckyString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuckyString::InitAsDefaultInstance() {
}

FuckyString::FuckyString(const FuckyString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuckyString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuckyString::~FuckyString() {
  SharedDtor();
}

void FuckyString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuckyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuckyString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuckyString_descriptor_;
}

const FuckyString& FuckyString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuckyString_2eproto();
  return *default_instance_;
}

FuckyString* FuckyString::default_instance_ = NULL;

FuckyString* FuckyString::New() const {
  return new FuckyString;
}

void FuckyString::Clear() {
  rootnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuckyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rootNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rootnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rootNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuckyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
  for (int i = 0; i < this->rootnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rootnodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuckyString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
  for (int i = 0; i < this->rootnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rootnodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuckyString::ByteSize() const {
  int total_size = 0;

  // repeated .Medusa.CoreProto.FuckyStringNode rootNodes = 1;
  total_size += 1 * this->rootnodes_size();
  for (int i = 0; i < this->rootnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rootnodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuckyString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuckyString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuckyString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuckyString::MergeFrom(const FuckyString& from) {
  GOOGLE_CHECK_NE(&from, this);
  rootnodes_.MergeFrom(from.rootnodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuckyString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuckyString::CopyFrom(const FuckyString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuckyString::IsInitialized() const {

  for (int i = 0; i < rootnodes_size(); i++) {
    if (!this->rootnodes(i).IsInitialized()) return false;
  }
  return true;
}

void FuckyString::Swap(FuckyString* other) {
  if (other != this) {
    rootnodes_.Swap(&other->rootnodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuckyString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuckyString_descriptor_;
  metadata.reflection = FuckyString_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

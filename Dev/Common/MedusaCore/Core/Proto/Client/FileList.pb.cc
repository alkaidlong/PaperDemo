// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FileList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* FileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileList_FileCoder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileList_FileCoder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FileList_FileCoder_FileCoderType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FileList_FileItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileList_FileItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FileList_2eproto() {
  protobuf_AddDesc_FileList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FileList.proto");
  GOOGLE_CHECK(file != NULL);
  FileList_descriptor_ = file->message_type(0);
  static const int FileList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList, curversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList, dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList, files_),
  };
  FileList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileList_descriptor_,
      FileList::default_instance_,
      FileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileList));
  FileList_FileCoder_descriptor_ = FileList_descriptor_->nested_type(0);
  static const int FileList_FileCoder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileCoder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileCoder, info_),
  };
  FileList_FileCoder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileList_FileCoder_descriptor_,
      FileList_FileCoder::default_instance_,
      FileList_FileCoder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileCoder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileCoder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileList_FileCoder));
  FileList_FileCoder_FileCoderType_descriptor_ = FileList_FileCoder_descriptor_->enum_type(0);
  FileList_FileItem_descriptor_ = FileList_descriptor_->nested_type(1);
  static const int FileList_FileItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, dirindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, coders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, originalname_),
  };
  FileList_FileItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileList_FileItem_descriptor_,
      FileList_FileItem::default_instance_,
      FileList_FileItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileList_FileItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileList_FileItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FileList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileList_descriptor_, &FileList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileList_FileCoder_descriptor_, &FileList_FileCoder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileList_FileItem_descriptor_, &FileList_FileItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FileList_2eproto() {
  delete FileList::default_instance_;
  delete FileList_reflection_;
  delete FileList_FileCoder::default_instance_;
  delete FileList_FileCoder_reflection_;
  delete FileList_FileItem::default_instance_;
  delete FileList_FileItem_reflection_;
}

void protobuf_AddDesc_FileList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_CoreDefines_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016FileList.proto\022\020Medusa.CoreProto\032\021Core"
    "Defines.proto\"\302\003\n\010FileList\022-\n\nCurVersion"
    "\030\001 \002(\0132\031.Medusa.CoreProto.Version\022\014\n\004Dir"
    "s\030\002 \003(\t\0222\n\005Files\030\003 \003(\0132#.Medusa.CoreProt"
    "o.FileList.FileItem\032\256\001\n\tFileCoder\022@\n\004Typ"
    "e\030\001 \002(\01622.Medusa.CoreProto.FileList.File"
    "Coder.FileCoderType\022\014\n\004Info\030\002 \001(\r\"Q\n\rFil"
    "eCoderType\022\017\n\013LZMAEncoder\020\001\022\016\n\nXOREncode"
    "r\020\002\022\017\n\013LZMADecoder\020e\022\016\n\nXORDecoder\020f\032\223\001\n"
    "\010FileItem\022\016\n\006FileId\030\001 \002(\r\022\020\n\010DirIndex\030\002 "
    "\002(\005\022\014\n\004Name\030\003 \002(\t\022\013\n\003MD5\030\004 \002(\t\0224\n\006Coders"
    "\030\005 \003(\0132$.Medusa.CoreProto.FileList.FileC"
    "oder\022\024\n\014OriginalName\030\006 \001(\t", 506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FileList.proto", &protobuf_RegisterTypes);
  FileList::default_instance_ = new FileList();
  FileList_FileCoder::default_instance_ = new FileList_FileCoder();
  FileList_FileItem::default_instance_ = new FileList_FileItem();
  FileList::default_instance_->InitAsDefaultInstance();
  FileList_FileCoder::default_instance_->InitAsDefaultInstance();
  FileList_FileItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FileList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FileList_2eproto {
  StaticDescriptorInitializer_FileList_2eproto() {
    protobuf_AddDesc_FileList_2eproto();
  }
} static_descriptor_initializer_FileList_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FileList_FileCoder_FileCoderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileList_FileCoder_FileCoderType_descriptor_;
}
bool FileList_FileCoder_FileCoderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FileList_FileCoder_FileCoderType FileList_FileCoder::LZMAEncoder;
const FileList_FileCoder_FileCoderType FileList_FileCoder::XOREncoder;
const FileList_FileCoder_FileCoderType FileList_FileCoder::LZMADecoder;
const FileList_FileCoder_FileCoderType FileList_FileCoder::XORDecoder;
const FileList_FileCoder_FileCoderType FileList_FileCoder::FileCoderType_MIN;
const FileList_FileCoder_FileCoderType FileList_FileCoder::FileCoderType_MAX;
const int FileList_FileCoder::FileCoderType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FileList_FileCoder::kTypeFieldNumber;
const int FileList_FileCoder::kInfoFieldNumber;
#endif  // !_MSC_VER

FileList_FileCoder::FileList_FileCoder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileList_FileCoder::InitAsDefaultInstance() {
}

FileList_FileCoder::FileList_FileCoder(const FileList_FileCoder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileList_FileCoder::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  info_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileList_FileCoder::~FileList_FileCoder() {
  SharedDtor();
}

void FileList_FileCoder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileList_FileCoder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileList_FileCoder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileList_FileCoder_descriptor_;
}

const FileList_FileCoder& FileList_FileCoder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileList_2eproto();
  return *default_instance_;
}

FileList_FileCoder* FileList_FileCoder::default_instance_ = NULL;

FileList_FileCoder* FileList_FileCoder::New() const {
  return new FileList_FileCoder;
}

void FileList_FileCoder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    info_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileList_FileCoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::FileList_FileCoder_FileCoderType_IsValid(value)) {
            set_type(static_cast< ::Medusa::CoreProto::FileList_FileCoder_FileCoderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Info;
        break;
      }

      // optional uint32 Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileList_FileCoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 Info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileList_FileCoder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 Info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileList_FileCoder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList_FileCoder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileList_FileCoder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileList_FileCoder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileList_FileCoder::MergeFrom(const FileList_FileCoder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileList_FileCoder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileList_FileCoder::CopyFrom(const FileList_FileCoder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList_FileCoder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FileList_FileCoder::Swap(FileList_FileCoder* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileList_FileCoder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileList_FileCoder_descriptor_;
  metadata.reflection = FileList_FileCoder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileList_FileItem::kFileIdFieldNumber;
const int FileList_FileItem::kDirIndexFieldNumber;
const int FileList_FileItem::kNameFieldNumber;
const int FileList_FileItem::kMD5FieldNumber;
const int FileList_FileItem::kCodersFieldNumber;
const int FileList_FileItem::kOriginalNameFieldNumber;
#endif  // !_MSC_VER

FileList_FileItem::FileList_FileItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileList_FileItem::InitAsDefaultInstance() {
}

FileList_FileItem::FileList_FileItem(const FileList_FileItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileList_FileItem::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  dirindex_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  originalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileList_FileItem::~FileList_FileItem() {
  SharedDtor();
}

void FileList_FileItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (originalname_ != &::google::protobuf::internal::kEmptyString) {
    delete originalname_;
  }
  if (this != default_instance_) {
  }
}

void FileList_FileItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileList_FileItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileList_FileItem_descriptor_;
}

const FileList_FileItem& FileList_FileItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileList_2eproto();
  return *default_instance_;
}

FileList_FileItem* FileList_FileItem::default_instance_ = NULL;

FileList_FileItem* FileList_FileItem::New() const {
  return new FileList_FileItem;
}

void FileList_FileItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    dirindex_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    if (has_originalname()) {
      if (originalname_ != &::google::protobuf::internal::kEmptyString) {
        originalname_->clear();
      }
    }
  }
  coders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileList_FileItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DirIndex;
        break;
      }

      // required int32 DirIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DirIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dirindex_)));
          set_has_dirindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // required string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MD5;
        break;
      }

      // required string MD5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Coders;
        break;
      }

      // repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Coders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Coders;
        if (input->ExpectTag(50)) goto parse_OriginalName;
        break;
      }

      // optional string OriginalName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OriginalName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originalname().data(), this->originalname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileList_FileItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 FileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fileid(), output);
  }

  // required int32 DirIndex = 2;
  if (has_dirindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dirindex(), output);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string MD5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->md5(), output);
  }

  // repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
  for (int i = 0; i < this->coders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coders(i), output);
  }

  // optional string OriginalName = 6;
  if (has_originalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalname().data(), this->originalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->originalname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileList_FileItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 FileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fileid(), target);
  }

  // required int32 DirIndex = 2;
  if (has_dirindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dirindex(), target);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string MD5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  // repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
  for (int i = 0; i < this->coders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->coders(i), target);
  }

  // optional string OriginalName = 6;
  if (has_originalname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalname().data(), this->originalname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->originalname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileList_FileItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fileid());
    }

    // required int32 DirIndex = 2;
    if (has_dirindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dirindex());
    }

    // required string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string MD5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string OriginalName = 6;
    if (has_originalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originalname());
    }

  }
  // repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
  total_size += 1 * this->coders_size();
  for (int i = 0; i < this->coders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList_FileItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileList_FileItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileList_FileItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileList_FileItem::MergeFrom(const FileList_FileItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  coders_.MergeFrom(from.coders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_dirindex()) {
      set_dirindex(from.dirindex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_originalname()) {
      set_originalname(from.originalname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileList_FileItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileList_FileItem::CopyFrom(const FileList_FileItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList_FileItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < coders_size(); i++) {
    if (!this->coders(i).IsInitialized()) return false;
  }
  return true;
}

void FileList_FileItem::Swap(FileList_FileItem* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(dirindex_, other->dirindex_);
    std::swap(name_, other->name_);
    std::swap(md5_, other->md5_);
    coders_.Swap(&other->coders_);
    std::swap(originalname_, other->originalname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileList_FileItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileList_FileItem_descriptor_;
  metadata.reflection = FileList_FileItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FileList::kCurVersionFieldNumber;
const int FileList::kDirsFieldNumber;
const int FileList::kFilesFieldNumber;
#endif  // !_MSC_VER

FileList::FileList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileList::InitAsDefaultInstance() {
  curversion_ = const_cast< ::Medusa::CoreProto::Version*>(&::Medusa::CoreProto::Version::default_instance());
}

FileList::FileList(const FileList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileList::SharedCtor() {
  _cached_size_ = 0;
  curversion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileList::~FileList() {
  SharedDtor();
}

void FileList::SharedDtor() {
  if (this != default_instance_) {
    delete curversion_;
  }
}

void FileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileList_descriptor_;
}

const FileList& FileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileList_2eproto();
  return *default_instance_;
}

FileList* FileList::default_instance_ = NULL;

FileList* FileList::New() const {
  return new FileList;
}

void FileList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_curversion()) {
      if (curversion_ != NULL) curversion_->::Medusa::CoreProto::Version::Clear();
    }
  }
  dirs_.Clear();
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.Version CurVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Dirs;
        break;
      }

      // repeated string Dirs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dirs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dirs(this->dirs_size() - 1).data(),
            this->dirs(this->dirs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Dirs;
        if (input->ExpectTag(26)) goto parse_Files;
        break;
      }

      // repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.Version CurVersion = 1;
  if (has_curversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curversion(), output);
  }

  // repeated string Dirs = 2;
  for (int i = 0; i < this->dirs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dirs(i).data(), this->dirs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dirs(i), output);
  }

  // repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.Version CurVersion = 1;
  if (has_curversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curversion(), target);
  }

  // repeated string Dirs = 2;
  for (int i = 0; i < this->dirs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirs(i).data(), this->dirs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->dirs(i), target);
  }

  // repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.Version CurVersion = 1;
    if (has_curversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curversion());
    }

  }
  // repeated string Dirs = 2;
  total_size += 1 * this->dirs_size();
  for (int i = 0; i < this->dirs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dirs(i));
  }

  // repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileList::MergeFrom(const FileList& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirs_.MergeFrom(from.dirs_);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curversion()) {
      mutable_curversion()->::Medusa::CoreProto::Version::MergeFrom(from.curversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileList::CopyFrom(const FileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  return true;
}

void FileList::Swap(FileList* other) {
  if (other != this) {
    std::swap(curversion_, other->curversion_);
    dirs_.Swap(&other->dirs_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileList_descriptor_;
  metadata.reflection = FileList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

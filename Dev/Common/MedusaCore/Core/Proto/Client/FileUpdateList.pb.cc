// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileUpdateList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FileUpdateList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* FileUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileUpdateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileUpdateList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FileUpdateList_2eproto() {
  protobuf_AddDesc_FileUpdateList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FileUpdateList.proto");
  GOOGLE_CHECK(file != NULL);
  FileUpdateItem_descriptor_ = file->message_type(0);
  static const int FileUpdateItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateItem, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateItem, md5_),
  };
  FileUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileUpdateItem_descriptor_,
      FileUpdateItem::default_instance_,
      FileUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileUpdateItem));
  FileUpdateList_descriptor_ = file->message_type(1);
  static const int FileUpdateList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateList, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateList, items_),
  };
  FileUpdateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileUpdateList_descriptor_,
      FileUpdateList::default_instance_,
      FileUpdateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileUpdateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileUpdateList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FileUpdateList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileUpdateItem_descriptor_, &FileUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileUpdateList_descriptor_, &FileUpdateList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FileUpdateList_2eproto() {
  delete FileUpdateItem::default_instance_;
  delete FileUpdateItem_reflection_;
  delete FileUpdateList::default_instance_;
  delete FileUpdateList_reflection_;
}

void protobuf_AddDesc_FileUpdateList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Medusa::CoreProto::protobuf_AddDesc_CoreDefines_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FileUpdateList.proto\022\020Medusa.CoreProto"
    "\032\021CoreDefines.proto\"+\n\016FileUpdateItem\022\014\n"
    "\004path\030\001 \002(\t\022\013\n\003md5\030\002 \002(\t\"m\n\016FileUpdateLi"
    "st\022*\n\007version\030\001 \002(\0132\031.Medusa.CoreProto.V"
    "ersion\022/\n\005items\030\002 \003(\0132 .Medusa.CoreProto"
    ".FileUpdateItem", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FileUpdateList.proto", &protobuf_RegisterTypes);
  FileUpdateItem::default_instance_ = new FileUpdateItem();
  FileUpdateList::default_instance_ = new FileUpdateList();
  FileUpdateItem::default_instance_->InitAsDefaultInstance();
  FileUpdateList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FileUpdateList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FileUpdateList_2eproto {
  StaticDescriptorInitializer_FileUpdateList_2eproto() {
    protobuf_AddDesc_FileUpdateList_2eproto();
  }
} static_descriptor_initializer_FileUpdateList_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FileUpdateItem::kPathFieldNumber;
const int FileUpdateItem::kMd5FieldNumber;
#endif  // !_MSC_VER

FileUpdateItem::FileUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileUpdateItem::InitAsDefaultInstance() {
}

FileUpdateItem::FileUpdateItem(const FileUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileUpdateItem::~FileUpdateItem() {
  SharedDtor();
}

void FileUpdateItem::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void FileUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileUpdateItem_descriptor_;
}

const FileUpdateItem& FileUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileUpdateList_2eproto();
  return *default_instance_;
}

FileUpdateItem* FileUpdateItem::default_instance_ = NULL;

FileUpdateItem* FileUpdateItem::New() const {
  return new FileUpdateItem;
}

void FileUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }

      // required string md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileUpdateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileUpdateItem::MergeFrom(const FileUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUpdateItem::CopyFrom(const FileUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUpdateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FileUpdateItem::Swap(FileUpdateItem* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileUpdateItem_descriptor_;
  metadata.reflection = FileUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileUpdateList::kVersionFieldNumber;
const int FileUpdateList::kItemsFieldNumber;
#endif  // !_MSC_VER

FileUpdateList::FileUpdateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileUpdateList::InitAsDefaultInstance() {
  version_ = const_cast< ::Medusa::CoreProto::Version*>(&::Medusa::CoreProto::Version::default_instance());
}

FileUpdateList::FileUpdateList(const FileUpdateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileUpdateList::SharedCtor() {
  _cached_size_ = 0;
  version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileUpdateList::~FileUpdateList() {
  SharedDtor();
}

void FileUpdateList::SharedDtor() {
  if (this != default_instance_) {
    delete version_;
  }
}

void FileUpdateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileUpdateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileUpdateList_descriptor_;
}

const FileUpdateList& FileUpdateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileUpdateList_2eproto();
  return *default_instance_;
}

FileUpdateList* FileUpdateList::default_instance_ = NULL;

FileUpdateList* FileUpdateList::New() const {
  return new FileUpdateList;
}

void FileUpdateList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != NULL) version_->::Medusa::CoreProto::Version::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileUpdateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.Version version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Medusa.CoreProto.FileUpdateItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileUpdateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.Version version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->version(), output);
  }

  // repeated .Medusa.CoreProto.FileUpdateItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileUpdateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.Version version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->version(), target);
  }

  // repeated .Medusa.CoreProto.FileUpdateItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileUpdateList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.Version version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version());
    }

  }
  // repeated .Medusa.CoreProto.FileUpdateItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileUpdateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileUpdateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileUpdateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileUpdateList::MergeFrom(const FileUpdateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      mutable_version()->::Medusa::CoreProto::Version::MergeFrom(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileUpdateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUpdateList::CopyFrom(const FileUpdateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUpdateList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void FileUpdateList::Swap(FileUpdateList* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileUpdateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileUpdateList_descriptor_;
  metadata.reflection = FileUpdateList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

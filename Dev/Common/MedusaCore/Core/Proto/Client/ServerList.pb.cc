// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* ServerUsageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUsageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerUsageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerList_2eproto() {
  protobuf_AddDesc_ServerList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerList.proto");
  GOOGLE_CHECK(file != NULL);
  ServerUsageItem_descriptor_ = file->message_type(0);
  static const int ServerUsageItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUsageItem, usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUsageItem, serverid_),
  };
  ServerUsageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUsageItem_descriptor_,
      ServerUsageItem::default_instance_,
      ServerUsageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUsageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUsageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUsageItem));
  ServerListItem_descriptor_ = file->message_type(1);
  static const int ServerListItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListItem, serverusages_),
  };
  ServerListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerListItem_descriptor_,
      ServerListItem::default_instance_,
      ServerListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerListItem));
  ServerList_descriptor_ = file->message_type(2);
  static const int ServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, items_),
  };
  ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerList_descriptor_,
      ServerList::default_instance_,
      ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerList));
  ServerUsageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUsageItem_descriptor_, &ServerUsageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerListItem_descriptor_, &ServerListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerList_descriptor_, &ServerList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerList_2eproto() {
  delete ServerUsageItem::default_instance_;
  delete ServerUsageItem_reflection_;
  delete ServerListItem::default_instance_;
  delete ServerListItem_reflection_;
  delete ServerList::default_instance_;
  delete ServerList_reflection_;
}

void protobuf_AddDesc_ServerList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ServerList.proto\022\020Medusa.CoreProto\"U\n\017"
    "ServerUsageItem\0220\n\005Usage\030\001 \002(\0162!.Medusa."
    "CoreProto.ServerUsageType\022\020\n\010ServerId\030\002 "
    "\002(\r\"U\n\016ServerListItem\022\n\n\002Id\030\001 \002(\r\0227\n\014Ser"
    "verUsages\030\002 \003(\0132!.Medusa.CoreProto.Serve"
    "rUsageItem\"=\n\nServerList\022/\n\005Items\030\001 \003(\0132"
    " .Medusa.CoreProto.ServerListItem*2\n\017Ser"
    "verUsageType\022\017\n\013LoginServer\020\001\022\016\n\nGameSer"
    "ver\020\002", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerList.proto", &protobuf_RegisterTypes);
  ServerUsageItem::default_instance_ = new ServerUsageItem();
  ServerListItem::default_instance_ = new ServerListItem();
  ServerList::default_instance_ = new ServerList();
  ServerUsageItem::default_instance_->InitAsDefaultInstance();
  ServerListItem::default_instance_->InitAsDefaultInstance();
  ServerList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerList_2eproto {
  StaticDescriptorInitializer_ServerList_2eproto() {
    protobuf_AddDesc_ServerList_2eproto();
  }
} static_descriptor_initializer_ServerList_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerUsageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUsageType_descriptor_;
}
bool ServerUsageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUsageItem::kUsageFieldNumber;
const int ServerUsageItem::kServerIdFieldNumber;
#endif  // !_MSC_VER

ServerUsageItem::ServerUsageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUsageItem::InitAsDefaultInstance() {
}

ServerUsageItem::ServerUsageItem(const ServerUsageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUsageItem::SharedCtor() {
  _cached_size_ = 0;
  usage_ = 1;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUsageItem::~ServerUsageItem() {
  SharedDtor();
}

void ServerUsageItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUsageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUsageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUsageItem_descriptor_;
}

const ServerUsageItem& ServerUsageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerList_2eproto();
  return *default_instance_;
}

ServerUsageItem* ServerUsageItem::default_instance_ = NULL;

ServerUsageItem* ServerUsageItem::New() const {
  return new ServerUsageItem;
}

void ServerUsageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usage_ = 1;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUsageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.ServerUsageType Usage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::ServerUsageType_IsValid(value)) {
            set_usage(static_cast< ::Medusa::CoreProto::ServerUsageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerId;
        break;
      }

      // required uint32 ServerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUsageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.ServerUsageType Usage = 1;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->usage(), output);
  }

  // required uint32 ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUsageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.ServerUsageType Usage = 1;
  if (has_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->usage(), target);
  }

  // required uint32 ServerId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUsageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Medusa.CoreProto.ServerUsageType Usage = 1;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

    // required uint32 ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUsageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUsageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUsageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUsageItem::MergeFrom(const ServerUsageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usage()) {
      set_usage(from.usage());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUsageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUsageItem::CopyFrom(const ServerUsageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUsageItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerUsageItem::Swap(ServerUsageItem* other) {
  if (other != this) {
    std::swap(usage_, other->usage_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUsageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUsageItem_descriptor_;
  metadata.reflection = ServerUsageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerListItem::kIdFieldNumber;
const int ServerListItem::kServerUsagesFieldNumber;
#endif  // !_MSC_VER

ServerListItem::ServerListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerListItem::InitAsDefaultInstance() {
}

ServerListItem::ServerListItem(const ServerListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerListItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerListItem::~ServerListItem() {
  SharedDtor();
}

void ServerListItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerListItem_descriptor_;
}

const ServerListItem& ServerListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerList_2eproto();
  return *default_instance_;
}

ServerListItem* ServerListItem::default_instance_ = NULL;

ServerListItem* ServerListItem::New() const {
  return new ServerListItem;
}

void ServerListItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  serverusages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerUsages;
        break;
      }

      // repeated .Medusa.CoreProto.ServerUsageItem ServerUsages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerUsages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverusages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerUsages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .Medusa.CoreProto.ServerUsageItem ServerUsages = 2;
  for (int i = 0; i < this->serverusages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serverusages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .Medusa.CoreProto.ServerUsageItem ServerUsages = 2;
  for (int i = 0; i < this->serverusages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serverusages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .Medusa.CoreProto.ServerUsageItem ServerUsages = 2;
  total_size += 1 * this->serverusages_size();
  for (int i = 0; i < this->serverusages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverusages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerListItem::MergeFrom(const ServerListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverusages_.MergeFrom(from.serverusages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerListItem::CopyFrom(const ServerListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < serverusages_size(); i++) {
    if (!this->serverusages(i).IsInitialized()) return false;
  }
  return true;
}

void ServerListItem::Swap(ServerListItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    serverusages_.Swap(&other->serverusages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerListItem_descriptor_;
  metadata.reflection = ServerListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerList::kItemsFieldNumber;
#endif  // !_MSC_VER

ServerList::ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerList::InitAsDefaultInstance() {
}

ServerList::ServerList(const ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList::~ServerList() {
  SharedDtor();
}

void ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_descriptor_;
}

const ServerList& ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerList_2eproto();
  return *default_instance_;
}

ServerList* ServerList::default_instance_ = NULL;

ServerList* ServerList::New() const {
  return new ServerList;
}

void ServerList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Medusa.CoreProto.ServerListItem Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Medusa.CoreProto.ServerListItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Medusa.CoreProto.ServerListItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerList::ByteSize() const {
  int total_size = 0;

  // repeated .Medusa.CoreProto.ServerListItem Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerList::MergeFrom(const ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList::CopyFrom(const ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ServerList::Swap(ServerList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerList_descriptor_;
  metadata.reflection = ServerList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

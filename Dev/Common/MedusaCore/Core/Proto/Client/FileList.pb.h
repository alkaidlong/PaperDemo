// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileList.proto

#ifndef PROTOBUF_FileList_2eproto__INCLUDED
#define PROTOBUF_FileList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CoreDefines.pb.h"
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FileList_2eproto();
void protobuf_AssignDesc_FileList_2eproto();
void protobuf_ShutdownFile_FileList_2eproto();

class FileList;
class FileList_FileCoder;
class FileList_FileItem;

enum FileList_FileCoder_FileCoderType {
  FileList_FileCoder_FileCoderType_LZMAEncoder = 1,
  FileList_FileCoder_FileCoderType_XOREncoder = 2,
  FileList_FileCoder_FileCoderType_LZMADecoder = 101,
  FileList_FileCoder_FileCoderType_XORDecoder = 102
};
bool FileList_FileCoder_FileCoderType_IsValid(int value);
const FileList_FileCoder_FileCoderType FileList_FileCoder_FileCoderType_FileCoderType_MIN = FileList_FileCoder_FileCoderType_LZMAEncoder;
const FileList_FileCoder_FileCoderType FileList_FileCoder_FileCoderType_FileCoderType_MAX = FileList_FileCoder_FileCoderType_XORDecoder;
const int FileList_FileCoder_FileCoderType_FileCoderType_ARRAYSIZE = FileList_FileCoder_FileCoderType_FileCoderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileList_FileCoder_FileCoderType_descriptor();
inline const ::std::string& FileList_FileCoder_FileCoderType_Name(FileList_FileCoder_FileCoderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileList_FileCoder_FileCoderType_descriptor(), value);
}
inline bool FileList_FileCoder_FileCoderType_Parse(
    const ::std::string& name, FileList_FileCoder_FileCoderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileList_FileCoder_FileCoderType>(
    FileList_FileCoder_FileCoderType_descriptor(), name, value);
}
// ===================================================================

class FileList_FileCoder : public ::google::protobuf::Message {
 public:
  FileList_FileCoder();
  virtual ~FileList_FileCoder();

  FileList_FileCoder(const FileList_FileCoder& from);

  inline FileList_FileCoder& operator=(const FileList_FileCoder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList_FileCoder& default_instance();

  void Swap(FileList_FileCoder* other);

  // implements Message ----------------------------------------------

  FileList_FileCoder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileList_FileCoder& from);
  void MergeFrom(const FileList_FileCoder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileList_FileCoder_FileCoderType FileCoderType;
  static const FileCoderType LZMAEncoder = FileList_FileCoder_FileCoderType_LZMAEncoder;
  static const FileCoderType XOREncoder = FileList_FileCoder_FileCoderType_XOREncoder;
  static const FileCoderType LZMADecoder = FileList_FileCoder_FileCoderType_LZMADecoder;
  static const FileCoderType XORDecoder = FileList_FileCoder_FileCoderType_XORDecoder;
  static inline bool FileCoderType_IsValid(int value) {
    return FileList_FileCoder_FileCoderType_IsValid(value);
  }
  static const FileCoderType FileCoderType_MIN =
    FileList_FileCoder_FileCoderType_FileCoderType_MIN;
  static const FileCoderType FileCoderType_MAX =
    FileList_FileCoder_FileCoderType_FileCoderType_MAX;
  static const int FileCoderType_ARRAYSIZE =
    FileList_FileCoder_FileCoderType_FileCoderType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileCoderType_descriptor() {
    return FileList_FileCoder_FileCoderType_descriptor();
  }
  static inline const ::std::string& FileCoderType_Name(FileCoderType value) {
    return FileList_FileCoder_FileCoderType_Name(value);
  }
  static inline bool FileCoderType_Parse(const ::std::string& name,
      FileCoderType* value) {
    return FileList_FileCoder_FileCoderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Medusa::CoreProto::FileList_FileCoder_FileCoderType type() const;
  inline void set_type(::Medusa::CoreProto::FileList_FileCoder_FileCoderType value);

  // optional uint32 Info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline ::google::protobuf::uint32 info() const;
  inline void set_info(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FileList.FileCoder)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FileList_2eproto();
  friend void protobuf_AssignDesc_FileList_2eproto();
  friend void protobuf_ShutdownFile_FileList_2eproto();

  void InitAsDefaultInstance();
  static FileList_FileCoder* default_instance_;
};
// -------------------------------------------------------------------

class FileList_FileItem : public ::google::protobuf::Message {
 public:
  FileList_FileItem();
  virtual ~FileList_FileItem();

  FileList_FileItem(const FileList_FileItem& from);

  inline FileList_FileItem& operator=(const FileList_FileItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList_FileItem& default_instance();

  void Swap(FileList_FileItem* other);

  // implements Message ----------------------------------------------

  FileList_FileItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileList_FileItem& from);
  void MergeFrom(const FileList_FileItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline ::google::protobuf::uint32 fileid() const;
  inline void set_fileid(::google::protobuf::uint32 value);

  // required int32 DirIndex = 2;
  inline bool has_dirindex() const;
  inline void clear_dirindex();
  static const int kDirIndexFieldNumber = 2;
  inline ::google::protobuf::int32 dirindex() const;
  inline void set_dirindex(::google::protobuf::int32 value);

  // required string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string MD5 = 4;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMD5FieldNumber = 4;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
  inline int coders_size() const;
  inline void clear_coders();
  static const int kCodersFieldNumber = 5;
  inline const ::Medusa::CoreProto::FileList_FileCoder& coders(int index) const;
  inline ::Medusa::CoreProto::FileList_FileCoder* mutable_coders(int index);
  inline ::Medusa::CoreProto::FileList_FileCoder* add_coders();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileCoder >&
      coders() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileCoder >*
      mutable_coders();

  // optional string OriginalName = 6;
  inline bool has_originalname() const;
  inline void clear_originalname();
  static const int kOriginalNameFieldNumber = 6;
  inline const ::std::string& originalname() const;
  inline void set_originalname(const ::std::string& value);
  inline void set_originalname(const char* value);
  inline void set_originalname(const char* value, size_t size);
  inline ::std::string* mutable_originalname();
  inline ::std::string* release_originalname();
  inline void set_allocated_originalname(::std::string* originalname);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FileList.FileItem)
 private:
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_dirindex();
  inline void clear_has_dirindex();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_originalname();
  inline void clear_has_originalname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fileid_;
  ::google::protobuf::int32 dirindex_;
  ::std::string* name_;
  ::std::string* md5_;
  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileCoder > coders_;
  ::std::string* originalname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FileList_2eproto();
  friend void protobuf_AssignDesc_FileList_2eproto();
  friend void protobuf_ShutdownFile_FileList_2eproto();

  void InitAsDefaultInstance();
  static FileList_FileItem* default_instance_;
};
// -------------------------------------------------------------------

class FileList : public ::google::protobuf::Message {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList& default_instance();

  void Swap(FileList* other);

  // implements Message ----------------------------------------------

  FileList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileList_FileCoder FileCoder;
  typedef FileList_FileItem FileItem;

  // accessors -------------------------------------------------------

  // required .Medusa.CoreProto.Version CurVersion = 1;
  inline bool has_curversion() const;
  inline void clear_curversion();
  static const int kCurVersionFieldNumber = 1;
  inline const ::Medusa::CoreProto::Version& curversion() const;
  inline ::Medusa::CoreProto::Version* mutable_curversion();
  inline ::Medusa::CoreProto::Version* release_curversion();
  inline void set_allocated_curversion(::Medusa::CoreProto::Version* curversion);

  // repeated string Dirs = 2;
  inline int dirs_size() const;
  inline void clear_dirs();
  static const int kDirsFieldNumber = 2;
  inline const ::std::string& dirs(int index) const;
  inline ::std::string* mutable_dirs(int index);
  inline void set_dirs(int index, const ::std::string& value);
  inline void set_dirs(int index, const char* value);
  inline void set_dirs(int index, const char* value, size_t size);
  inline ::std::string* add_dirs();
  inline void add_dirs(const ::std::string& value);
  inline void add_dirs(const char* value);
  inline void add_dirs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dirs();

  // repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 3;
  inline const ::Medusa::CoreProto::FileList_FileItem& files(int index) const;
  inline ::Medusa::CoreProto::FileList_FileItem* mutable_files(int index);
  inline ::Medusa::CoreProto::FileList_FileItem* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileItem >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileItem >*
      mutable_files();

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.FileList)
 private:
  inline void set_has_curversion();
  inline void clear_has_curversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Medusa::CoreProto::Version* curversion_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dirs_;
  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileItem > files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FileList_2eproto();
  friend void protobuf_AssignDesc_FileList_2eproto();
  friend void protobuf_ShutdownFile_FileList_2eproto();

  void InitAsDefaultInstance();
  static FileList* default_instance_;
};
// ===================================================================


// ===================================================================

// FileList_FileCoder

// required .Medusa.CoreProto.FileList.FileCoder.FileCoderType Type = 1;
inline bool FileList_FileCoder::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileList_FileCoder::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileList_FileCoder::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileList_FileCoder::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Medusa::CoreProto::FileList_FileCoder_FileCoderType FileList_FileCoder::type() const {
  return static_cast< ::Medusa::CoreProto::FileList_FileCoder_FileCoderType >(type_);
}
inline void FileList_FileCoder::set_type(::Medusa::CoreProto::FileList_FileCoder_FileCoderType value) {
  assert(::Medusa::CoreProto::FileList_FileCoder_FileCoderType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 Info = 2;
inline bool FileList_FileCoder::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileList_FileCoder::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileList_FileCoder::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileList_FileCoder::clear_info() {
  info_ = 0u;
  clear_has_info();
}
inline ::google::protobuf::uint32 FileList_FileCoder::info() const {
  return info_;
}
inline void FileList_FileCoder::set_info(::google::protobuf::uint32 value) {
  set_has_info();
  info_ = value;
}

// -------------------------------------------------------------------

// FileList_FileItem

// required uint32 FileId = 1;
inline bool FileList_FileItem::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileList_FileItem::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileList_FileItem::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileList_FileItem::clear_fileid() {
  fileid_ = 0u;
  clear_has_fileid();
}
inline ::google::protobuf::uint32 FileList_FileItem::fileid() const {
  return fileid_;
}
inline void FileList_FileItem::set_fileid(::google::protobuf::uint32 value) {
  set_has_fileid();
  fileid_ = value;
}

// required int32 DirIndex = 2;
inline bool FileList_FileItem::has_dirindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileList_FileItem::set_has_dirindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileList_FileItem::clear_has_dirindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileList_FileItem::clear_dirindex() {
  dirindex_ = 0;
  clear_has_dirindex();
}
inline ::google::protobuf::int32 FileList_FileItem::dirindex() const {
  return dirindex_;
}
inline void FileList_FileItem::set_dirindex(::google::protobuf::int32 value) {
  set_has_dirindex();
  dirindex_ = value;
}

// required string Name = 3;
inline bool FileList_FileItem::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileList_FileItem::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileList_FileItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileList_FileItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FileList_FileItem::name() const {
  return *name_;
}
inline void FileList_FileItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FileList_FileItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FileList_FileItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileList_FileItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FileList_FileItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileList_FileItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MD5 = 4;
inline bool FileList_FileItem::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileList_FileItem::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileList_FileItem::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileList_FileItem::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& FileList_FileItem::md5() const {
  return *md5_;
}
inline void FileList_FileItem::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void FileList_FileItem::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void FileList_FileItem::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileList_FileItem::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* FileList_FileItem::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileList_FileItem::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Medusa.CoreProto.FileList.FileCoder Coders = 5;
inline int FileList_FileItem::coders_size() const {
  return coders_.size();
}
inline void FileList_FileItem::clear_coders() {
  coders_.Clear();
}
inline const ::Medusa::CoreProto::FileList_FileCoder& FileList_FileItem::coders(int index) const {
  return coders_.Get(index);
}
inline ::Medusa::CoreProto::FileList_FileCoder* FileList_FileItem::mutable_coders(int index) {
  return coders_.Mutable(index);
}
inline ::Medusa::CoreProto::FileList_FileCoder* FileList_FileItem::add_coders() {
  return coders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileCoder >&
FileList_FileItem::coders() const {
  return coders_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileCoder >*
FileList_FileItem::mutable_coders() {
  return &coders_;
}

// optional string OriginalName = 6;
inline bool FileList_FileItem::has_originalname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileList_FileItem::set_has_originalname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileList_FileItem::clear_has_originalname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileList_FileItem::clear_originalname() {
  if (originalname_ != &::google::protobuf::internal::kEmptyString) {
    originalname_->clear();
  }
  clear_has_originalname();
}
inline const ::std::string& FileList_FileItem::originalname() const {
  return *originalname_;
}
inline void FileList_FileItem::set_originalname(const ::std::string& value) {
  set_has_originalname();
  if (originalname_ == &::google::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(value);
}
inline void FileList_FileItem::set_originalname(const char* value) {
  set_has_originalname();
  if (originalname_ == &::google::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(value);
}
inline void FileList_FileItem::set_originalname(const char* value, size_t size) {
  set_has_originalname();
  if (originalname_ == &::google::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileList_FileItem::mutable_originalname() {
  set_has_originalname();
  if (originalname_ == &::google::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  return originalname_;
}
inline ::std::string* FileList_FileItem::release_originalname() {
  clear_has_originalname();
  if (originalname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalname_;
    originalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileList_FileItem::set_allocated_originalname(::std::string* originalname) {
  if (originalname_ != &::google::protobuf::internal::kEmptyString) {
    delete originalname_;
  }
  if (originalname) {
    set_has_originalname();
    originalname_ = originalname;
  } else {
    clear_has_originalname();
    originalname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileList

// required .Medusa.CoreProto.Version CurVersion = 1;
inline bool FileList::has_curversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileList::set_has_curversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileList::clear_has_curversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileList::clear_curversion() {
  if (curversion_ != NULL) curversion_->::Medusa::CoreProto::Version::Clear();
  clear_has_curversion();
}
inline const ::Medusa::CoreProto::Version& FileList::curversion() const {
  return curversion_ != NULL ? *curversion_ : *default_instance_->curversion_;
}
inline ::Medusa::CoreProto::Version* FileList::mutable_curversion() {
  set_has_curversion();
  if (curversion_ == NULL) curversion_ = new ::Medusa::CoreProto::Version;
  return curversion_;
}
inline ::Medusa::CoreProto::Version* FileList::release_curversion() {
  clear_has_curversion();
  ::Medusa::CoreProto::Version* temp = curversion_;
  curversion_ = NULL;
  return temp;
}
inline void FileList::set_allocated_curversion(::Medusa::CoreProto::Version* curversion) {
  delete curversion_;
  curversion_ = curversion;
  if (curversion) {
    set_has_curversion();
  } else {
    clear_has_curversion();
  }
}

// repeated string Dirs = 2;
inline int FileList::dirs_size() const {
  return dirs_.size();
}
inline void FileList::clear_dirs() {
  dirs_.Clear();
}
inline const ::std::string& FileList::dirs(int index) const {
  return dirs_.Get(index);
}
inline ::std::string* FileList::mutable_dirs(int index) {
  return dirs_.Mutable(index);
}
inline void FileList::set_dirs(int index, const ::std::string& value) {
  dirs_.Mutable(index)->assign(value);
}
inline void FileList::set_dirs(int index, const char* value) {
  dirs_.Mutable(index)->assign(value);
}
inline void FileList::set_dirs(int index, const char* value, size_t size) {
  dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileList::add_dirs() {
  return dirs_.Add();
}
inline void FileList::add_dirs(const ::std::string& value) {
  dirs_.Add()->assign(value);
}
inline void FileList::add_dirs(const char* value) {
  dirs_.Add()->assign(value);
}
inline void FileList::add_dirs(const char* value, size_t size) {
  dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileList::dirs() const {
  return dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileList::mutable_dirs() {
  return &dirs_;
}

// repeated .Medusa.CoreProto.FileList.FileItem Files = 3;
inline int FileList::files_size() const {
  return files_.size();
}
inline void FileList::clear_files() {
  files_.Clear();
}
inline const ::Medusa::CoreProto::FileList_FileItem& FileList::files(int index) const {
  return files_.Get(index);
}
inline ::Medusa::CoreProto::FileList_FileItem* FileList::mutable_files(int index) {
  return files_.Mutable(index);
}
inline ::Medusa::CoreProto::FileList_FileItem* FileList::add_files() {
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileItem >&
FileList::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::FileList_FileItem >*
FileList::mutable_files() {
  return &files_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::FileList_FileCoder_FileCoderType>() {
  return ::Medusa::CoreProto::FileList_FileCoder_FileCoderType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FileList_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StringTable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StringTable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* StringOrderItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringOrderItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringNameItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringNameItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StringTable_2eproto() {
  protobuf_AddDesc_StringTable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StringTable.proto");
  GOOGLE_CHECK(file != NULL);
  StringOrderItem_descriptor_ = file->message_type(0);
  static const int StringOrderItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringOrderItem, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringOrderItem, value_),
  };
  StringOrderItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringOrderItem_descriptor_,
      StringOrderItem::default_instance_,
      StringOrderItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringOrderItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringOrderItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringOrderItem));
  StringNameItem_descriptor_ = file->message_type(1);
  static const int StringNameItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNameItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNameItem, orderitems_),
  };
  StringNameItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringNameItem_descriptor_,
      StringNameItem::default_instance_,
      StringNameItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNameItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringNameItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringNameItem));
  StringTable_descriptor_ = file->message_type(2);
  static const int StringTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, nameitems_),
  };
  StringTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringTable_descriptor_,
      StringTable::default_instance_,
      StringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StringTable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringOrderItem_descriptor_, &StringOrderItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringNameItem_descriptor_, &StringNameItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringTable_descriptor_, &StringTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StringTable_2eproto() {
  delete StringOrderItem::default_instance_;
  delete StringOrderItem_reflection_;
  delete StringNameItem::default_instance_;
  delete StringNameItem_reflection_;
  delete StringTable::default_instance_;
  delete StringTable_reflection_;
}

void protobuf_AddDesc_StringTable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021StringTable.proto\022\020Medusa.CoreProto\"/\n"
    "\017StringOrderItem\022\r\n\005order\030\001 \002(\r\022\r\n\005value"
    "\030\002 \002(\t\"U\n\016StringNameItem\022\014\n\004name\030\001 \002(\t\0225"
    "\n\norderItems\030\002 \003(\0132!.Medusa.CoreProto.St"
    "ringOrderItem\"B\n\013StringTable\0223\n\tnameItem"
    "s\030\001 \003(\0132 .Medusa.CoreProto.StringNameIte"
    "m", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StringTable.proto", &protobuf_RegisterTypes);
  StringOrderItem::default_instance_ = new StringOrderItem();
  StringNameItem::default_instance_ = new StringNameItem();
  StringTable::default_instance_ = new StringTable();
  StringOrderItem::default_instance_->InitAsDefaultInstance();
  StringNameItem::default_instance_->InitAsDefaultInstance();
  StringTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StringTable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StringTable_2eproto {
  StaticDescriptorInitializer_StringTable_2eproto() {
    protobuf_AddDesc_StringTable_2eproto();
  }
} static_descriptor_initializer_StringTable_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StringOrderItem::kOrderFieldNumber;
const int StringOrderItem::kValueFieldNumber;
#endif  // !_MSC_VER

StringOrderItem::StringOrderItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringOrderItem::InitAsDefaultInstance() {
}

StringOrderItem::StringOrderItem(const StringOrderItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringOrderItem::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringOrderItem::~StringOrderItem() {
  SharedDtor();
}

void StringOrderItem::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringOrderItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringOrderItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringOrderItem_descriptor_;
}

const StringOrderItem& StringOrderItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StringTable_2eproto();
  return *default_instance_;
}

StringOrderItem* StringOrderItem::default_instance_ = NULL;

StringOrderItem* StringOrderItem::New() const {
  return new StringOrderItem;
}

void StringOrderItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringOrderItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringOrderItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringOrderItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringOrderItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringOrderItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringOrderItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringOrderItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringOrderItem::MergeFrom(const StringOrderItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringOrderItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringOrderItem::CopyFrom(const StringOrderItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringOrderItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringOrderItem::Swap(StringOrderItem* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringOrderItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringOrderItem_descriptor_;
  metadata.reflection = StringOrderItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringNameItem::kNameFieldNumber;
const int StringNameItem::kOrderItemsFieldNumber;
#endif  // !_MSC_VER

StringNameItem::StringNameItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringNameItem::InitAsDefaultInstance() {
}

StringNameItem::StringNameItem(const StringNameItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringNameItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringNameItem::~StringNameItem() {
  SharedDtor();
}

void StringNameItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StringNameItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringNameItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringNameItem_descriptor_;
}

const StringNameItem& StringNameItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StringTable_2eproto();
  return *default_instance_;
}

StringNameItem* StringNameItem::default_instance_ = NULL;

StringNameItem* StringNameItem::New() const {
  return new StringNameItem;
}

void StringNameItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  orderitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringNameItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderItems;
        break;
      }

      // repeated .Medusa.CoreProto.StringOrderItem orderItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringNameItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .Medusa.CoreProto.StringOrderItem orderItems = 2;
  for (int i = 0; i < this->orderitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orderitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringNameItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Medusa.CoreProto.StringOrderItem orderItems = 2;
  for (int i = 0; i < this->orderitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orderitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringNameItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Medusa.CoreProto.StringOrderItem orderItems = 2;
  total_size += 1 * this->orderitems_size();
  for (int i = 0; i < this->orderitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringNameItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringNameItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringNameItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringNameItem::MergeFrom(const StringNameItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderitems_.MergeFrom(from.orderitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringNameItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringNameItem::CopyFrom(const StringNameItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringNameItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orderitems_size(); i++) {
    if (!this->orderitems(i).IsInitialized()) return false;
  }
  return true;
}

void StringNameItem::Swap(StringNameItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    orderitems_.Swap(&other->orderitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringNameItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringNameItem_descriptor_;
  metadata.reflection = StringNameItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringTable::kNameItemsFieldNumber;
#endif  // !_MSC_VER

StringTable::StringTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringTable::InitAsDefaultInstance() {
}

StringTable::StringTable(const StringTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringTable::~StringTable() {
  SharedDtor();
}

void StringTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringTable_descriptor_;
}

const StringTable& StringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StringTable_2eproto();
  return *default_instance_;
}

StringTable* StringTable::default_instance_ = NULL;

StringTable* StringTable::New() const {
  return new StringTable;
}

void StringTable::Clear() {
  nameitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Medusa.CoreProto.StringNameItem nameItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nameitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nameItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Medusa.CoreProto.StringNameItem nameItems = 1;
  for (int i = 0; i < this->nameitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nameitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Medusa.CoreProto.StringNameItem nameItems = 1;
  for (int i = 0; i < this->nameitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nameitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringTable::ByteSize() const {
  int total_size = 0;

  // repeated .Medusa.CoreProto.StringNameItem nameItems = 1;
  total_size += 1 * this->nameitems_size();
  for (int i = 0; i < this->nameitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nameitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringTable::MergeFrom(const StringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  nameitems_.MergeFrom(from.nameitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTable::CopyFrom(const StringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {

  for (int i = 0; i < nameitems_size(); i++) {
    if (!this->nameitems(i).IsInitialized()) return false;
  }
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other != this) {
    nameitems_.Swap(&other->nameitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringTable_descriptor_;
  metadata.reflection = StringTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

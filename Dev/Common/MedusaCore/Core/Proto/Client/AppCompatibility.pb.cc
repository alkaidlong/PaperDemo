// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppCompatibility.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AppCompatibility.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

namespace {

const ::google::protobuf::Descriptor* AppCompatibility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCompatibility_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppCompatibility_InitializeOperation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AppCompatibility_2eproto() {
  protobuf_AddDesc_AppCompatibility_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AppCompatibility.proto");
  GOOGLE_CHECK(file != NULL);
  AppCompatibility_descriptor_ = file->message_type(0);
  static const int AppCompatibility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCompatibility, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCompatibility, operation_),
  };
  AppCompatibility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppCompatibility_descriptor_,
      AppCompatibility::default_instance_,
      AppCompatibility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCompatibility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCompatibility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppCompatibility));
  AppCompatibility_InitializeOperation_descriptor_ = AppCompatibility_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AppCompatibility_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppCompatibility_descriptor_, &AppCompatibility::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AppCompatibility_2eproto() {
  delete AppCompatibility::default_instance_;
  delete AppCompatibility_reflection_;
}

void protobuf_AddDesc_AppCompatibility_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026AppCompatibility.proto\022\020Medusa.CorePro"
    "to\"\243\001\n\020AppCompatibility\022\017\n\007version\030\002 \002(\r"
    "\022I\n\toperation\030\001 \002(\01626.Medusa.CoreProto.A"
    "ppCompatibility.InitializeOperation\"3\n\023I"
    "nitializeOperation\022\010\n\004None\020\000\022\022\n\016RemoveAl"
    "lCache\020\001", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AppCompatibility.proto", &protobuf_RegisterTypes);
  AppCompatibility::default_instance_ = new AppCompatibility();
  AppCompatibility::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AppCompatibility_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AppCompatibility_2eproto {
  StaticDescriptorInitializer_AppCompatibility_2eproto() {
    protobuf_AddDesc_AppCompatibility_2eproto();
  }
} static_descriptor_initializer_AppCompatibility_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AppCompatibility_InitializeOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCompatibility_InitializeOperation_descriptor_;
}
bool AppCompatibility_InitializeOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppCompatibility_InitializeOperation AppCompatibility::None;
const AppCompatibility_InitializeOperation AppCompatibility::RemoveAllCache;
const AppCompatibility_InitializeOperation AppCompatibility::InitializeOperation_MIN;
const AppCompatibility_InitializeOperation AppCompatibility::InitializeOperation_MAX;
const int AppCompatibility::InitializeOperation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppCompatibility::kVersionFieldNumber;
const int AppCompatibility::kOperationFieldNumber;
#endif  // !_MSC_VER

AppCompatibility::AppCompatibility()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppCompatibility::InitAsDefaultInstance() {
}

AppCompatibility::AppCompatibility(const AppCompatibility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppCompatibility::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  operation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppCompatibility::~AppCompatibility() {
  SharedDtor();
}

void AppCompatibility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppCompatibility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCompatibility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCompatibility_descriptor_;
}

const AppCompatibility& AppCompatibility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AppCompatibility_2eproto();
  return *default_instance_;
}

AppCompatibility* AppCompatibility::default_instance_ = NULL;

AppCompatibility* AppCompatibility::New() const {
  return new AppCompatibility;
}

void AppCompatibility::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    operation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppCompatibility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Medusa.CoreProto.AppCompatibility.InitializeOperation operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Medusa::CoreProto::AppCompatibility_InitializeOperation_IsValid(value)) {
            set_operation(static_cast< ::Medusa::CoreProto::AppCompatibility_InitializeOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppCompatibility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Medusa.CoreProto.AppCompatibility.InitializeOperation operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppCompatibility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Medusa.CoreProto.AppCompatibility.InitializeOperation operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppCompatibility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required .Medusa.CoreProto.AppCompatibility.InitializeOperation operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCompatibility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppCompatibility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppCompatibility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCompatibility::MergeFrom(const AppCompatibility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppCompatibility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCompatibility::CopyFrom(const AppCompatibility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCompatibility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppCompatibility::Swap(AppCompatibility* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppCompatibility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCompatibility_descriptor_;
  metadata.reflection = AppCompatibility_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

// @@protoc_insertion_point(global_scope)

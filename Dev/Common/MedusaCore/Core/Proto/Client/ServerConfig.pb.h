// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerConfig.proto

#ifndef PROTOBUF_ServerConfig_2eproto__INCLUDED
#define PROTOBUF_ServerConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Medusa {
namespace CoreProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerConfig_2eproto();
void protobuf_AssignDesc_ServerConfig_2eproto();
void protobuf_ShutdownFile_ServerConfig_2eproto();

class ServerConfigItem;
class ServerConfig;

enum ServerConfigItem_ServerStatus {
  ServerConfigItem_ServerStatus_OK = 0,
  ServerConfigItem_ServerStatus_Maintain = 1,
  ServerConfigItem_ServerStatus_Error = 2
};
bool ServerConfigItem_ServerStatus_IsValid(int value);
const ServerConfigItem_ServerStatus ServerConfigItem_ServerStatus_ServerStatus_MIN = ServerConfigItem_ServerStatus_OK;
const ServerConfigItem_ServerStatus ServerConfigItem_ServerStatus_ServerStatus_MAX = ServerConfigItem_ServerStatus_Error;
const int ServerConfigItem_ServerStatus_ServerStatus_ARRAYSIZE = ServerConfigItem_ServerStatus_ServerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerConfigItem_ServerStatus_descriptor();
inline const ::std::string& ServerConfigItem_ServerStatus_Name(ServerConfigItem_ServerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerConfigItem_ServerStatus_descriptor(), value);
}
inline bool ServerConfigItem_ServerStatus_Parse(
    const ::std::string& name, ServerConfigItem_ServerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerConfigItem_ServerStatus>(
    ServerConfigItem_ServerStatus_descriptor(), name, value);
}
enum ServerConfigItem_ServerType {
  ServerConfigItem_ServerType_TcpServer = 0,
  ServerConfigItem_ServerType_MockServer = 1
};
bool ServerConfigItem_ServerType_IsValid(int value);
const ServerConfigItem_ServerType ServerConfigItem_ServerType_ServerType_MIN = ServerConfigItem_ServerType_TcpServer;
const ServerConfigItem_ServerType ServerConfigItem_ServerType_ServerType_MAX = ServerConfigItem_ServerType_MockServer;
const int ServerConfigItem_ServerType_ServerType_ARRAYSIZE = ServerConfigItem_ServerType_ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerConfigItem_ServerType_descriptor();
inline const ::std::string& ServerConfigItem_ServerType_Name(ServerConfigItem_ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerConfigItem_ServerType_descriptor(), value);
}
inline bool ServerConfigItem_ServerType_Parse(
    const ::std::string& name, ServerConfigItem_ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerConfigItem_ServerType>(
    ServerConfigItem_ServerType_descriptor(), name, value);
}
// ===================================================================

class ServerConfigItem : public ::google::protobuf::Message {
 public:
  ServerConfigItem();
  virtual ~ServerConfigItem();

  ServerConfigItem(const ServerConfigItem& from);

  inline ServerConfigItem& operator=(const ServerConfigItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfigItem& default_instance();

  void Swap(ServerConfigItem* other);

  // implements Message ----------------------------------------------

  ServerConfigItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfigItem& from);
  void MergeFrom(const ServerConfigItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerConfigItem_ServerStatus ServerStatus;
  static const ServerStatus OK = ServerConfigItem_ServerStatus_OK;
  static const ServerStatus Maintain = ServerConfigItem_ServerStatus_Maintain;
  static const ServerStatus Error = ServerConfigItem_ServerStatus_Error;
  static inline bool ServerStatus_IsValid(int value) {
    return ServerConfigItem_ServerStatus_IsValid(value);
  }
  static const ServerStatus ServerStatus_MIN =
    ServerConfigItem_ServerStatus_ServerStatus_MIN;
  static const ServerStatus ServerStatus_MAX =
    ServerConfigItem_ServerStatus_ServerStatus_MAX;
  static const int ServerStatus_ARRAYSIZE =
    ServerConfigItem_ServerStatus_ServerStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerStatus_descriptor() {
    return ServerConfigItem_ServerStatus_descriptor();
  }
  static inline const ::std::string& ServerStatus_Name(ServerStatus value) {
    return ServerConfigItem_ServerStatus_Name(value);
  }
  static inline bool ServerStatus_Parse(const ::std::string& name,
      ServerStatus* value) {
    return ServerConfigItem_ServerStatus_Parse(name, value);
  }

  typedef ServerConfigItem_ServerType ServerType;
  static const ServerType TcpServer = ServerConfigItem_ServerType_TcpServer;
  static const ServerType MockServer = ServerConfigItem_ServerType_MockServer;
  static inline bool ServerType_IsValid(int value) {
    return ServerConfigItem_ServerType_IsValid(value);
  }
  static const ServerType ServerType_MIN =
    ServerConfigItem_ServerType_ServerType_MIN;
  static const ServerType ServerType_MAX =
    ServerConfigItem_ServerType_ServerType_MAX;
  static const int ServerType_ARRAYSIZE =
    ServerConfigItem_ServerType_ServerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerType_descriptor() {
    return ServerConfigItem_ServerType_descriptor();
  }
  static inline const ::std::string& ServerType_Name(ServerType value) {
    return ServerConfigItem_ServerType_Name(value);
  }
  static inline bool ServerType_Parse(const ::std::string& name,
      ServerType* value) {
    return ServerConfigItem_ServerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string Address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required uint32 Port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required .Medusa.CoreProto.ServerConfigItem.ServerStatus Status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::Medusa::CoreProto::ServerConfigItem_ServerStatus status() const;
  inline void set_status(::Medusa::CoreProto::ServerConfigItem_ServerStatus value);

  // required .Medusa.CoreProto.ServerConfigItem.ServerType Type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Medusa::CoreProto::ServerConfigItem_ServerType type() const;
  inline void set_type(::Medusa::CoreProto::ServerConfigItem_ServerType value);

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ServerConfigItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;
  int status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ServerConfig_2eproto();
  friend void protobuf_AssignDesc_ServerConfig_2eproto();
  friend void protobuf_ShutdownFile_ServerConfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfigItem* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  ServerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Medusa.CoreProto.ServerConfigItem Items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Medusa::CoreProto::ServerConfigItem& items(int index) const;
  inline ::Medusa::CoreProto::ServerConfigItem* mutable_items(int index);
  inline ::Medusa::CoreProto::ServerConfigItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::ServerConfigItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::ServerConfigItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Medusa.CoreProto.ServerConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::ServerConfigItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ServerConfig_2eproto();
  friend void protobuf_AssignDesc_ServerConfig_2eproto();
  friend void protobuf_ShutdownFile_ServerConfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerConfigItem

// required uint32 Id = 1;
inline bool ServerConfigItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfigItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfigItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfigItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ServerConfigItem::id() const {
  return id_;
}
inline void ServerConfigItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string Address = 2;
inline bool ServerConfigItem::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfigItem::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfigItem::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfigItem::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ServerConfigItem::address() const {
  return *address_;
}
inline void ServerConfigItem::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ServerConfigItem::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ServerConfigItem::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfigItem::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* ServerConfigItem::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfigItem::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Port = 3;
inline bool ServerConfigItem::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfigItem::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfigItem::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfigItem::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ServerConfigItem::port() const {
  return port_;
}
inline void ServerConfigItem::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required .Medusa.CoreProto.ServerConfigItem.ServerStatus Status = 4;
inline bool ServerConfigItem::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfigItem::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfigItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfigItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Medusa::CoreProto::ServerConfigItem_ServerStatus ServerConfigItem::status() const {
  return static_cast< ::Medusa::CoreProto::ServerConfigItem_ServerStatus >(status_);
}
inline void ServerConfigItem::set_status(::Medusa::CoreProto::ServerConfigItem_ServerStatus value) {
  assert(::Medusa::CoreProto::ServerConfigItem_ServerStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required .Medusa.CoreProto.ServerConfigItem.ServerType Type = 5;
inline bool ServerConfigItem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfigItem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfigItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfigItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Medusa::CoreProto::ServerConfigItem_ServerType ServerConfigItem::type() const {
  return static_cast< ::Medusa::CoreProto::ServerConfigItem_ServerType >(type_);
}
inline void ServerConfigItem::set_type(::Medusa::CoreProto::ServerConfigItem_ServerType value) {
  assert(::Medusa::CoreProto::ServerConfigItem_ServerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ServerConfig

// repeated .Medusa.CoreProto.ServerConfigItem Items = 1;
inline int ServerConfig::items_size() const {
  return items_.size();
}
inline void ServerConfig::clear_items() {
  items_.Clear();
}
inline const ::Medusa::CoreProto::ServerConfigItem& ServerConfig::items(int index) const {
  return items_.Get(index);
}
inline ::Medusa::CoreProto::ServerConfigItem* ServerConfig::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Medusa::CoreProto::ServerConfigItem* ServerConfig::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::ServerConfigItem >&
ServerConfig::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Medusa::CoreProto::ServerConfigItem >*
ServerConfig::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreProto
}  // namespace Medusa

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::ServerConfigItem_ServerStatus>() {
  return ::Medusa::CoreProto::ServerConfigItem_ServerStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Medusa::CoreProto::ServerConfigItem_ServerType>() {
  return ::Medusa::CoreProto::ServerConfigItem_ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerConfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerProto {
namespace Config {

namespace {

const ::google::protobuf::Descriptor* RoleConfigItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleConfigItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoleConfig_2eproto() {
  protobuf_AddDesc_RoleConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoleConfig.proto");
  GOOGLE_CHECK(file != NULL);
  RoleConfigItem_descriptor_ = file->message_type(0);
  static const int RoleConfigItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfigItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfigItem, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfigItem, deltaproperty_),
  };
  RoleConfigItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleConfigItem_descriptor_,
      RoleConfigItem::default_instance_,
      RoleConfigItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfigItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfigItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleConfigItem));
  RoleConfig_descriptor_ = file->message_type(1);
  static const int RoleConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfig, roleconfigitems_),
  };
  RoleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleConfig_descriptor_,
      RoleConfig::default_instance_,
      RoleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoleConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleConfigItem_descriptor_, &RoleConfigItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleConfig_descriptor_, &RoleConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoleConfig_2eproto() {
  delete RoleConfigItem::default_instance_;
  delete RoleConfigItem_reflection_;
  delete RoleConfig::default_instance_;
  delete RoleConfig_reflection_;
}

void protobuf_AddDesc_RoleConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ServerProto::Logic::protobuf_AddDesc_BaseProperty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RoleConfig.proto\022\022ServerProto.Config\032\022"
    "BaseProperty.proto\"\207\001\n\016RoleConfigItem\022\n\n"
    "\002Id\030\001 \002(\r\0221\n\010Property\030\002 \002(\0132\037.ServerProt"
    "o.Logic.BaseProperty\0226\n\rDeltaProperty\030\003 "
    "\002(\0132\037.ServerProto.Logic.BaseProperty\"I\n\n"
    "RoleConfig\022;\n\017RoleConfigItems\030\001 \003(\0132\".Se"
    "rverProto.Config.RoleConfigItem", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoleConfig.proto", &protobuf_RegisterTypes);
  RoleConfigItem::default_instance_ = new RoleConfigItem();
  RoleConfig::default_instance_ = new RoleConfig();
  RoleConfigItem::default_instance_->InitAsDefaultInstance();
  RoleConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleConfig_2eproto {
  StaticDescriptorInitializer_RoleConfig_2eproto() {
    protobuf_AddDesc_RoleConfig_2eproto();
  }
} static_descriptor_initializer_RoleConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoleConfigItem::kIdFieldNumber;
const int RoleConfigItem::kPropertyFieldNumber;
const int RoleConfigItem::kDeltaPropertyFieldNumber;
#endif  // !_MSC_VER

RoleConfigItem::RoleConfigItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleConfigItem::InitAsDefaultInstance() {
  property_ = const_cast< ::ServerProto::Logic::BaseProperty*>(&::ServerProto::Logic::BaseProperty::default_instance());
  deltaproperty_ = const_cast< ::ServerProto::Logic::BaseProperty*>(&::ServerProto::Logic::BaseProperty::default_instance());
}

RoleConfigItem::RoleConfigItem(const RoleConfigItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleConfigItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  property_ = NULL;
  deltaproperty_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleConfigItem::~RoleConfigItem() {
  SharedDtor();
}

void RoleConfigItem::SharedDtor() {
  if (this != default_instance_) {
    delete property_;
    delete deltaproperty_;
  }
}

void RoleConfigItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleConfigItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleConfigItem_descriptor_;
}

const RoleConfigItem& RoleConfigItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleConfig_2eproto();
  return *default_instance_;
}

RoleConfigItem* RoleConfigItem::default_instance_ = NULL;

RoleConfigItem* RoleConfigItem::New() const {
  return new RoleConfigItem;
}

void RoleConfigItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_property()) {
      if (property_ != NULL) property_->::ServerProto::Logic::BaseProperty::Clear();
    }
    if (has_deltaproperty()) {
      if (deltaproperty_ != NULL) deltaproperty_->::ServerProto::Logic::BaseProperty::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleConfigItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Property;
        break;
      }

      // required .ServerProto.Logic.BaseProperty Property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DeltaProperty;
        break;
      }

      // required .ServerProto.Logic.BaseProperty DeltaProperty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeltaProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltaproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleConfigItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .ServerProto.Logic.BaseProperty Property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property(), output);
  }

  // required .ServerProto.Logic.BaseProperty DeltaProperty = 3;
  if (has_deltaproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deltaproperty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleConfigItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .ServerProto.Logic.BaseProperty Property = 2;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property(), target);
  }

  // required .ServerProto.Logic.BaseProperty DeltaProperty = 3;
  if (has_deltaproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deltaproperty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleConfigItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .ServerProto.Logic.BaseProperty Property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property());
    }

    // required .ServerProto.Logic.BaseProperty DeltaProperty = 3;
    if (has_deltaproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltaproperty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleConfigItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleConfigItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleConfigItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleConfigItem::MergeFrom(const RoleConfigItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_property()) {
      mutable_property()->::ServerProto::Logic::BaseProperty::MergeFrom(from.property());
    }
    if (from.has_deltaproperty()) {
      mutable_deltaproperty()->::ServerProto::Logic::BaseProperty::MergeFrom(from.deltaproperty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleConfigItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleConfigItem::CopyFrom(const RoleConfigItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleConfigItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  if (has_deltaproperty()) {
    if (!this->deltaproperty().IsInitialized()) return false;
  }
  return true;
}

void RoleConfigItem::Swap(RoleConfigItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(property_, other->property_);
    std::swap(deltaproperty_, other->deltaproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleConfigItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleConfigItem_descriptor_;
  metadata.reflection = RoleConfigItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleConfig::kRoleConfigItemsFieldNumber;
#endif  // !_MSC_VER

RoleConfig::RoleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleConfig::InitAsDefaultInstance() {
}

RoleConfig::RoleConfig(const RoleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleConfig::~RoleConfig() {
  SharedDtor();
}

void RoleConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleConfig_descriptor_;
}

const RoleConfig& RoleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleConfig_2eproto();
  return *default_instance_;
}

RoleConfig* RoleConfig::default_instance_ = NULL;

RoleConfig* RoleConfig::New() const {
  return new RoleConfig;
}

void RoleConfig::Clear() {
  roleconfigitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerProto.Config.RoleConfigItem RoleConfigItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleConfigItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleconfigitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RoleConfigItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerProto.Config.RoleConfigItem RoleConfigItems = 1;
  for (int i = 0; i < this->roleconfigitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleconfigitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerProto.Config.RoleConfigItem RoleConfigItems = 1;
  for (int i = 0; i < this->roleconfigitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleconfigitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleConfig::ByteSize() const {
  int total_size = 0;

  // repeated .ServerProto.Config.RoleConfigItem RoleConfigItems = 1;
  total_size += 1 * this->roleconfigitems_size();
  for (int i = 0; i < this->roleconfigitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleconfigitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleConfig::MergeFrom(const RoleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleconfigitems_.MergeFrom(from.roleconfigitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleConfig::CopyFrom(const RoleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleConfig::IsInitialized() const {

  for (int i = 0; i < roleconfigitems_size(); i++) {
    if (!this->roleconfigitems(i).IsInitialized()) return false;
  }
  return true;
}

void RoleConfig::Swap(RoleConfig* other) {
  if (other != this) {
    roleconfigitems_.Swap(&other->roleconfigitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleConfig_descriptor_;
  metadata.reflection = RoleConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config
}  // namespace ServerProto

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseProperty.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BaseProperty.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerProto {
namespace Logic {

namespace {

const ::google::protobuf::Descriptor* CommonProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseProperty_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BaseProperty_2eproto() {
  protobuf_AddDesc_BaseProperty_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BaseProperty.proto");
  GOOGLE_CHECK(file != NULL);
  CommonProperty_descriptor_ = file->message_type(0);
  static const int CommonProperty_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, maxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, valueregeneration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, defensepenetration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, lifesteal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, criticaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, toughness_),
  };
  CommonProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonProperty_descriptor_,
      CommonProperty::default_instance_,
      CommonProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonProperty));
  BaseProperty_descriptor_ = file->message_type(1);
  static const int BaseProperty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, physicalproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, magicalproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, coolingreduction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, movespeed_),
  };
  BaseProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseProperty_descriptor_,
      BaseProperty::default_instance_,
      BaseProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseProperty));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BaseProperty_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonProperty_descriptor_, &CommonProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseProperty_descriptor_, &BaseProperty::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BaseProperty_2eproto() {
  delete CommonProperty::default_instance_;
  delete CommonProperty_reflection_;
  delete BaseProperty::default_instance_;
  delete BaseProperty_reflection_;
}

void protobuf_AddDesc_BaseProperty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BaseProperty.proto\022\021ServerProto.Logic\""
    "\312\001\n\016CommonProperty\022\020\n\010MaxValue\030\001 \002(\002\022\031\n\021"
    "ValueRegeneration\030\002 \002(\002\022\016\n\006Attack\030\003 \002(\002\022"
    "\017\n\007Defense\030\004 \002(\002\022\032\n\022DefensePenetration\030\005"
    " \002(\002\022\021\n\tLifeSteal\030\006 \002(\002\022\020\n\010Critical\030\007 \002("
    "\002\022\026\n\016CriticalDamage\030\010 \002(\002\022\021\n\tToughness\030\t"
    " \002(\002\"\311\001\n\014BaseProperty\022;\n\020PhysicalPropert"
    "y\030\001 \001(\0132!.ServerProto.Logic.CommonProper"
    "ty\022:\n\017MagicalProperty\030\002 \001(\0132!.ServerProt"
    "o.Logic.CommonProperty\022\030\n\020CoolingReducti"
    "on\030\003 \002(\002\022\023\n\013AttackSpeed\030\004 \002(\002\022\021\n\tMoveSpe"
    "ed\030\005 \002(\002", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseProperty.proto", &protobuf_RegisterTypes);
  CommonProperty::default_instance_ = new CommonProperty();
  BaseProperty::default_instance_ = new BaseProperty();
  CommonProperty::default_instance_->InitAsDefaultInstance();
  BaseProperty::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BaseProperty_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BaseProperty_2eproto {
  StaticDescriptorInitializer_BaseProperty_2eproto() {
    protobuf_AddDesc_BaseProperty_2eproto();
  }
} static_descriptor_initializer_BaseProperty_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommonProperty::kMaxValueFieldNumber;
const int CommonProperty::kValueRegenerationFieldNumber;
const int CommonProperty::kAttackFieldNumber;
const int CommonProperty::kDefenseFieldNumber;
const int CommonProperty::kDefensePenetrationFieldNumber;
const int CommonProperty::kLifeStealFieldNumber;
const int CommonProperty::kCriticalFieldNumber;
const int CommonProperty::kCriticalDamageFieldNumber;
const int CommonProperty::kToughnessFieldNumber;
#endif  // !_MSC_VER

CommonProperty::CommonProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonProperty::InitAsDefaultInstance() {
}

CommonProperty::CommonProperty(const CommonProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonProperty::SharedCtor() {
  _cached_size_ = 0;
  maxvalue_ = 0;
  valueregeneration_ = 0;
  attack_ = 0;
  defense_ = 0;
  defensepenetration_ = 0;
  lifesteal_ = 0;
  critical_ = 0;
  criticaldamage_ = 0;
  toughness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonProperty::~CommonProperty() {
  SharedDtor();
}

void CommonProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonProperty_descriptor_;
}

const CommonProperty& CommonProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseProperty_2eproto();
  return *default_instance_;
}

CommonProperty* CommonProperty::default_instance_ = NULL;

CommonProperty* CommonProperty::New() const {
  return new CommonProperty;
}

void CommonProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxvalue_ = 0;
    valueregeneration_ = 0;
    attack_ = 0;
    defense_ = 0;
    defensepenetration_ = 0;
    lifesteal_ = 0;
    critical_ = 0;
    criticaldamage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    toughness_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float MaxValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ValueRegeneration;
        break;
      }

      // required float ValueRegeneration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ValueRegeneration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &valueregeneration_)));
          set_has_valueregeneration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Attack;
        break;
      }

      // required float Attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Defense;
        break;
      }

      // required float Defense = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_DefensePenetration;
        break;
      }

      // required float DefensePenetration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DefensePenetration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defensepenetration_)));
          set_has_defensepenetration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_LifeSteal;
        break;
      }

      // required float LifeSteal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LifeSteal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lifesteal_)));
          set_has_lifesteal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_Critical;
        break;
      }

      // required float Critical = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_CriticalDamage;
        break;
      }

      // required float CriticalDamage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CriticalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &criticaldamage_)));
          set_has_criticaldamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Toughness;
        break;
      }

      // required float Toughness = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float MaxValue = 1;
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->maxvalue(), output);
  }

  // required float ValueRegeneration = 2;
  if (has_valueregeneration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->valueregeneration(), output);
  }

  // required float Attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->attack(), output);
  }

  // required float Defense = 4;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->defense(), output);
  }

  // required float DefensePenetration = 5;
  if (has_defensepenetration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->defensepenetration(), output);
  }

  // required float LifeSteal = 6;
  if (has_lifesteal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->lifesteal(), output);
  }

  // required float Critical = 7;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->critical(), output);
  }

  // required float CriticalDamage = 8;
  if (has_criticaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->criticaldamage(), output);
  }

  // required float Toughness = 9;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->toughness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float MaxValue = 1;
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->maxvalue(), target);
  }

  // required float ValueRegeneration = 2;
  if (has_valueregeneration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->valueregeneration(), target);
  }

  // required float Attack = 3;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->attack(), target);
  }

  // required float Defense = 4;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->defense(), target);
  }

  // required float DefensePenetration = 5;
  if (has_defensepenetration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->defensepenetration(), target);
  }

  // required float LifeSteal = 6;
  if (has_lifesteal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->lifesteal(), target);
  }

  // required float Critical = 7;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->critical(), target);
  }

  // required float CriticalDamage = 8;
  if (has_criticaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->criticaldamage(), target);
  }

  // required float Toughness = 9;
  if (has_toughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->toughness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float MaxValue = 1;
    if (has_maxvalue()) {
      total_size += 1 + 4;
    }

    // required float ValueRegeneration = 2;
    if (has_valueregeneration()) {
      total_size += 1 + 4;
    }

    // required float Attack = 3;
    if (has_attack()) {
      total_size += 1 + 4;
    }

    // required float Defense = 4;
    if (has_defense()) {
      total_size += 1 + 4;
    }

    // required float DefensePenetration = 5;
    if (has_defensepenetration()) {
      total_size += 1 + 4;
    }

    // required float LifeSteal = 6;
    if (has_lifesteal()) {
      total_size += 1 + 4;
    }

    // required float Critical = 7;
    if (has_critical()) {
      total_size += 1 + 4;
    }

    // required float CriticalDamage = 8;
    if (has_criticaldamage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float Toughness = 9;
    if (has_toughness()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonProperty::MergeFrom(const CommonProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
    if (from.has_valueregeneration()) {
      set_valueregeneration(from.valueregeneration());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defense()) {
      set_defense(from.defense());
    }
    if (from.has_defensepenetration()) {
      set_defensepenetration(from.defensepenetration());
    }
    if (from.has_lifesteal()) {
      set_lifesteal(from.lifesteal());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_criticaldamage()) {
      set_criticaldamage(from.criticaldamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonProperty::CopyFrom(const CommonProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CommonProperty::Swap(CommonProperty* other) {
  if (other != this) {
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(valueregeneration_, other->valueregeneration_);
    std::swap(attack_, other->attack_);
    std::swap(defense_, other->defense_);
    std::swap(defensepenetration_, other->defensepenetration_);
    std::swap(lifesteal_, other->lifesteal_);
    std::swap(critical_, other->critical_);
    std::swap(criticaldamage_, other->criticaldamage_);
    std::swap(toughness_, other->toughness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonProperty_descriptor_;
  metadata.reflection = CommonProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseProperty::kPhysicalPropertyFieldNumber;
const int BaseProperty::kMagicalPropertyFieldNumber;
const int BaseProperty::kCoolingReductionFieldNumber;
const int BaseProperty::kAttackSpeedFieldNumber;
const int BaseProperty::kMoveSpeedFieldNumber;
#endif  // !_MSC_VER

BaseProperty::BaseProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseProperty::InitAsDefaultInstance() {
  physicalproperty_ = const_cast< ::ServerProto::Logic::CommonProperty*>(&::ServerProto::Logic::CommonProperty::default_instance());
  magicalproperty_ = const_cast< ::ServerProto::Logic::CommonProperty*>(&::ServerProto::Logic::CommonProperty::default_instance());
}

BaseProperty::BaseProperty(const BaseProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseProperty::SharedCtor() {
  _cached_size_ = 0;
  physicalproperty_ = NULL;
  magicalproperty_ = NULL;
  coolingreduction_ = 0;
  attackspeed_ = 0;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseProperty::~BaseProperty() {
  SharedDtor();
}

void BaseProperty::SharedDtor() {
  if (this != default_instance_) {
    delete physicalproperty_;
    delete magicalproperty_;
  }
}

void BaseProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseProperty_descriptor_;
}

const BaseProperty& BaseProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseProperty_2eproto();
  return *default_instance_;
}

BaseProperty* BaseProperty::default_instance_ = NULL;

BaseProperty* BaseProperty::New() const {
  return new BaseProperty;
}

void BaseProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_physicalproperty()) {
      if (physicalproperty_ != NULL) physicalproperty_->::ServerProto::Logic::CommonProperty::Clear();
    }
    if (has_magicalproperty()) {
      if (magicalproperty_ != NULL) magicalproperty_->::ServerProto::Logic::CommonProperty::Clear();
    }
    coolingreduction_ = 0;
    attackspeed_ = 0;
    movespeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ServerProto.Logic.CommonProperty PhysicalProperty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physicalproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MagicalProperty;
        break;
      }

      // optional .ServerProto.Logic.CommonProperty MagicalProperty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MagicalProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magicalproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_CoolingReduction;
        break;
      }

      // required float CoolingReduction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CoolingReduction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coolingreduction_)));
          set_has_coolingreduction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_AttackSpeed;
        break;
      }

      // required float AttackSpeed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_MoveSpeed;
        break;
      }

      // required float MoveSpeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ServerProto.Logic.CommonProperty PhysicalProperty = 1;
  if (has_physicalproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->physicalproperty(), output);
  }

  // optional .ServerProto.Logic.CommonProperty MagicalProperty = 2;
  if (has_magicalproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->magicalproperty(), output);
  }

  // required float CoolingReduction = 3;
  if (has_coolingreduction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coolingreduction(), output);
  }

  // required float AttackSpeed = 4;
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->attackspeed(), output);
  }

  // required float MoveSpeed = 5;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ServerProto.Logic.CommonProperty PhysicalProperty = 1;
  if (has_physicalproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->physicalproperty(), target);
  }

  // optional .ServerProto.Logic.CommonProperty MagicalProperty = 2;
  if (has_magicalproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->magicalproperty(), target);
  }

  // required float CoolingReduction = 3;
  if (has_coolingreduction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coolingreduction(), target);
  }

  // required float AttackSpeed = 4;
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->attackspeed(), target);
  }

  // required float MoveSpeed = 5;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ServerProto.Logic.CommonProperty PhysicalProperty = 1;
    if (has_physicalproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physicalproperty());
    }

    // optional .ServerProto.Logic.CommonProperty MagicalProperty = 2;
    if (has_magicalproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magicalproperty());
    }

    // required float CoolingReduction = 3;
    if (has_coolingreduction()) {
      total_size += 1 + 4;
    }

    // required float AttackSpeed = 4;
    if (has_attackspeed()) {
      total_size += 1 + 4;
    }

    // required float MoveSpeed = 5;
    if (has_movespeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseProperty::MergeFrom(const BaseProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physicalproperty()) {
      mutable_physicalproperty()->::ServerProto::Logic::CommonProperty::MergeFrom(from.physicalproperty());
    }
    if (from.has_magicalproperty()) {
      mutable_magicalproperty()->::ServerProto::Logic::CommonProperty::MergeFrom(from.magicalproperty());
    }
    if (from.has_coolingreduction()) {
      set_coolingreduction(from.coolingreduction());
    }
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseProperty::CopyFrom(const BaseProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  if (has_physicalproperty()) {
    if (!this->physicalproperty().IsInitialized()) return false;
  }
  if (has_magicalproperty()) {
    if (!this->magicalproperty().IsInitialized()) return false;
  }
  return true;
}

void BaseProperty::Swap(BaseProperty* other) {
  if (other != this) {
    std::swap(physicalproperty_, other->physicalproperty_);
    std::swap(magicalproperty_, other->magicalproperty_);
    std::swap(coolingreduction_, other->coolingreduction_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseProperty_descriptor_;
  metadata.reflection = BaseProperty_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Logic
}  // namespace ServerProto

// @@protoc_insertion_point(global_scope)
